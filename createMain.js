"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_common_1 = require("@neo-one/client-common");
const node_core_1 = require("@neo-one/node-core");
const common_1 = require("./common");
const DEFAULT_VALIDATORS = [
      "035d64f7ff9a02d7c0f8c11977ac04cc82c7ba1fb7d7932b926e561cdee11fe402",
      "0266fad048f713b12cf54008bf73e4310b70bdb049873c9126008e512f167b2612",
      "0326ab6643f8b687d5b2b2a6fb5d593c4a6e35cf0f91c80efaf4c87590f872c70b",
      "021b0ca082ebc1452c10e794d18ad6c78345ff0b00777a5b842cfa925f3d3b72c4",
];
exports.createMain = ({ privateNet = false, standbyValidators: standbyValidatorsIn = DEFAULT_VALIDATORS, secondsPerBlock, address: addressIn, } = {}) => {
    const standbyValidators = standbyValidatorsIn.map((value) => client_common_1.common.stringToECPoint(value));
    const consensusAddress = standbyValidatorsIn === DEFAULT_VALIDATORS
        ? client_common_1.common.asUInt160(Buffer.from('51b6a4d6f883b530726467bcf54d52bf08055ce5', 'hex'))
        : client_common_1.crypto.getConsensusAddress(standbyValidators);
    let address;
    if (addressIn === undefined) {
        address =
            standbyValidatorsIn === DEFAULT_VALIDATORS
                ? client_common_1.common.asUInt160(Buffer.from('51b6a4d6f883b530726467bcf54d52bf08055ce5', 'hex'))
                : client_common_1.crypto.toScriptHash(client_common_1.crypto.createMultiSignatureVerificationScript(standbyValidators.length / 2 + 1, standbyValidators));
    }
    else {
        address = client_common_1.common.stringToUInt160(addressIn);
    }
    const commonSettings = common_1.common({
        privateNet,
        consensusAddress,
        address,
    });
    return {
        genesisBlock: commonSettings.genesisBlock,
        governingToken: commonSettings.governingToken,
        utilityToken: commonSettings.utilityToken,
        decrementInterval: commonSettings.decrementInterval,
        generationAmount: commonSettings.generationAmount,
        secondsPerBlock: 1,
        maxTransactionsPerBlock: commonSettings.maxTransactionsPerBlock,
        memPoolSize: commonSettings.memPoolSize,
        fees: {
            [node_core_1.TransactionType.Enrollment]: client_common_1.common.fixed8FromDecimal(1000),
            [node_core_1.TransactionType.Issue]: client_common_1.common.fixed8FromDecimal(500),
            [node_core_1.TransactionType.Publish]: client_common_1.common.fixed8FromDecimal(500),
            [node_core_1.TransactionType.Register]: client_common_1.common.fixed8FromDecimal(10000),
        },
        registerValidatorFee: client_common_1.common.fixed8FromDecimal(1000),
        messageMagic: 67827978,
        addressVersion: client_common_1.common.NEO_ADDRESS_VERSION,
        privateKeyVersion: client_common_1.common.NEO_PRIVATE_KEY_VERSION,
        standbyValidators,
        vm: {
            storageContext: {
                v0: {
                    index: 0,
                },
            },
        },
        features: {
            structClone: privateNet ? -1 : Number.MAX_SAFE_INTEGER,
        },
    };
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QixjQUFjLEVBQUUsc0JBQVksQ0FBQyxtQkFBbUI7UUFDaEQsaUJBQWlCLEVBQUUsc0JBQVksQ0FBQyx1QkFBdUI7UUFDdkQsaUJBQWlCO1FBQ2pCLEVBQUUsRUFBRTtZQUNGLGNBQWMsRUFBRTtnQkFDZCxFQUFFLEVBQUU7b0JBQ0YsS0FBSyxFQUFFLENBQUM7aUJBQ1Q7YUFDRjtTQUNGO1FBQ0QsUUFBUSxFQUFFO1lBQ1IsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0I7U0FDdkQ7S0FDRixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwiZmlsZSI6Im5lby1vbmUtbm9kZS1uZW8tc2V0dGluZ3Mvc3JjL2NyZWF0ZU1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21tb24gYXMgY2xpZW50Q29tbW9uLCBjcnlwdG8sIFVJbnQxNjAgfSBmcm9tICdAbmVvLW9uZS9jbGllbnQtY29tbW9uJztcbmltcG9ydCB7IFNldHRpbmdzLCBUcmFuc2FjdGlvblR5cGUgfSBmcm9tICdAbmVvLW9uZS9ub2RlLWNvcmUnO1xuaW1wb3J0IHsgY29tbW9uIH0gZnJvbSAnLi9jb21tb24nO1xuXG5jb25zdCBERUZBVUxUX1ZBTElEQVRPUlM6IFJlYWRvbmx5QXJyYXk8c3RyaW5nPiA9IFtcbiAgJzAzYjIwOWZkNGY1M2E3MTcwZWE0NDQ0ZTBjYjBhNmJiNmE1M2MyYmQwMTY5MjY5ODljZjg1ZjliMGZiYTE3YTcwYycsXG4gICcwMmRmNDhmNjBlOGYzZTAxYzQ4ZmY0MGI5YjdmMTMxMGQ3YThiMmExOTMxODhiZWZlMWMyZTNkZjc0MGU4OTUwOTMnLFxuICAnMDNiOGQ5ZDU3NzFkOGY1MTNhYTA4NjliOWNjOGQ1MDk4NjQwM2I3OGM2ZGEzNjg5MDYzOGMzZDQ2YTVhZGNlMDRhJyxcbiAgJzAyY2EwZTI3Njk3YjljMjQ4ZjZmMTZlMDg1ZmQwMDYxZTI2ZjQ0ZGE4NWI1OGVlODM1YzExMGNhYTVlYzNiYTU1NCcsXG4gICcwMjRjN2I3ZmI2YzMxMGZjY2YxYmEzM2IwODI1MTlkODI5NjRlYTkzODY4ZDY3NjY2MmQ0YTU5YWQ1NDhkZjBlN2QnLFxuICAnMDJhYWVjMzg0NzBmNmFhZDAwNDJjNmU4NzdjZmQ4MDg3ZDI2NzZiMGY1MTZmZGRkMzYyODAxYjliZDM5MzYzOTllJyxcbiAgJzAyNDg2ZmQxNTcwMmM0NDkwYTI2NzAzMTEyYTVjYzFkMDkyM2ZkNjk3YTMzNDA2YmQ1YTFjMDBlMDAxM2IwOWE3MCcsXG5dO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlTWFpbiA9ICh7XG4gIHByaXZhdGVOZXQgPSBmYWxzZSxcbiAgc3RhbmRieVZhbGlkYXRvcnM6IHN0YW5kYnlWYWxpZGF0b3JzSW4gPSBERUZBVUxUX1ZBTElEQVRPUlMsXG4gIHNlY29uZHNQZXJCbG9jayxcbiAgYWRkcmVzczogYWRkcmVzc0luLFxufToge1xuICByZWFkb25seSBwcml2YXRlTmV0PzogYm9vbGVhbjtcbiAgcmVhZG9ubHkgc2Vjb25kc1BlckJsb2NrPzogbnVtYmVyO1xuICByZWFkb25seSBzdGFuZGJ5VmFsaWRhdG9ycz86IFJlYWRvbmx5QXJyYXk8c3RyaW5nPjtcbiAgcmVhZG9ubHkgYWRkcmVzcz86IHN0cmluZztcbn0gPSB7fSk6IFNldHRpbmdzID0+IHtcbiAgY29uc3Qgc3RhbmRieVZhbGlkYXRvcnMgPSBzdGFuZGJ5VmFsaWRhdG9yc0luLm1hcCgodmFsdWUpID0+IGNsaWVudENvbW1vbi5zdHJpbmdUb0VDUG9pbnQodmFsdWUpKTtcblxuICBjb25zdCBjb25zZW5zdXNBZGRyZXNzID1cbiAgICBzdGFuZGJ5VmFsaWRhdG9yc0luID09PSBERUZBVUxUX1ZBTElEQVRPUlNcbiAgICAgID8gY2xpZW50Q29tbW9uLmFzVUludDE2MChCdWZmZXIuZnJvbSgnNTllNzVkNjUyYjVkMzgyN2JmMDRjMTY1YmJlOWVmOTVjY2E0YmY1NScsICdoZXgnKSlcbiAgICAgIDogY3J5cHRvLmdldENvbnNlbnN1c0FkZHJlc3Moc3RhbmRieVZhbGlkYXRvcnMpO1xuICBsZXQgYWRkcmVzczogVUludDE2MDtcbiAgaWYgKGFkZHJlc3NJbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYWRkcmVzcyA9XG4gICAgICBzdGFuZGJ5VmFsaWRhdG9yc0luID09PSBERUZBVUxUX1ZBTElEQVRPUlNcbiAgICAgICAgPyBjbGllbnRDb21tb24uYXNVSW50MTYwKEJ1ZmZlci5mcm9tKCc1ZmE5OWQ5MzMwMzc3NWZlNTBjYTExOWMzMjc3NTkzMTNlY2NmYTFjJywgJ2hleCcpKVxuICAgICAgICA6IGNyeXB0by50b1NjcmlwdEhhc2goXG4gICAgICAgICAgICBjcnlwdG8uY3JlYXRlTXVsdGlTaWduYXR1cmVWZXJpZmljYXRpb25TY3JpcHQoc3RhbmRieVZhbGlkYXRvcnMubGVuZ3RoIC8gMiArIDEsIHN0YW5kYnlWYWxpZGF0b3JzKSxcbiAgICAgICAgICApO1xuICB9IGVsc2Uge1xuICAgIGFkZHJlc3MgPSBjbGllbnRDb21tb24uc3RyaW5nVG9VSW50MTYwKGFkZHJlc3NJbik7XG4gIH1cblxuICBjb25zdCBjb21tb25TZXR0aW5ncyA9IGNvbW1vbih7XG4gICAgcHJpdmF0ZU5ldCxcbiAgICBjb25zZW5zdXNBZGRyZXNzLFxuICAgIGFkZHJlc3MsXG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgZ2VuZXNpc0Jsb2NrOiBjb21tb25TZXR0aW5ncy5nZW5lc2lzQmxvY2ssXG4gICAgZ292ZXJuaW5nVG9rZW46IGNvbW1vblNldHRpbmdzLmdvdmVybmluZ1Rva2VuLFxuICAgIHV0aWxpdHlUb2tlbjogY29tbW9uU2V0dGluZ3MudXRpbGl0eVRva2VuLFxuICAgIGRlY3JlbWVudEludGVydmFsOiBjb21tb25TZXR0aW5ncy5kZWNyZW1lbnRJbnRlcnZhbCxcbiAgICBnZW5lcmF0aW9uQW1vdW50OiBjb21tb25TZXR0aW5ncy5nZW5lcmF0aW9uQW1vdW50LFxuICAgIHNlY29uZHNQZXJCbG9jazogc2Vjb25kc1BlckJsb2NrID09PSB1bmRlZmluZWQgPyBjb21tb25TZXR0aW5ncy5zZWNvbmRzUGVyQmxvY2sgOiBzZWNvbmRzUGVyQmxvY2ssXG4gICAgbWF4VHJhbnNhY3Rpb25zUGVyQmxvY2s6IGNvbW1vblNldHRpbmdzLm1heFRyYW5zYWN0aW9uc1BlckJsb2NrLFxuICAgIG1lbVBvb2xTaXplOiBjb21tb25TZXR0aW5ncy5tZW1Qb29sU2l6ZSxcbiAgICBmZWVzOiB7XG4gICAgICBbVHJhbnNhY3Rpb25UeXBlLkVucm9sbG1lbnRdOiBjbGllbnRDb21tb24uZml4ZWQ4RnJvbURlY2ltYWwoMTAwMCksXG4gICAgICBbVHJhbnNhY3Rpb25UeXBlLklzc3VlXTogY2xpZW50Q29tbW9uLmZpeGVkOEZyb21EZWNpbWFsKDUwMCksXG4gICAgICBbVHJhbnNhY3Rpb25UeXBlLlB1Ymxpc2hdOiBjbGllbnRDb21tb24uZml4ZWQ4RnJvbURlY2ltYWwoNTAwKSxcbiAgICAgIFtUcmFuc2FjdGlvblR5cGUuUmVnaXN0ZXJdOiBjbGllbnRDb21tb24uZml4ZWQ4RnJvbURlY2ltYWwoMTAwMDApLFxuICAgIH0sXG5cbiAgICByZWdpc3RlclZhbGlkYXRvckZlZTogY2xpZW50Q29tbW9uLmZpeGVkOEZyb21EZWNpbWFsKDEwMDApLFxuICAgIG1lc3NhZ2VNYWdpYzogNzYzMDQwMSxcbiAgICBhZGRyZXNzVmVyc2lvbjogY2xpZW50Q29tbW9uLk5FT19BRERSRVNTX1ZFUlNJT04sXG4gICAgcHJpdmF0ZUtleVZlcnNpb246IGNsaWVudENvbW1vbi5ORU9fUFJJVkFURV9LRVlfVkVSU0lPTixcbiAgICBzdGFuZGJ5VmFsaWRhdG9ycyxcbiAgICB2bToge1xuICAgICAgc3RvcmFnZUNvbnRleHQ6IHtcbiAgICAgICAgdjA6IHtcbiAgICAgICAgICBpbmRleDogMCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBmZWF0dXJlczoge1xuICAgICAgc3RydWN0Q2xvbmU6IHByaXZhdGVOZXQgPyAtMSA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgIH0sXG4gIH07XG59O1xuIl19
