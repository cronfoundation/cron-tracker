{"version":3,"sources":["webpack:///./node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/_esm5/internal/operators/take.js","webpack:///packages/neotracker-shared-web-next/src/components/render/Query.tsx","webpack:///packages/neotracker-shared-web-next/src/pages/Home.tsx"],"names":["ArgumentOutOfRangeErrorImpl","Error","call","this","message","name","prototype","Object","create","ArgumentOutOfRangeError","take","count","source","empty","lift","take_TakeOperator","TakeOperator","total","subscriber","subscribe","take_TakeSubscriber","_super","TakeSubscriber","destination","_this","tslib_es6","_next","value","next","complete","unsubscribe","Subscriber","getObserveQueryOptions","_ref","_ref$appContext","appContext","apollo","monitor","query","variables","_ref$notifyOnNetworkS","notifyOnNetworkStatusChange","_ref$fetchPolicy","fetchPolicy","Query_QueryBase","QueryBase","props","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","mutableResult$","observeQuery","react","nextProps","isEqual_default","FromStream","props$","children","ErrorBox","es","withConfig","displayName","componentId","HomeQuery","_ref2","fetchNextData","_React$Component2","Query","apply","arguments","_inherits","_createClass","key","_this2","WithAppContext","assign","_fetchData","_asyncToGenerator","regeneratorRuntime","mark","_callee","result","wrap","_context","prev","pipe","map","undefined","error","filter","toPromise","sent","stop","_x","_x2","Query_makeQuery","kind","definitions","operation","variableDefinitions","directives","selectionSet","selections","alias","loc","start","end","body","locationOffset","line","column","id","Home","data","first","second","hash","fetchDataForRoute","Home_asyncToGenerator","fetchData"],"mappings":"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","file":"1-2e23b6cf7a75f1d8178b.js","sourcesContent":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction ArgumentOutOfRangeErrorImpl() {\n    Error.call(this);\n    this.message = 'argument out of range';\n    this.name = 'ArgumentOutOfRangeError';\n    return this;\n}\nArgumentOutOfRangeErrorImpl.prototype = /*@__PURE__*/ Object.create(Error.prototype);\nexport var ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","import { FetchPolicy, OperationVariables } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { AppContext } from '../../AppContext';\nimport {\n  isResolvedQueryResult,\n  observeQuery,\n  ObserveQueryOptions,\n  QueryResult,\n  ResolvedQueryResult,\n} from '../../utils';\nimport { FromStream } from './FromStream';\nimport { WithAppContext } from './WithAppContext';\n\nexport interface QueryProps<TData, TVariables> {\n  readonly children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\n  readonly variables?: TVariables;\n  readonly notifyOnNetworkStatusChange?: boolean;\n}\nexport interface Props<TData, TVariables> extends QueryProps<TData, TVariables> {\n  readonly query: DocumentNode;\n  readonly appContext: AppContext;\n}\n\ninterface GetObserveQueryOptions<TVariables> {\n  readonly query: DocumentNode;\n  readonly appContext: AppContext;\n  readonly variables?: TVariables;\n  readonly notifyOnNetworkStatusChange?: boolean;\n  readonly fetchPolicy?: FetchPolicy;\n}\n\nfunction getObserveQueryOptions<TVariables>({\n  appContext: { apollo, monitor },\n  query,\n  variables,\n  notifyOnNetworkStatusChange = false,\n  fetchPolicy = 'cache-and-network',\n}: GetObserveQueryOptions<TVariables>): ObserveQueryOptions<TVariables> {\n  return {\n    apollo,\n    monitor,\n    query,\n    variables: variables as TVariables,\n    fetchPolicy,\n    notifyOnNetworkStatusChange,\n  };\n}\n\nclass QueryBase<TData, TVariables = OperationVariables> extends React.Component<Props<TData, TVariables>> {\n  private mutableResult$: Observable<QueryResult<TData, TVariables>>;\n\n  public constructor(props: Props<TData, TVariables>) {\n    super(props);\n\n    this.mutableResult$ = observeQuery(getObserveQueryOptions(props));\n  }\n\n  public componentWillReceiveProps(nextProps: Props<TData, TVariables>): void {\n    if (\n      this.props.appContext.apollo !== nextProps.appContext.apollo ||\n      this.props.appContext.monitor !== nextProps.appContext.monitor ||\n      this.props.query !== nextProps.query ||\n      this.props.notifyOnNetworkStatusChange !== nextProps.notifyOnNetworkStatusChange ||\n      !_.isEqual(this.props.variables, nextProps.variables)\n    ) {\n      this.mutableResult$ = observeQuery(getObserveQueryOptions(nextProps));\n    }\n  }\n\n  public render(): React.ReactNode {\n    return <FromStream props$={this.mutableResult$}>{this.props.children}</FromStream>;\n  }\n}\n\nexport interface QueryClass<TData, TVariables> extends React.ComponentClass<QueryProps<TData, TVariables>> {\n  readonly fetchData: (appContext: AppContext, variables?: TVariables) => Promise<void>;\n}\nexport interface Options<TData, TVariables> {\n  readonly query: DocumentNode;\n  readonly fetchNextData?: (appContext: AppContext, result: ResolvedQueryResult<TData, TVariables>) => Promise<void>;\n}\nexport const makeQuery = <TData, TVariables = OperationVariables>({\n  query,\n  fetchNextData,\n}: Options<TData, TVariables>): QueryClass<TData, TVariables> => {\n  class Query extends React.Component<QueryProps<TData, TVariables>> {\n    public static async fetchData(appContext: AppContext, variables?: TVariables): Promise<void> {\n      const result = await observeQuery<TData, TVariables>(\n        getObserveQueryOptions({ appContext, query, variables, fetchPolicy: 'cache-first' }),\n      )\n        .pipe(\n          map((value) => {\n            if (value.error !== undefined) {\n              throw value.error;\n            }\n\n            return value;\n          }),\n          filter(isResolvedQueryResult),\n          take(1),\n        )\n        .toPromise();\n\n      if (fetchNextData !== undefined) {\n        await fetchNextData(appContext, result);\n      }\n    }\n\n    public render(): React.ReactNode {\n      return (\n        <WithAppContext>\n          {(appContext) => (\n            <QueryBase {...this.props} query={query} appContext={appContext}>\n              {this.props.children}\n            </QueryBase>\n          )}\n        </WithAppContext>\n      );\n    }\n  }\n\n  return Query;\n};\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Box, styled } from 'reakit';\nimport { AppContext } from '../AppContext';\nimport { makeQuery } from '../components';\nimport { HomeQuery as HomeQueryData } from './__generated__/HomeQuery';\n\nconst ErrorBox = styled(Box)`\n  background-color: red;\n  color: black;\n  width: 00;\n`;\n\nconst HomeQuery = makeQuery<HomeQueryData>({\n  query: gql`\n    query HomeQuery {\n      first: block(index: 0) {\n        id\n        hash\n      }\n      second: block(index: 1) {\n        id\n        hash\n      }\n    }\n  `,\n});\n\nexport function Home() {\n  return (\n    <HomeQuery>\n      {({ data, error }) => {\n        if (data.first !== undefined || data.second !== undefined) {\n          const first = data.first == undefined ? undefined : <Box>{data.first.hash}</Box>;\n          const second = data.second == undefined ? undefined : <Box>{data.second.hash}</Box>;\n\n          return (\n            <>\n              {first}\n              {second}\n            </>\n          );\n        }\n\n        if (error) {\n          return <ErrorBox>Error!</ErrorBox>;\n        }\n\n        return <Box>Loading...</Box>;\n      }}\n    </HomeQuery>\n  );\n}\n\nexport namespace Home {\n  export const fetchDataForRoute = async (appContext: AppContext): Promise<void> => {\n    await HomeQuery.fetchData(appContext);\n  };\n}\n"],"sourceRoot":""}