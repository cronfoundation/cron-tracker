{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///packages/neotracker-shared-utils/src/labels.ts","webpack:///packages/neotracker-shared-web-next/src/components/render/WithAppContext.tsx","webpack:///packages/neotracker-shared-web-next/src/components/render/WithAppOptions.tsx","webpack:///packages/neotracker-shared-web-next/src/components/render/WithRouter.tsx","webpack:///packages/neotracker-shared-web-next/src/AppShell.tsx","webpack:///packages/neotracker-shared-web-next/src/theme/Theme.ts","webpack:///packages/neotracker-shared-web-next/src/metrics.ts","webpack:///packages/neotracker-shared-web-next/src/App.tsx","webpack:///packages/neotracker-shared-web-next/src/routes.ts","webpack:///packages/neotracker-shared-web-next/src/index.ts","webpack:///packages/neotracker-shared-web-next/src/components/render/FromStream.tsx","webpack:///packages/neotracker-shared-graphql/src/QueryDeduplicator.ts","webpack:///packages/neotracker-client-web-next/src/init.ts","webpack:///packages/neotracker-shared-utils/src/ua.ts","webpack:///packages/neotracker-shared-utils/src/errors/BaseError.ts","webpack:///packages/neotracker-shared-utils/src/errors/ClientError.ts","webpack:///packages/neotracker-client-web-next/src/createQueryDeduplicator.ts","webpack:///packages/neotracker-shared-utils/src/utils.ts","webpack:///packages/neotracker-shared-graphql/src/constants.ts","webpack:///packages/neotracker-shared-utils/src/errors/sanitizeError.ts","webpack:///packages/neotracker-client-web-next/src/LiveClient.ts","webpack:///packages/neotracker-client-web-next/src/LiveLink.ts","webpack:///packages/neotracker-client-web-next/src/createAppContext.ts","webpack:///packages/neotracker-client-web-next/src/renderApp.tsx","webpack:///packages/neotracker-client-web-next/src/render.ts","webpack:///packages/neotracker-client-web-next/src/createApolloClient.ts","webpack:///packages/neotracker-client-web-next/src/entry.ts","webpack:///packages/neotracker-shared-web-next/src/utils/observeQuery.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","e","promises","installedChunkData","promise","Promise","resolve","reject","onScriptComplete","head","document","getElementsByTagName","script","createElement","charset","timeout","nc","setAttribute","src","p","1","2","jsonpScriptSrc","event","onerror","onload","clearTimeout","chunk","errorType","type","realSrc","target","error","Error","request","undefined","setTimeout","appendChild","all","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","oe","err","console","jsonpArray","window","oldJsonpFunction","slice","__webpack_exports__","labels","CLUSTER_NAME","CREATE_KEYSTORE_NEW","CLICK_SOURCE","COMPONENT_STACK","WEBSOCKET_URL","WEBSOCKET_CLOSE_CODE","WEBSOCKET_CLOSE_REASON","WEBSOCKET_MESSAGE_TYPE","WEBSOCKET_MESSAGEJSON","WEBSOCKET_PROTOCOLS","GRAPHQL_QUERY","GRAPHQL_VARIABLES","GRAPHQL_LIVE_NAME","GRAPHQL_PATH","UA","UA_BROWSER_NAME","UA_BROWSER_VERSION","UA_DEVICE_MODEL","UA_DEVICE_TYPE","UA_DEVICE_VENDOR","UA_ENGINE_NAME","UA_ENGINE_VERSION","UA_OS_NAME","UA_OS_VERSION","UA_CPU_ARCHITECTURE","APP_VERSION","STACK_MESSAGE","STACK_LINENUMBER","STACK_COLUMNNUMBER","POD_NAME","LETSENCRYPT_DOMAINS","LETSENCRYPT_NAMESPACE","LETSENCRYPT_SECRET","LETSENCRYPT_HOSTNAME","DNS_ID","DNS_ADD","DNS_DELETE","DNS_SERVICE_KEY","DNS_SERVICE_RECORDS","DNS_SERVICE_DELETE","DNS_NODE_RECORDS","POSTGRES_BACKUPWAL_ISBEHIND","POSTGRES_BACKUPWAL_VALUE","POSTGRES_BACKUPWAL_LSNOFFSET","POSTGRES_BACKUPWAL_REDOWAL","POSTGRES_BACKUPWAL_REDOWALLSN","POSTGRES_DATAEXIST","POSTGRES_BACKUPEXIST","POSTGRES_ONSAMETIMELINE","POSTGRES_EXIT_CODE","POSTGRES_EXIT_SIGNAL","POSTGRES_LOG_FILE","POSTGRES_REMOTEWALFILE","EXEC_COMMAND","EXEC_ARGS","CONSUL_PATH","CONSUL_KEY","CONSUL_LOCK_REASON","ACTION_BLOCK_INDEX","ACTION_TRANSACTION_INDEX","ACTION_INDEX","CONTRACT_HASH","SCRAPE_REPAIR_NEP5_COINS","SCRAPE_REPAIR_NEP5_ASSET","QUEUE_SIZE","OPTIONS","NEO_ADDRESS","DB_TABLE","AppContextProvider","WithAppContext","react__WEBPACK_IMPORTED_MODULE_0__","WithAppContextBase","Provider","Consumer","WithAppOptions_WithAppOptions","_ref","children","react","_ref2","options$","FromStream","props$","WithRouter_WithRouterComponent","_a","this","props","tslib_es6","WithRouter","withRouter","theme","primary","secondary","Root","styled_components_browser_esm","es","withConfig","displayName","componentId","AppShell_AppShell","appContext","appOptions","location","title","meta","path","pathname","endsWith","canonicalURL","concat","url","Helmet_default","a","titleTemplate","defaultTitle","lang","content","description","charSet","httpEquiv","rel","sizes","href","color","NEOTRACKER_SESSION","createCounter","ROUTE_CONFIGS_WITH_RENDER","exact","routes","component","lib_default","loader","then","Home","webpack","loading","Error404","map","config","assign","render","Component","staticContext","routePath","match","missed","App_App","_React$Component","App","App_classCallCheck","App_possibleConstructorReturn","App_getPrototypeOf","arguments","App_inherits","App_createClass","Switch","Route","inc","ROOT","HOME","GRAPHQL","CLIENT","_routes__WEBPACK_IMPORTED_MODULE_0__","initialValue","for","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","mutableMounted","state","subscribe","_inherits","_createClass","unsubscribe","prevProps","_this2","stateSet","mutableSubscription","next","_setValue","setState","resolvedPromise","GRAPHQL_EXECUTE_QUERIES_DURATION_SECONDS","_neo_one_monitor__WEBPACK_IMPORTED_MODULE_1__","createHistogram","GRAPHQL_EXECUTE_QUERIES_FAILURES_TOTAL","QueryDeduplicator","executeQueries","monitor","consumeQueue","mutableQueue","mutableInflight","_mutableQueue$0$monit","_monitor","at","withData","_defineProperty","_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__","captureSpanLog","_asyncToGenerator","regeneratorRuntime","mark","_callee","span","wrap","_context","prev","abrupt","obj","id","variables","stop","_x","references","childOf","level","log","metric","total","trace","results","forEach","idx","catch","_execute","_callee2","_ref3","cacheKey","_context2","safe_stable_stringify__WEBPACK_IMPORTED_MODULE_3___default","enmutableQueueQuery","_x2","_enmutableQueueQuery","_callee3","_context3","lodash_isEmpty__WEBPACK_IMPORTED_MODULE_0___default","process","nextTick","_x3","_x4","_x5","_x6","NoOpMetricsFactory","setFactory","CollectingMetricsFactory","ua_ua","ua","browser","version","device","model","vendor","engine","os","cpu","architecture","BaseError","_Error","message","originalError","__proto__","_wrapNativeSuper","CLIENT_ERROR_PREFIX","SOMETHING_WENT_WRONG","STATUS_CODE_TO_MESSAGE","503","ClientError","_BaseError","ClientError_classCallCheck","ClientError_possibleConstructorReturn","ClientError_getPrototypeOf","clientMessage","ClientError_inherits","startsWith","substr","extractClientErrorMessage","statusCode","_getFromResponse","response","originalMessage","status","text","sent","t0","getMessageForStatusCode","createQueryDeduplicator_createQueryDeduplicator","endpoint","monitorOuter","createQueryDeduplicator_asyncToGenerator","queries","_monitor$withLabels","body","JSON","stringify","withLabels","createQueryDeduplicator_defineProperty","SPAN_KIND","HTTP_METHOD","PEER_SERVICE","HTTP_PATH","captureSpan","headers","Content-Type","inject","formats","HTTP","browser_ponyfill_default","method","credentials","_ref4","setLabels","HTTP_STATUS_CODE","ok","json","getFromResponse","logError","getFromNetworkError","utils","nowSeconds","Math","round","Date","now","nullthrows","assertNever","_value","notNull","isPromise","zip","zip_default","SERVER_MESSAGE_TYPES","sanitizeError_sanitizeError","sanitizedError","clientError","getClientError","sanitizeError_sanitizeErrorNullable","WEBSOCKET_CLIENT_FIRST_RESPONSE_DURATION_SECONDS","labelNames","WEBSOCKET_CLIENT_FIRST_RESPONSE_FAILURES_TOTAL","LiveClient_LiveClient","LiveClient","_monitor$at$withLabel","LiveClient_classCallCheck","executeOperation","operation","generateOperationID","mutableOperations","observer","started","start","LiveClient_defineProperty","mutableNextOperationID","mutableClosedByUser","mutableReconnecting","backoff","backo2_default","jitter","wsImpl","WebSocket","MozWebSocket","LiveClient_createClass","mutableClient","captureLog","tryReconnect","onopen","sendMessage","keys","onclose","_this2$monitor$withLa","code","reason","mapValues_default","onmessage","processReceivedData","mutableClosedByUserIn","client","clearTryReconnectTimeout","close","_this3","mutableTryReconnectTimeoutID","connect","duration","_this4","Observable","OPEN","startSpan","query","String","_this5","isRetry","readyState","send","reportError","messageJSON","_this6","valid","parse","constants_typeof","includes","errors","Array","isArray","every","constants_parseAndValidateServerMessage","handleError","msg","del","end","reset","CLOSED","getWebsocketEndpoint","proto","protocol","host","LiveLink_LiveLink","_ApolloLink","LiveLink","monitorIn","LiveLink_classCallCheck","LiveLink_possibleConstructorReturn","LiveLink_getPrototypeOf","liveClient","queryDeduplicator","LiveLink_inherits","lib","LiveLink_createClass","definition","definitions","find","def","kind","getContext","subscriber","defer","LiveLink_asyncToGenerator","execute","result$","interval","pipe","switchMap","request$","container","render_render","currentWindow","userAgent","__USER_AGENT__","render_defineProperty","__APP_VERSION__","theApp","AppComponent","app","BrowserRouter","getElementById","preloadReady","react_dom","renderApp","apollo","network","css","nonce","options","of","observeQuery","variableDefinitions","directives","selectionSet","selections","loc","source","locationOffset","line","column","app_options","filter","distinctUntilChanged","publishReplay","refCount","provider","NEOONEProvider","rpcURL","storage","localforage_default","createInstance","storeName","Client","memory","LocalUserAccountProvider","keystore","LocalKeyStore","store","LocalMemoryStore","localStorage","LocalStringStore","setItem","_setItem","createAppContext_asyncToGenerator","getItem","_getItem","removeItem","_removeItem","getAllKeys","_getAllKeys","_callee4","_context4","dataProvider","NEOONEDataProvider","readClient","ReadClient","mutableWindow","setApolloClient","debug","__APOLLO_CLIENT__","nextOptions","addNetwork","setRPCURL","fileSaver","FileSaver_default","createAppContext_createAppContext","apolloState","liveLink","errorLink","apollo_link_error_lib","networkError","ApolloClient","link","from","cache","inMemoryCache","addTypename","restore","queryDeduplication","defaultOptions","watchQuery","fetchPolicy","errorPolicy","notifyOnNetworkStatusChange","mutate","createApolloClient_createApolloClient","__APOLLO_STATE__","__NETWORK__","__CSS__","__NONCE__","__OPTIONS__","BrowserMonitor","service","reportURL","collectingLogger","CollectingLogger","Reporter","logger","timer","reportTimer","tracekit_default","report","stack","_isWindowError","_monitor$withData","firstStack","entry_defineProperty","collectWindowErrors","addEventListener","preventDefault","entry_start","isResolvedQueryResult","apollo_client__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","_ref$fetchPolicy","_ref$notifyOnNetworkS","subscription","queryObservable$","fetchResults","context","_next","currentResult","networkStatus","partial","graphQLErrors","resubscribe","lastError","getLastError","lastResult","getLastResult","resetLastResults","_error","complete"],"mappings":"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","file":"index-8ae1295a183de4d4e6b5.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \"-\" + {\"1\":\"2e23b6cf7a75f1d8178b\",\"2\":\"045d364f25b779849c35\"}[chunkId] + \".js\"\n \t}\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n \t// This file contains only the entry chunk.\n \t// The chunk loading function for additional chunks\n \t__webpack_require__.e = function requireEnsure(chunkId) {\n \t\tvar promises = [];\n\n\n \t\t// JSONP chunk loading for javascript\n\n \t\tvar installedChunkData = installedChunks[chunkId];\n \t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n \t\t\t// a Promise means \"currently loading\".\n \t\t\tif(installedChunkData) {\n \t\t\t\tpromises.push(installedChunkData[2]);\n \t\t\t} else {\n \t\t\t\t// setup Promise in chunk cache\n \t\t\t\tvar promise = new Promise(function(resolve, reject) {\n \t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n \t\t\t\t});\n \t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n \t\t\t\t// start chunk loading\n \t\t\t\tvar head = document.getElementsByTagName('head')[0];\n \t\t\t\tvar script = document.createElement('script');\n \t\t\t\tvar onScriptComplete;\n\n \t\t\t\tscript.charset = 'utf-8';\n \t\t\t\tscript.timeout = 120;\n \t\t\t\tif (__webpack_require__.nc) {\n \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n \t\t\t\t}\n \t\t\t\tscript.src = jsonpScriptSrc(chunkId);\n\n \t\t\t\tonScriptComplete = function (event) {\n \t\t\t\t\t// avoid mem leaks in IE.\n \t\t\t\t\tscript.onerror = script.onload = null;\n \t\t\t\t\tclearTimeout(timeout);\n \t\t\t\t\tvar chunk = installedChunks[chunkId];\n \t\t\t\t\tif(chunk !== 0) {\n \t\t\t\t\t\tif(chunk) {\n \t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n \t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n \t\t\t\t\t\t\tvar error = new Error('Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')');\n \t\t\t\t\t\t\terror.type = errorType;\n \t\t\t\t\t\t\terror.request = realSrc;\n \t\t\t\t\t\t\tchunk[1](error);\n \t\t\t\t\t\t}\n \t\t\t\t\t\tinstalledChunks[chunkId] = undefined;\n \t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tvar timeout = setTimeout(function(){\n \t\t\t\t\tonScriptComplete({ type: 'timeout', target: script });\n \t\t\t\t}, 120000);\n \t\t\t\tscript.onerror = script.onload = onScriptComplete;\n \t\t\t\thead.appendChild(script);\n \t\t\t}\n \t\t}\n \t\treturn Promise.all(promises);\n \t};\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/client-next/\";\n\n \t// on error function for async loading\n \t__webpack_require__.oe = function(err) { console.error(err); throw err; };\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"xIlN\",3]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export const labels = {\n  CLUSTER_NAME: 'cluster.name',\n  // Was this for a new keystore or an existing private key?\n  CREATE_KEYSTORE_NEW: 'create.keystore.new',\n  // Differentiates click locations\n  CLICK_SOURCE: 'click.source',\n  // React component stack\n  COMPONENT_STACK: 'react.component_stack',\n  // Websocket related properties\n  WEBSOCKET_URL: 'websocket.url',\n  WEBSOCKET_CLOSE_CODE: 'websocket.close.code',\n  WEBSOCKET_CLOSE_REASON: 'websocket.close.reason',\n  WEBSOCKET_MESSAGE_TYPE: 'websocket.message.type',\n  WEBSOCKET_MESSAGEJSON: 'websocket.message_json',\n  WEBSOCKET_PROTOCOLS: 'websocket.protocols',\n  // GraphQL related propreties\n  GRAPHQL_QUERY: 'graphql.query',\n  GRAPHQL_VARIABLES: 'graphql.variables',\n  GRAPHQL_LIVE_NAME: 'graphql.live.name',\n  GRAPHQL_PATH: 'graphql.path',\n  // User agent\n  UA: 'ua.raw',\n  UA_BROWSER_NAME: 'ua.browser.name',\n  UA_BROWSER_VERSION: 'ua.browser.version',\n  UA_DEVICE_MODEL: 'ua.device.model',\n  UA_DEVICE_TYPE: 'ua.device.type',\n  UA_DEVICE_VENDOR: 'ua.device.vendor',\n  UA_ENGINE_NAME: 'ua.engine.name',\n  UA_ENGINE_VERSION: 'ua.engine.version',\n  UA_OS_NAME: 'ua.os.name',\n  UA_OS_VERSION: 'ua.os.version',\n  UA_CPU_ARCHITECTURE: 'ua.cpu.architecture',\n  // App version\n  APP_VERSION: 'app.version',\n  // Client side stack capture\n  STACK_MESSAGE: 'client_error.stack.message',\n  STACK_LINENUMBER: 'client_error.stack.line_number',\n  STACK_COLUMNNUMBER: 'client_error.stack.column_number',\n  // Kubernetes\n  POD_NAME: 'pod.name',\n  // LetsEncrypt\n  LETSENCRYPT_DOMAINS: 'lets_encrypt.domains',\n  LETSENCRYPT_NAMESPACE: 'lets_encrypt.namespace',\n  LETSENCRYPT_SECRET: 'lets_encrypt.secret',\n  LETSENCRYPT_HOSTNAME: 'lets_encrypt.hostname',\n  // DNS\n  DNS_ID: 'dns.id',\n  DNS_ADD: 'dns.add',\n  DNS_DELETE: 'dns.delete',\n  DNS_SERVICE_KEY: 'dns.service.key',\n  DNS_SERVICE_RECORDS: 'dns.service.records',\n  DNS_SERVICE_DELETE: 'dns.service.delete',\n  DNS_NODE_RECORDS: 'dns.node.records',\n  // Postgre\n  POSTGRES_BACKUPWAL_ISBEHIND: 'postgres.backup_wal.is_behind',\n  POSTGRES_BACKUPWAL_VALUE: 'postgres.backup_wal.value',\n  POSTGRES_BACKUPWAL_LSNOFFSET: 'postgres.backup_wal.lsn_offset',\n  POSTGRES_BACKUPWAL_REDOWAL: 'postgres.backup_wal.redo_wal',\n  POSTGRES_BACKUPWAL_REDOWALLSN: 'postgres.backup_wal.redo_wal_lsn',\n  POSTGRES_DATAEXIST: 'postgres.data_exist',\n  POSTGRES_BACKUPEXIST: 'postgres.backup_exist',\n  POSTGRES_ONSAMETIMELINE: 'postgres.on_same_timeline',\n  POSTGRES_EXIT_CODE: 'postgres.exit.code',\n  POSTGRES_EXIT_SIGNAL: 'postgres.exit.signal',\n  POSTGRES_LOG_FILE: 'postgres.log.file',\n  POSTGRES_REMOTEWALFILE: 'postgres.remote_walfile',\n  // Process\n  EXEC_COMMAND: 'exec.command',\n  EXEC_ARGS: 'exec.args',\n  // Consul\n  CONSUL_PATH: 'consul.path',\n  CONSUL_KEY: 'consul.key',\n  CONSUL_LOCK_REASON: 'consul.lock.reason',\n  // Scrape\n  ACTION_BLOCK_INDEX: 'action.block.index',\n  ACTION_TRANSACTION_INDEX: 'action.transaction.index',\n  ACTION_INDEX: 'action.index',\n  CONTRACT_HASH: 'contract.hash',\n  SCRAPE_REPAIR_NEP5_COINS: 'scrape.repair_nep5.coins',\n  SCRAPE_REPAIR_NEP5_ASSET: 'scrape.repair_nep5.asset.hash',\n  // General\n  QUEUE_SIZE: 'queue.size',\n  OPTIONS: 'options',\n  // NEO\n  NEO_ADDRESS: 'neo.address',\n  // Database\n  DB_TABLE: 'db.table',\n};\n","import * as React from 'react';\nimport { AppContext as AppContextType } from '../../AppContext';\n\n// tslint:disable-next-line no-any\nconst WithAppContextBase = React.createContext<AppContextType>(undefined as any);\n\nexport const AppContextProvider = WithAppContextBase.Provider;\nexport const WithAppContext = WithAppContextBase.Consumer;\n","import { AppOptions } from '@neotracker/shared-utils';\nimport * as React from 'react';\nimport { FromStream } from './FromStream';\nimport { WithAppContext } from './WithAppContext';\n\nexport const WithAppOptions = ({ children }: { readonly children: (appOptions: AppOptions) => React.ReactNode }) => (\n  <WithAppContext>{({ options$ }) => <FromStream props$={options$}>{children}</FromStream>}</WithAppContext>\n);\n","import * as React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\ninterface WithRouterProps<P> {\n  readonly children: (props: RouteComponentProps<P>) => React.ReactNode;\n}\ninterface Props<P> extends WithRouterProps<P>, RouteComponentProps<P> {\n  readonly children: (props: RouteComponentProps<P>) => React.ReactNode;\n}\nclass WithRouterComponent<P> extends React.Component<Props<P>> {\n  public render(): React.ReactNode {\n    const { children, ...props } = this.props;\n\n    return children(props);\n  }\n}\n\nexport interface WithRouter<P> extends React.ComponentClass<WithRouterProps<P>> {}\nexport const WithRouter = withRouter(WithRouterComponent);\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { Base } from 'reakit';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { AppContext } from './AppContext';\nimport { AppContextProvider, WithAppOptions, WithRouter } from './components';\nimport { createTheme } from './theme';\n\nconst theme = createTheme();\n\nconst Root = styled(Base)`\n  height: 100%;\n`;\n\ninterface Props {\n  readonly appContext: AppContext;\n  readonly children?: React.ReactNode;\n}\nexport const AppShell = ({ appContext, children }: Props) => (\n  <React.StrictMode>\n    <AppContextProvider value={appContext}>\n      <ThemeProvider theme={theme}>\n        <Root>\n          <WithAppOptions>\n            {(appOptions) => (\n              <WithRouter>\n                {({ location }) => {\n                  const { title } = appOptions.meta;\n                  const path = location.pathname.endsWith('/') ? location.pathname.slice(0, -1) : location.pathname;\n                  const canonicalURL = `${appOptions.url}${path}`;\n\n                  return (\n                    <>\n                      <Helmet titleTemplate={`%s - ${title}`} defaultTitle={title}>\n                        <html lang=\"en\" />\n                        <meta name=\"application-name\" content={appOptions.meta.name} />\n                        <meta name=\"description\" content={appOptions.meta.description} />\n                        <meta charSet=\"utf-8\" />\n                        <meta httpEquiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n                        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n                        <link rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\" />\n                        <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"/favicon-32x32.png\" />\n                        <link rel=\"icon\" type=\"image/png\" sizes=\"16x16\" href=\"/favicon-16x16.png\" />\n                        <link rel=\"manifest\" href=\"/manifest.json\" />\n                        <link rel=\"mask-icon\" href=\"/safari-pinned-tab.svg\" color={theme.primary} />\n                        <meta name=\"theme-color\" content={theme.secondary} />\n                        <link rel=\"canonical\" href={canonicalURL} />\n                        <script type=\"application/ld+json\">\n                          {`{\n                      \"@context\": \"http://schema.org\",\n                      \"@type\": \"WebSite\",\n                      \"name\": \"${appOptions.meta.name}\",\n                      \"url\": \"${canonicalURL}\"\n                    }`}\n                        </script>\n                      </Helmet>\n                      {children}\n                    </>\n                  );\n                }}\n              </WithRouter>\n            )}\n          </WithAppOptions>\n        </Root>\n      </ThemeProvider>\n    </AppContextProvider>\n  </React.StrictMode>\n);\n","export interface Theme {\n  readonly primary: string;\n  readonly secondary: string;\n}\n\nexport const createTheme = (): Theme => ({\n  primary: 'blue',\n  secondary: 'green',\n});\n","import { metrics } from '@neo-one/monitor';\n\n// Note: Remove disable once more metrics have been added\n// tslint:disable-next-line export-name\nexport const NEOTRACKER_SESSION = metrics.createCounter({\n  name: 'neotracker_session',\n});\n","import * as React from 'react';\nimport LoadableExport, { LoadableComponent } from 'react-loadable';\nimport { Route, RouteComponentProps, Switch } from 'react-router';\nimport { AppContext } from './AppContext';\nimport { AppShell } from './AppShell';\nimport * as metrics from './metrics';\nimport * as routes from './routes';\n\ninterface RouteConfig {\n  readonly exact: boolean;\n  readonly path?: string;\n  // tslint:disable-next-line no-any\n  readonly component: React.ComponentType<RouteComponentProps<any>> & LoadableComponent;\n}\nexport const ROUTE_CONFIGS: ReadonlyArray<RouteConfig> = [\n  {\n    exact: true,\n    path: routes.HOME,\n    component: LoadableExport({\n      // tslint:disable-next-line promise-function-async\n      loader: () => import('./pages/Home').then((value) => value.Home),\n      // tslint:disable-next-line no-null-keyword\n      loading: () => null,\n    }),\n  },\n  {\n    exact: false,\n    path: undefined,\n    component: LoadableExport({\n      // tslint:disable-next-line promise-function-async\n      loader: () => import('./pages/Error404').then((value) => value.Error404),\n      // tslint:disable-next-line no-null-keyword\n      loading: () => null,\n    }),\n  },\n];\n\nconst ROUTE_CONFIGS_WITH_RENDER = ROUTE_CONFIGS.map((config) => ({\n  ...config,\n  // tslint:disable-next-line no-any no-unnecessary-type-annotation\n  render: (props: RouteComponentProps<any>) => {\n    const { component: Component } = config;\n    if (props.staticContext !== undefined) {\n      if (config.exact) {\n        // tslint:disable-next-line no-object-mutation no-any\n        (props.staticContext as any).routePath = props.match.path;\n      } else {\n        // tslint:disable-next-line no-object-mutation no-any\n        (props.staticContext as any).missed = true;\n      }\n    }\n\n    return <Component {...props} />;\n  },\n}));\n\nexport interface ExternalProps {\n  readonly appContext: AppContext;\n}\n\nexport class App extends React.Component<ExternalProps> {\n  public render() {\n    return (\n      <AppShell appContext={this.props.appContext}>\n        <Switch>\n          {ROUTE_CONFIGS_WITH_RENDER.map((config) => (\n            <Route\n              key={config.path === undefined ? 'nopath' : config.path}\n              exact={config.exact}\n              path={config.path}\n              render={config.render}\n            />\n          ))}\n        </Switch>\n      </AppShell>\n    );\n  }\n\n  public componentDidMount() {\n    metrics.NEOTRACKER_SESSION.inc();\n  }\n}\n","export const ROOT = '/';\nexport const HOME = '/';\nexport const GRAPHQL = '/graphql-next';\nexport const CLIENT = '/client-next';\n","import * as routes from './routes';\n\nexport * from './App';\nexport * from './AppContext';\nexport * from './theme';\nexport * from './utils';\nexport { RouteQueryClass } from './pages/types';\n\nexport { routes };\n","import * as React from 'react';\nimport { Observable, Subscription } from 'rxjs';\n\n// tslint:disable-next-line no-null-keyword\nconst initialValue = Symbol.for('initialValue');\n\ninterface Props<T> {\n  /* Stream of props to render */\n  readonly props$: Observable<T>;\n  /* Render function */\n  readonly children: (props: T) => React.ReactNode;\n}\ninterface State<T> {\n  readonly value: T | typeof initialValue;\n}\n/**\n * Renders a stream of `Observable` data.\n *\n * The `props$` `Observable` is immediately subscribed on mount so the first render will include any data the observable immediately resolves with. This can be used to render a loading state in combination with `concat` and `of`. See example below.\n *\n * @example\n * import { concat, defer, of as _of } from 'rxjs';\n *\n * <FromStream\n *  props$={concat(\n *    _of(undefined),\n *    defer(async () => loadData()),\n *  )}\n * >\n *  {(data) => data === undefined\n *    ? <Loading />\n *    : <Component data={data} />}\n * </FromStream>\n */\nexport class FromStream<T> extends React.Component<Props<T>, State<T>> {\n  // tslint:disable-next-line readonly-keyword\n  public state: State<T>;\n  private mutableSubscription: Subscription | undefined;\n  private mutableMounted = false;\n\n  public constructor(props: Props<T>) {\n    super(props);\n\n    this.state = {\n      value: initialValue,\n    };\n    this.subscribe();\n    this.mutableMounted = true;\n  }\n\n  public componentWillUnmount(): void {\n    this.mutableMounted = false;\n    this.unsubscribe();\n  }\n\n  public componentDidUpdate(prevProps: Props<T>): void {\n    if (this.props.props$ !== prevProps.props$) {\n      this.subscribe();\n    }\n  }\n\n  public render(): React.ReactNode {\n    const { value } = this.state;\n    if (value === initialValue) {\n      // tslint:disable-next-line no-null-keyword\n      return null;\n    }\n\n    return this.props.children(value);\n  }\n\n  private subscribe(): void {\n    this.unsubscribe();\n    let stateSet = false;\n    this.mutableSubscription = this.props.props$.subscribe({\n      next: (value) => {\n        stateSet = true;\n        this._setValue(value);\n      },\n    });\n\n    if (!stateSet) {\n      this._setValue(initialValue);\n    }\n  }\n\n  private _setValue(value: T | typeof initialValue): void {\n    if (this.mutableMounted) {\n      this.setState(() => ({ value }));\n    } else {\n      // tslint:disable-next-line no-object-mutation\n      this.state = { value };\n    }\n  }\n\n  private unsubscribe(): void {\n    if (this.mutableSubscription !== undefined) {\n      this.mutableSubscription.unsubscribe();\n      this.mutableSubscription = undefined;\n    }\n  }\n}\n","import { metrics, Monitor } from '@neo-one/monitor';\nimport { labels } from '@neotracker/shared-utils';\nimport _ from 'lodash';\nimport stringify from 'safe-stable-stringify';\nimport { ExecutionResult } from './constants';\n\nconst GRAPHQL_EXECUTE_QUERIES_DURATION_SECONDS = metrics.createHistogram({\n  name: 'graphql_execute_queries_duration_seconds',\n});\n\nconst GRAPHQL_EXECUTE_QUERIES_FAILURES_TOTAL = metrics.createCounter({\n  name: 'graphql_execute_queries_failures_total',\n});\n\ninterface Query {\n  readonly id: string;\n  readonly variables: object;\n}\ninterface QueuedQuery {\n  readonly cacheKey: string;\n  readonly id: string;\n  readonly variables: object;\n  readonly resolve: ((result: ExecutionResult) => void);\n  readonly reject: ((error: Error) => void);\n  readonly monitor?: Monitor;\n}\ntype ExecuteQueries = ((queries: ReadonlyArray<Query>, monitor: Monitor) => Promise<ReadonlyArray<ExecutionResult>>);\n\n// tslint:disable-next-line no-let\nlet resolvedPromise: Promise<void> | undefined;\nexport class QueryDeduplicator {\n  private readonly executeQueries: ExecuteQueries;\n  // tslint:disable-next-line:readonly-keyword\n  private mutableInflight: { [key: string]: Promise<ExecutionResult> };\n  private mutableQueue: QueuedQuery[];\n  private readonly monitor: Monitor;\n\n  public constructor(executeQueries: ExecuteQueries, monitor: Monitor) {\n    this.executeQueries = executeQueries;\n    this.mutableInflight = {};\n    this.mutableQueue = [];\n    this.monitor = monitor;\n  }\n\n  public async execute({\n    id,\n    variables,\n    monitor,\n  }: {\n    readonly id: string;\n    readonly variables: object;\n    readonly monitor?: Monitor;\n  }): Promise<ExecutionResult> {\n    const cacheKey = stringify({ id, variables });\n    if ((this.mutableInflight[cacheKey] as Promise<ExecutionResult> | undefined) === undefined) {\n      this.mutableInflight[cacheKey] = this.enmutableQueueQuery(cacheKey, id, variables, monitor);\n    }\n\n    return this.mutableInflight[cacheKey];\n  }\n\n  private async enmutableQueueQuery(\n    cacheKey: string,\n    id: string,\n    variables: object,\n    monitor?: Monitor,\n  ): Promise<ExecutionResult> {\n    if (_.isEmpty(this.mutableInflight)) {\n      // tslint:disable-next-line strict-type-predicates\n      if (process !== undefined) {\n        if (resolvedPromise === undefined) {\n          resolvedPromise = Promise.resolve();\n        }\n        // tslint:disable-next-line no-floating-promises\n        resolvedPromise.then(() => process.nextTick(this.consumeQueue));\n      } else {\n        setTimeout(this.consumeQueue, 0);\n      }\n    }\n\n    // tslint:disable-next-line promise-must-complete\n    return new Promise<ExecutionResult>((resolve, reject) =>\n      this.mutableQueue.push({ cacheKey, id, variables, resolve, reject, monitor }),\n    );\n  }\n  private readonly consumeQueue = (): void => {\n    const mutableQueue = this.mutableQueue;\n    this.mutableQueue = [];\n    this.mutableInflight = {};\n    if (mutableQueue.length > 0) {\n      const { monitor = this.monitor } = mutableQueue[0];\n      monitor\n        .at('query_deduplicator')\n        .withData({\n          [labels.QUEUE_SIZE]: mutableQueue.length,\n        })\n        .captureSpanLog(\n          async (span) =>\n            this.executeQueries(mutableQueue.map((obj) => ({ id: obj.id, variables: obj.variables })), span),\n          {\n            name: 'graphql_execute_queries',\n            references: mutableQueue.slice(1).map((value) => monitor.childOf(value.monitor)),\n            level: { log: 'verbose', span: 'info' },\n            metric: {\n              total: GRAPHQL_EXECUTE_QUERIES_DURATION_SECONDS,\n              error: GRAPHQL_EXECUTE_QUERIES_FAILURES_TOTAL,\n            },\n\n            trace: true,\n          },\n        )\n        .then((results) => {\n          results.forEach((result, idx) => mutableQueue[idx].resolve(result));\n        })\n        .catch((error) => {\n          mutableQueue.forEach(({ reject }) => reject(error));\n        });\n    }\n  };\n}\n","// tslint:disable no-import-side-effect ordered-imports\nimport '@babel/polyfill';\nimport { collectingMetrics, metrics } from '@neo-one/monitor';\n\nmetrics.setFactory(collectingMetrics);\n","// tslint:disable\nimport { Labels } from '@neo-one/monitor';\nimport { labels } from './labels';\n\nconst getVersionPrecision = (version: string) => version.split('.').length;\n\nconst getChunk = (version: string, precision: number) => {\n  const delta = precision - getVersionPrecision(version);\n\n  // 2) \"9\" -> \"9.0\" (for precision = 2)\n  const newVersion = version + new Array(delta + 1).join('.0');\n\n  // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n  return newVersion\n    .split('.')\n    .map((chunk) => new Array(20 - chunk.length).join('0') + chunk)\n    .reverse();\n};\n\nconst compareVersions = (a: string, b: string) => {\n  // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n  let precision = Math.max(getVersionPrecision(a), getVersionPrecision(b));\n  const chunkA = getChunk(a, precision);\n  const chunkB = getChunk(b, precision);\n  // iterate in reverse order by reversed chunks array\n  // eslint-disable-next-line\n  while (--precision >= 0) {\n    // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n    if (chunkA[precision] > chunkB[precision]) {\n      return 1;\n    } else if (chunkA[precision] < chunkB[precision]) {\n      return -1;\n    }\n  }\n\n  return 0;\n};\n\n// TODO: Test me\ntype Comparison = '>' | '>=' | '=' | '<=' | '<';\nconst checkVersion = (versionA: string, comparison: Comparison, versionB: string) => {\n  const result = compareVersions(versionA, versionB);\n  switch (comparison) {\n    case '>':\n      return result > 0;\n    case '<':\n      return result < 0;\n    case '>=':\n      return result >= 0;\n    case '<=':\n      return result <= 0;\n    case '=':\n      return result === 0;\n    // Should never hit this case\n    default:\n      return false;\n  }\n};\n\nconst convertLabels = (ua: IUAParser.IResult): Labels => ({\n  [labels.UA]: ua.ua,\n  [labels.UA_BROWSER_NAME]: ua.browser.name,\n  [labels.UA_BROWSER_VERSION]: ua.browser.version,\n  [labels.UA_DEVICE_MODEL]: ua.device.model,\n  [labels.UA_DEVICE_TYPE]: ua.device.type,\n  [labels.UA_DEVICE_VENDOR]: ua.device.vendor,\n  [labels.UA_ENGINE_NAME]: ua.engine.name,\n  [labels.UA_ENGINE_VERSION]: ua.engine.version,\n  [labels.UA_OS_NAME]: ua.os.name,\n  [labels.UA_OS_VERSION]: ua.os.version,\n  [labels.UA_CPU_ARCHITECTURE]: ua.cpu.architecture,\n});\n\nexport const ua = {\n  checkVersion,\n  convertLabels,\n};\n","export class BaseError extends Error {\n  public readonly originalError: Error | undefined | void;\n\n  public constructor(message: string, originalError?: Error | undefined) {\n    super(message);\n    this.message = message;\n    this.originalError = originalError;\n\n    // tslint:disable-next-line no-any\n    (this as any).__proto__ = BaseError.prototype;\n  }\n}\n","import { BaseError } from './BaseError';\n\nconst CLIENT_ERROR_PREFIX = 'CLIENT:';\n\nexport const SOMETHING_WENT_WRONG = 'Something went wrong. Try refreshing the page or going back to where you were.';\nexport const NETWORK_ERROR = 'Network failure. Try refreshing the page.';\nexport const COPY_UNSUPPORTED_BROWSER = 'Copying to clipboard is not supported in your browser.';\n\nconst STATUS_CODE_TO_MESSAGE: { [K in string]?: string } = {\n  '503': 'Server is under heavy load. Please try again later.',\n};\n\nexport class ClientError extends BaseError {\n  public static extractClientErrorMessage(message: string): string | undefined {\n    if (message.startsWith(CLIENT_ERROR_PREFIX)) {\n      return message.substr(CLIENT_ERROR_PREFIX.length);\n    }\n\n    return undefined;\n  }\n\n  public static getClientError(error: Error): ClientError | undefined {\n    const message = this.extractClientErrorMessage(error.message);\n    if (message !== undefined) {\n      return new ClientError(message, error);\n    }\n\n    return undefined;\n  }\n\n  public static getMessageForStatusCode(statusCode: number): string {\n    const message = STATUS_CODE_TO_MESSAGE[`${statusCode}`];\n\n    return message === undefined ? SOMETHING_WENT_WRONG : message;\n  }\n\n  public static async getFromResponse(response: Response): Promise<ClientError> {\n    let originalMessage;\n    let message;\n    let error = new Error(`HTTP Error ${response.status}`);\n    try {\n      originalMessage = await response.text();\n      message = this.extractClientErrorMessage(originalMessage);\n      error = new Error(`HTTP Error ${response.status}: ${originalMessage}`);\n    } catch {\n      // Do nothing\n    }\n\n    return new ClientError(message === undefined ? this.getMessageForStatusCode(response.status) : message, error);\n  }\n\n  public static getFromNetworkError(error: Error): ClientError {\n    return new ClientError(NETWORK_ERROR, error);\n  }\n\n  public readonly clientMessage: string;\n\n  public constructor(message: string, originalError?: Error | undefined) {\n    super(`${CLIENT_ERROR_PREFIX}${message}`, originalError);\n    this.clientMessage = message;\n  }\n}\n","import { Monitor } from '@neo-one/monitor';\nimport { QueryDeduplicator } from '@neotracker/shared-graphql';\nimport { ClientError } from '@neotracker/shared-utils';\nimport fetch from 'cross-fetch';\n\nexport const createQueryDeduplicator = ({\n  endpoint,\n  monitor: monitorOuter,\n}: {\n  readonly endpoint: string;\n  readonly monitor: Monitor;\n}) =>\n  new QueryDeduplicator(async (queries, monitor) => {\n    const body = JSON.stringify(queries);\n\n    return monitor\n      .withLabels({\n        [monitor.labels.SPAN_KIND]: 'client',\n        [monitor.labels.HTTP_METHOD]: 'POST',\n        [monitor.labels.PEER_SERVICE]: 'graphql',\n        [monitor.labels.HTTP_PATH]: endpoint,\n      })\n      .captureSpan(\n        async (span) => {\n          const headers = {\n            'Content-Type': 'application/json',\n          };\n\n          // tslint:disable-next-line no-any\n          span.inject(span.formats.HTTP, headers as any);\n\n          return fetch(endpoint, {\n            method: 'POST',\n            body,\n            headers,\n            credentials: 'same-origin',\n          }).then(\n            async (response) => {\n              span.setLabels({\n                [span.labels.HTTP_STATUS_CODE]: response.status,\n              });\n\n              if (response.ok) {\n                return response.json();\n              }\n              const error = await ClientError.getFromResponse(response);\n              span.logError({\n                name: 'graphql_client_fetch_error',\n                error,\n              });\n\n              throw error;\n            },\n            (error) => {\n              span.setLabels({\n                [span.labels.HTTP_STATUS_CODE]: -1,\n              });\n\n              span.logError({\n                name: 'graphql_client_fetch_error',\n                error,\n              });\n\n              throw ClientError.getFromNetworkError(error);\n            },\n          );\n        },\n        { name: 'graphql_client_fetch' },\n      );\n  }, monitorOuter);\n","import _ from 'lodash';\n\nconst nowSeconds = (): number => Math.round(Date.now() / 1000);\n\nfunction nullthrows<T>(value: T | null | undefined): T {\n  if (value == undefined) {\n    throw new Error('Unexpected null');\n  }\n\n  return value;\n}\n\nfunction assertNever(_value: never): void {\n  // do nothing\n}\n\n// tslint:disable-next-line no-any\nfunction isPromise(value: any): value is Promise<{}> {\n  return value != undefined && value.then != undefined && typeof value.then === 'function';\n}\n\nfunction notNull<T>(value: T | null | undefined): value is T {\n  return value != undefined;\n}\n\n// tslint:disable readonly-array\nfunction zip<T1, T2>(a: ArrayLike<T1>, b: ArrayLike<T2>): Array<[T1, T2]>;\nfunction zip<T1, T2, T3>(a: ArrayLike<T1>, b: ArrayLike<T2>, c: ArrayLike<T3>): Array<[T1, T2, T3]>;\nfunction zip<T>(...arrays: Array<ArrayLike<T> | null | undefined>): T[][] {\n  // tslint:disable-next-line no-any\n  return _.zip(...arrays) as any;\n}\n// tslint:enable readonly-array\n\nexport const utils = {\n  nowSeconds,\n  nullthrows,\n  assertNever,\n  notNull,\n  isPromise,\n  zip,\n};\n","import { utils } from '@neotracker/shared-utils';\n\nexport interface ExecutionResult {\n  readonly data?: {} | undefined;\n  readonly errors?: ReadonlyArray<{ readonly message: string }>;\n}\n\nexport const GRAPHQL_WS = 'graphql-ws';\nexport type ServerMessage =\n  | {\n      readonly type: 'GQL_INVALID_MESSAGE_ERROR';\n      readonly message: string;\n    }\n  | {\n      readonly type: 'GQL_SEND_ERROR';\n      readonly message: string;\n    }\n  | {\n      readonly type: 'GQL_SOCKET_ERROR';\n      readonly message: string;\n    }\n  | {\n      readonly type: 'GQL_CONNECTION_ACK';\n    }\n  | {\n      readonly type: 'GQL_QUERY_MAP_ERROR';\n      readonly message: string;\n      readonly id: string;\n    }\n  | {\n      readonly type: 'GQL_SUBSCRIBE_ERROR';\n      readonly message: string;\n      readonly id: string;\n    }\n  | {\n      readonly type: 'GQL_DATA';\n      readonly id: string;\n      readonly value: ExecutionResult;\n    }\n  | {\n      readonly type: 'GQL_DATA_ERROR';\n      readonly id: string;\n      readonly message: string;\n    };\n\nconst SERVER_MESSAGE_TYPES: ReadonlyArray<string> = [\n  'GQL_INVALID_MESSAGE_ERROR',\n  'GQL_SEND_ERROR',\n  'GQL_SOCKET_ERROR',\n  'GQL_CONNECTION_ACK',\n  'GQL_QUERY_MAP_ERROR',\n  'GQL_SUBSCRIBE_ERROR',\n  'GQL_DATA',\n  'GQL_DATA_ERROR',\n];\n\nexport const parseAndValidateServerMessage = (messageJSON: string): ServerMessage => {\n  const message = JSON.parse(messageJSON);\n  if (typeof message !== 'object' || typeof message.type !== 'string') {\n    throw new Error('Invalid message format.');\n  }\n\n  if (!SERVER_MESSAGE_TYPES.includes(message.type)) {\n    throw new Error(`Unknown message type: ${message.type}`);\n  }\n\n  let valid;\n  const type = message.type as ServerMessage['type'];\n  switch (type) {\n    case 'GQL_INVALID_MESSAGE_ERROR':\n      valid = typeof message.message === 'string';\n      break;\n    case 'GQL_SEND_ERROR':\n      valid = typeof message.message === 'string';\n      break;\n    case 'GQL_SOCKET_ERROR':\n      valid = typeof message.message === 'string';\n      break;\n    case 'GQL_CONNECTION_ACK':\n      valid = true;\n      break;\n    case 'GQL_QUERY_MAP_ERROR':\n      valid = typeof message.message === 'string' && typeof message.id === 'string';\n      break;\n    case 'GQL_SUBSCRIBE_ERROR':\n      valid = typeof message.id === 'string' && typeof message.message === 'string';\n      break;\n    case 'GQL_DATA':\n      valid =\n        typeof message.id === 'string' &&\n        typeof message.value === 'object' &&\n        (message.value.data == undefined || typeof message.value.data === 'object') &&\n        (message.value.errors == undefined ||\n          (Array.isArray(message.value.errors) &&\n            message.value.errors.every(\n              // tslint:disable-next-line no-any\n              (error: any) => typeof error === 'object' && typeof error.message === 'string',\n            )));\n\n      break;\n    case 'GQL_DATA_ERROR':\n      valid = typeof message.id === 'string' && typeof message.message === 'string';\n      break;\n    default:\n      utils.assertNever(type);\n      valid = false;\n  }\n\n  if (!valid) {\n    throw new Error('Invalid message format.');\n  }\n\n  return message;\n};\nexport interface ClientStartMessage {\n  readonly type: 'GQL_START';\n  readonly id: string;\n  readonly query: {\n    readonly id: string;\n    readonly variables: object;\n  };\n  // tslint:disable-next-line no-any\n  readonly span: any;\n}\nexport type ClientMessage =\n  | {\n      readonly type: 'GQL_CONNECTION_INIT';\n    }\n  | {\n      readonly type: 'GQL_CONNECTION_TERMINATE';\n    }\n  | ClientStartMessage\n  | {\n      readonly type: 'GQL_STOP';\n      readonly id: string;\n    };\n\nconst CLIENT_MESSAGE_TYPES: ReadonlyArray<string> = [\n  'GQL_CONNECTION_INIT',\n  'GQL_CONNECTION_TERMINATE',\n  'GQL_START',\n  'GQL_STOP',\n];\n\nexport const parseAndValidateClientMessage = (messageJSON: string): ClientMessage => {\n  const message = JSON.parse(messageJSON);\n  if (typeof message !== 'object' || typeof message.type !== 'string') {\n    throw new Error('Invalid message format.');\n  }\n\n  if (!CLIENT_MESSAGE_TYPES.includes(message.type)) {\n    throw new Error(`Unknown message type: ${message.type}`);\n  }\n\n  let valid;\n  const type = message.type as ClientMessage['type'];\n  switch (type) {\n    case 'GQL_CONNECTION_INIT':\n      valid = true;\n      break;\n    case 'GQL_CONNECTION_TERMINATE':\n      valid = true;\n      break;\n    case 'GQL_START':\n      valid =\n        typeof message.id === 'string' &&\n        typeof message.query === 'object' &&\n        typeof message.query.id === 'string' &&\n        typeof message.query.variables === 'object';\n      break;\n    case 'GQL_STOP':\n      valid = typeof message.id === 'string';\n      break;\n    default:\n      utils.assertNever(type);\n      valid = false;\n  }\n\n  if (!valid) {\n    throw new Error(`Invalid message format for type ${type}.`);\n  }\n\n  return message;\n};\n","import { ClientError, SOMETHING_WENT_WRONG } from './ClientError';\n\nexport const sanitizeErrorNullable = (error: Error): ClientError | undefined => {\n  if (error instanceof ClientError) {\n    return error;\n  }\n\n  const clientError = ClientError.getClientError(error);\n  if (clientError !== undefined) {\n    return clientError;\n  }\n\n  return undefined;\n};\n\nexport const sanitizeError = (error: Error): ClientError => {\n  const sanitizedError = sanitizeErrorNullable(error);\n\n  return sanitizedError === undefined ? new ClientError(SOMETHING_WENT_WRONG) : sanitizedError;\n};\n","import { Carrier, metrics, Monitor, Span } from '@neo-one/monitor';\nimport { ClientMessage, ExecutionResult, GRAPHQL_WS, parseAndValidateServerMessage } from '@neotracker/shared-graphql';\nimport { labels, sanitizeError, utils } from '@neotracker/shared-utils';\nimport Backoff from 'backo2';\nimport _ from 'lodash';\nimport { Observable, Observer } from 'rxjs';\n\ninterface Request {\n  readonly id: string;\n  // tslint:disable-next-line no-any\n  readonly variables: any;\n}\n\ninterface OperationOptions {\n  readonly id: string;\n  // tslint:disable-next-line no-any\n  readonly variables: any;\n  readonly observer: Observer<ExecutionResult>;\n}\n\ninterface Operation extends OperationOptions {\n  readonly started: boolean;\n  readonly span?: Span;\n}\n\nconst WEBSOCKET_CLIENT_FIRST_RESPONSE_DURATION_SECONDS = metrics.createHistogram({\n  name: 'graphql_client_first_response_duration_seconds',\n  labelNames: [labels.GRAPHQL_QUERY],\n});\n\nconst WEBSOCKET_CLIENT_FIRST_RESPONSE_FAILURES_TOTAL = metrics.createCounter({\n  name: 'graphql_client_first_response_failures_total',\n  labelNames: [labels.GRAPHQL_QUERY],\n});\n\nexport class LiveClient {\n  public readonly endpoint: string;\n  public readonly monitor: Monitor;\n  // tslint:disable-next-line readonly-keyword\n  public mutableOperations: { [id: string]: Operation };\n  public mutableNextOperationID: number;\n  public readonly wsImpl: typeof WebSocket;\n  public mutableClient: WebSocket | undefined;\n  public mutableClosedByUser: boolean;\n  public mutableTryReconnectTimeoutID: NodeJS.Timer | undefined;\n  public mutableReconnecting: boolean;\n  public readonly backoff: Backoff;\n  public mutableActiveListener: (() => void) | undefined;\n  public mutableInactiveListener: (() => void) | undefined;\n\n  public constructor({ endpoint, monitor }: { readonly endpoint: string; readonly monitor: Monitor }) {\n    this.endpoint = endpoint;\n    this.monitor = monitor\n      .at('live_client')\n      .withLabels({\n        [monitor.labels.SPAN_KIND]: 'client',\n        [monitor.labels.PEER_SERVICE]: 'graphql',\n      })\n      .withData({\n        [labels.WEBSOCKET_URL]: endpoint,\n      });\n\n    this.mutableOperations = {};\n    this.mutableNextOperationID = 0;\n    this.mutableClosedByUser = false;\n    this.mutableReconnecting = false;\n    this.backoff = new Backoff({ jitter: 0.5 });\n    // @ts-ignore\n    this.wsImpl = window.WebSocket || window.MozWebSocket;\n    // tslint:disable-next-line strict-type-predicates\n    if (this.wsImpl == undefined) {\n      throw new Error('SubscriptionClient requires Websocket support.');\n    }\n  }\n\n  public connect() {\n    this.mutableClosedByUser = false;\n    if (this.mutableClient !== undefined) {\n      return;\n    }\n\n    let mutableClient;\n    try {\n      mutableClient = this.monitor.captureLog(() => new this.wsImpl(this.endpoint, [GRAPHQL_WS]), {\n        name: 'websocket_client_create_websocket',\n        error: {},\n      });\n    } catch {\n      if (!this.mutableClosedByUser) {\n        this.tryReconnect();\n      }\n\n      return;\n    }\n    this.mutableClient = mutableClient;\n\n    mutableClient.onopen = () => {\n      this.monitor.log({ name: 'websocket_client_socket_open' });\n\n      this.sendMessage({ type: 'GQL_CONNECTION_INIT' });\n      Object.keys(this.mutableOperations).forEach((id) => this.start(id));\n    };\n\n    mutableClient.onclose = (event) => {\n      this.monitor\n        .withLabels({\n          [labels.WEBSOCKET_CLOSE_CODE]: event.code,\n          [labels.WEBSOCKET_CLOSE_REASON]: event.reason,\n        })\n        .log({ name: 'websocket_client_socket_closed' });\n      this.mutableOperations = _.mapValues(this.mutableOperations, (operation) => ({\n        id: operation.id,\n        variables: operation.variables,\n        observer: operation.observer,\n        started: false,\n      }));\n\n      this.mutableClient = undefined;\n      if (!this.mutableClosedByUser) {\n        this.tryReconnect();\n      }\n    };\n\n    mutableClient.onerror = () => {\n      this.monitor.log({ name: 'websocket_client_socket_error' });\n    };\n\n    // tslint:disable-next-line no-any\n    mutableClient.onmessage = ({ data }: { data: any }) => {\n      this.processReceivedData(data);\n    };\n  }\n\n  public close({\n    code,\n    reason,\n    mutableClosedByUser: mutableClosedByUserIn,\n  }: {\n    readonly code?: number;\n    readonly reason?: string;\n    readonly mutableClosedByUser?: boolean;\n  }): void {\n    // eslint-disable-next-line\n    const client = this.mutableClient;\n    if (client !== undefined) {\n      this.mutableClosedByUser = mutableClosedByUserIn === undefined ? true : mutableClosedByUserIn;\n\n      this.clearTryReconnectTimeout();\n      this.sendMessage({\n        type: 'GQL_CONNECTION_TERMINATE',\n      });\n\n      client.close(code, reason);\n      this.mutableClient = undefined;\n    }\n  }\n\n  public tryReconnect() {\n    this.monitor.log({ name: 'websocket_client_socket_reconnect' });\n    this.mutableReconnecting = true;\n    this.clearTryReconnectTimeout();\n    this.mutableTryReconnectTimeoutID = setTimeout(() => {\n      if (Object.keys(this.mutableOperations).length > 0) {\n        this.connect();\n      }\n    }, this.backoff.duration());\n  }\n\n  public clearTryReconnectTimeout() {\n    if (this.mutableTryReconnectTimeoutID) {\n      clearTimeout(this.mutableTryReconnectTimeoutID);\n      this.mutableTryReconnectTimeoutID = undefined;\n    }\n  }\n\n  public get status(): number {\n    if (this.mutableClient === undefined) {\n      return this.wsImpl.CLOSED;\n    }\n\n    return this.mutableClient.readyState;\n  }\n\n  public request$(request: Request, monitor: Monitor): Observable<ExecutionResult> {\n    this.connect();\n\n    return Observable.create((observer: Observer<ExecutionResult>) => {\n      let id: string | undefined = this.executeOperation(\n        {\n          id: request.id,\n          variables: request.variables,\n          observer,\n        },\n        monitor,\n      );\n\n      return {\n        unsubscribe: () => {\n          if (id !== undefined) {\n            this.unsubscribe(id);\n            id = undefined;\n          }\n        },\n      };\n    });\n  }\n\n  public readonly executeOperation = (operation: OperationOptions, monitor: Monitor): string => {\n    const id = this.generateOperationID();\n    this.mutableOperations[id] = {\n      id: operation.id,\n      variables: operation.variables,\n      observer: operation.observer,\n      started: false,\n    };\n\n    this.start(id, monitor);\n\n    return id;\n  };\n\n  public start(id: string, monitor: Monitor = this.monitor): void {\n    const operation = this.mutableOperations[id] as Operation | undefined;\n    if (operation !== undefined && this.status === this.wsImpl.OPEN) {\n      const span = monitor\n        .withLabels({\n          [labels.GRAPHQL_QUERY]: operation.id,\n        })\n        .withData({\n          [labels.GRAPHQL_VARIABLES]: JSON.stringify(operation.variables),\n        })\n        .startSpan({\n          name: 'graphql_client_first_response',\n          metric: {\n            total: WEBSOCKET_CLIENT_FIRST_RESPONSE_DURATION_SECONDS,\n            error: WEBSOCKET_CLIENT_FIRST_RESPONSE_FAILURES_TOTAL,\n          },\n        });\n\n      this.mutableOperations[id] = {\n        id: operation.id,\n        variables: operation.variables,\n        observer: operation.observer,\n        started: true,\n        span,\n      };\n\n      // tslint:disable-next-line no-object-literal-type-assertion\n      const headers = {} as Carrier;\n      span.inject(span.formats.HTTP, headers);\n      this.sendMessage(\n        {\n          type: 'GQL_START',\n          id,\n          query: {\n            id: operation.id,\n            variables: operation.variables,\n          },\n\n          span: headers,\n        },\n\n        operation.observer,\n        false,\n        span,\n      );\n    }\n  }\n\n  public generateOperationID(): string {\n    const next = String(this.mutableNextOperationID);\n    this.mutableNextOperationID += 1;\n\n    return next;\n  }\n\n  public unsubscribe(id: string): void {\n    const operation = this.mutableOperations[id] as Operation | undefined;\n    if (operation !== undefined) {\n      if (operation.started) {\n        this.sendMessage({\n          type: 'GQL_STOP',\n          id,\n        });\n      }\n      // tslint:disable-next-line no-dynamic-delete\n      delete this.mutableOperations[id];\n    }\n  }\n\n  public unsubscribeAll(): void {\n    Object.keys(this.mutableOperations).forEach((id) => {\n      this.unsubscribe(id);\n    });\n  }\n\n  public sendMessage(\n    message: ClientMessage,\n    observer?: Observer<ExecutionResult>,\n    isRetry?: boolean,\n    monitor: Monitor = this.monitor,\n  ): void {\n    // eslint-disable-next-line\n    const client = this.mutableClient;\n    if (client !== undefined && client.readyState === this.wsImpl.OPEN) {\n      try {\n        monitor\n          .withLabels({\n            [labels.WEBSOCKET_MESSAGE_TYPE]: message.type,\n          })\n          .captureLog(() => client.send(JSON.stringify(message)), {\n            name: 'websocket_client_socket_send',\n            error: {},\n            level: 'verbose',\n          });\n      } catch (error) {\n        if (isRetry) {\n          if (observer !== undefined) {\n            this.reportError(observer, error);\n          }\n        } else {\n          this.sendMessage(message, observer, true, monitor);\n        }\n      }\n    }\n  }\n\n  // tslint:disable-next-line no-any\n  public processReceivedData(messageJSON: any) {\n    let message;\n    try {\n      message = parseAndValidateServerMessage(messageJSON);\n    } catch (error) {\n      this.monitor\n        .withData({\n          [labels.WEBSOCKET_MESSAGEJSON]: messageJSON,\n        })\n        .logError({\n          name: 'websocket_client_server_message_parse_error',\n          error,\n        });\n\n      return;\n    }\n\n    this.monitor\n      .withLabels({\n        [labels.WEBSOCKET_MESSAGE_TYPE]: message.type,\n      })\n      .log({\n        name: 'websocket_client_message_received',\n        level: 'verbose',\n      });\n\n    const handleError = (id: string, msg: string, del?: boolean) => {\n      const operation = this.mutableOperations[id] as Operation | undefined;\n      if (operation !== undefined) {\n        if (operation.span !== undefined) {\n          operation.span.end(true);\n          this.mutableOperations[id] = {\n            id: operation.id,\n            variables: operation.variables,\n            observer: operation.observer,\n            started: operation.started,\n          };\n        }\n        this.reportError(this.mutableOperations[id].observer, new Error(msg));\n        if (del) {\n          // tslint:disable-next-line no-dynamic-delete\n          delete this.mutableOperations[id];\n        }\n      }\n    };\n\n    switch (message.type) {\n      case 'GQL_INVALID_MESSAGE_ERROR':\n        break;\n      case 'GQL_SEND_ERROR':\n        break;\n      case 'GQL_SOCKET_ERROR':\n        break;\n      case 'GQL_CONNECTION_ACK':\n        this.mutableReconnecting = false;\n        this.backoff.reset();\n        break;\n      case 'GQL_QUERY_MAP_ERROR':\n        handleError(message.id, message.message);\n        break;\n      case 'GQL_DATA':\n        if ((this.mutableOperations[message.id] as Operation | undefined) !== undefined) {\n          const operation = this.mutableOperations[message.id];\n          if (operation.span !== undefined) {\n            operation.span.end();\n            this.mutableOperations[message.id] = {\n              id: operation.id,\n              variables: operation.variables,\n              observer: operation.observer,\n              started: operation.started,\n            };\n          }\n          operation.observer.next(message.value);\n        }\n        break;\n      case 'GQL_DATA_ERROR':\n        handleError(message.id, message.message);\n        break;\n      case 'GQL_SUBSCRIBE_ERROR':\n        handleError(message.id, message.message);\n        break;\n      default:\n        utils.assertNever(message);\n        throw new Error('Invalid message type!');\n    }\n  }\n\n  private reportError(observer: Observer<ExecutionResult>, error: Error): void {\n    observer.next({\n      errors: [{ message: sanitizeError(error).clientMessage }],\n    });\n  }\n}\n","import { Monitor } from '@neo-one/monitor';\nimport { QueryDeduplicator } from '@neotracker/shared-graphql';\nimport { ApolloLink, FetchResult, Observable, Operation } from 'apollo-link';\nimport { defer, interval } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { createQueryDeduplicator } from './createQueryDeduplicator';\nimport { LiveClient } from './LiveClient';\n\nconst POLLING_TIME_MS = 15000;\n\nconst HTTPS = 'https';\nconst WSS = 'wss';\nconst HTTP = 'http';\nconst WS = 'ws';\nconst getWebsocketEndpoint = (endpoint: string) => {\n  if (endpoint.startsWith(HTTPS)) {\n    return `${WSS}${endpoint.slice(HTTPS.length)}`;\n  }\n\n  if (endpoint.startsWith(HTTP)) {\n    return `${WS}${endpoint.slice(HTTP.length)}`;\n  }\n\n  const { location } = window;\n  const proto = location.protocol === `${HTTPS}:` ? WSS : WS;\n\n  return `${proto}://${location.host}${endpoint}`;\n};\n\nexport class LiveLink extends ApolloLink {\n  private readonly liveClient: LiveClient | undefined;\n  private readonly queryDeduplicator: QueryDeduplicator;\n\n  public constructor({ endpoint, monitor: monitorIn }: { readonly endpoint: string; readonly monitor: Monitor }) {\n    const monitor = monitorIn.at('graphql_live_link');\n    super();\n    try {\n      this.liveClient = new LiveClient({\n        endpoint: getWebsocketEndpoint(endpoint),\n        monitor,\n      });\n    } catch (error) {\n      monitor.logError({ name: 'graphql_create_live_client_error', error });\n    }\n\n    this.queryDeduplicator = createQueryDeduplicator({ endpoint, monitor });\n  }\n\n  // tslint:disable-next-line rxjs-finnish\n  public request(operation: Operation): Observable<FetchResult> {\n    const definition = operation.query.definitions.find((def) => def.kind === 'OperationDefinition');\n    if (definition === undefined || definition.kind !== 'OperationDefinition') {\n      throw new Error('Expected one operation');\n    }\n\n    const { variables } = operation;\n    // tslint:disable-next-line no-any\n    const id: string = (operation.query as any).id;\n    const { monitor } = operation.getContext();\n    if (definition.operation === 'mutation') {\n      return new Observable((subscriber) =>\n        // tslint:disable-next-line no-any\n        defer(async () => this.queryDeduplicator.execute({ id, variables, monitor })).subscribe(subscriber as any),\n      );\n    }\n\n    const result$ =\n      this.liveClient === undefined\n        ? interval(POLLING_TIME_MS).pipe(\n            switchMap(async () => this.queryDeduplicator.execute({ id, variables, monitor })),\n          )\n        : this.liveClient.request$({ id, variables }, monitor);\n\n    // tslint:disable-next-line no-any\n    return new Observable((subscriber) => result$.subscribe(subscriber as any));\n  }\n}\n","import {\n  Client,\n  LocalKeyStore,\n  LocalMemoryStore,\n  LocalStringStore,\n  LocalUserAccountProvider,\n  NEOONEDataProvider,\n  NEOONEProvider,\n  NetworkType,\n  ReadClient,\n} from '@neo-one/client';\nimport { Monitor } from '@neo-one/monitor';\nimport { AppOptions } from '@neotracker/shared-utils';\nimport { AppContext, observeQuery } from '@neotracker/shared-web-next';\nimport ApolloClient from 'apollo-client';\nimport FileSaver from 'file-saver';\nimport gql from 'graphql-tag';\nimport localforage from 'localforage';\nimport { concat, of as _of } from 'rxjs';\nimport { distinctUntilChanged, filter, map, publishReplay, refCount } from 'rxjs/operators';\nimport { createAppContextAppOptionsQuery } from './__generated__/createAppContextAppOptionsQuery';\n\nexport const createAppContext = ({\n  apollo,\n  network,\n  css,\n  nonce,\n  options,\n  monitor,\n  userAgent,\n}: {\n  // tslint:disable-next-line no-any\n  readonly apollo: ApolloClient<any>;\n  readonly network: NetworkType;\n  readonly css: ReadonlyArray<string>;\n  readonly nonce: string | undefined;\n  readonly options: AppOptions;\n  readonly monitor: Monitor;\n  readonly userAgent: IUAParser.IResult;\n}): AppContext => {\n  const options$ = concat(\n    _of(options),\n    observeQuery<createAppContextAppOptionsQuery>({\n      monitor,\n      apollo,\n      query: gql`\n        query createAppContextAppOptionsQuery {\n          app_options\n        }\n      `,\n    }).pipe(\n      map(\n        (result): AppOptions | undefined =>\n          result.type === 'resolved' ? JSON.parse(result.data.app_options) : undefined,\n      ),\n      filter((value): value is AppOptions => value !== undefined),\n    ),\n  ).pipe(\n    distinctUntilChanged(),\n    publishReplay(1),\n    refCount(),\n  );\n\n  const provider = new NEOONEProvider([{ network, rpcURL: options.rpcURL }]);\n\n  const storage = localforage.createInstance({\n    name: 'neotracker',\n    storeName: 'neotracker',\n    version: 1.0,\n    description: 'NEO Tracker browser storage',\n  });\n\n  const client = new Client({\n    memory: new LocalUserAccountProvider({\n      keystore: new LocalKeyStore({\n        store: new LocalMemoryStore(),\n      }),\n      provider,\n    }),\n    localStorage: new LocalUserAccountProvider({\n      keystore: new LocalKeyStore({\n        store: new LocalStringStore({\n          type: 'localStorage',\n          storage: {\n            setItem: async (key, value) => {\n              await storage.setItem(key, value);\n            },\n            // tslint:disable-next-line no-unnecessary-type-assertion no-useless-cast\n            getItem: async (key) => storage.getItem(key) as Promise<string>,\n            removeItem: async (key) => {\n              await storage.removeItem(key);\n            },\n            getAllKeys: async () => storage.keys(),\n          },\n        }),\n      }),\n\n      provider,\n    }),\n  });\n\n  const dataProvider = new NEOONEDataProvider({\n    network,\n    rpcURL: options.rpcURL,\n  });\n  const readClient = new ReadClient(dataProvider);\n\n  // tslint:disable-next-line no-any\n  const mutableWindow: any = window;\n  const setApolloClient = (appOptions: AppOptions) => {\n    if (appOptions.debug) {\n      mutableWindow.__APOLLO_CLIENT__ = apollo;\n    } else {\n      delete mutableWindow.__APOLLO_CLIENT__;\n    }\n  };\n\n  setApolloClient(options);\n\n  options$.subscribe({\n    next: (nextOptions) => {\n      setApolloClient(nextOptions);\n      provider.addNetwork({ network, rpcURL: nextOptions.rpcURL });\n      dataProvider.setRPCURL(nextOptions.rpcURL);\n    },\n  });\n\n  return {\n    apollo,\n    network,\n    css,\n    nonce,\n    options$,\n    monitor,\n    client,\n    readClient,\n    userAgent,\n    fileSaver: FileSaver,\n  };\n};\n","import { App, AppContext } from '@neotracker/shared-web-next';\nimport * as React from 'react';\nimport { hydrate } from 'react-dom';\nimport LoadableExport from 'react-loadable';\nimport { BrowserRouter } from 'react-router-dom';\n\n// tslint:disable-next-line no-let no-any\nlet container: any;\n// tslint:disable-next-line no-any\nexport function renderApp(appContext: AppContext, theApp?: any): void {\n  // tslint:disable-next-line variable-name\n  const AppComponent = theApp === undefined ? App : theApp;\n  const app = (\n    <BrowserRouter>\n      <AppComponent appContext={appContext} />\n    </BrowserRouter>\n  );\n\n  if (container == undefined) {\n    container = document.getElementById('app');\n  }\n\n  if (container != undefined) {\n    LoadableExport.preloadReady()\n      .then(() => {\n        hydrate(app, container);\n      })\n      .catch(() => {\n        hydrate(app, container);\n      });\n  }\n}\n","import { Monitor } from '@neo-one/monitor';\nimport { labels, ua } from '@neotracker/shared-utils';\nimport { routes } from '@neotracker/shared-web-next';\nimport { createApolloClient } from './createApolloClient';\nimport { createAppContext } from './createAppContext';\nimport { renderApp } from './renderApp';\n\nexport const render = ({ monitor: monitorIn }: { readonly monitor: Monitor }) => {\n  // tslint:disable-next-line no-any\n  const currentWindow = window as any;\n\n  const userAgent = currentWindow.__USER_AGENT__;\n  const monitor = monitorIn.withLabels({\n    ...ua.convertLabels(userAgent),\n    [labels.APP_VERSION]: currentWindow.__APP_VERSION__,\n  });\n  const appContext = createAppContext({\n    apollo: createApolloClient({\n      endpoint: routes.GRAPHQL,\n      monitor,\n      apolloState: currentWindow.__APOLLO_STATE__,\n    }),\n    network: currentWindow.__NETWORK__,\n    css: currentWindow.__CSS__,\n    nonce: currentWindow.__NONCE__,\n    options: currentWindow.__OPTIONS__,\n    userAgent,\n    monitor,\n  });\n\n  renderApp(appContext);\n};\n","import { Monitor } from '@neo-one/monitor';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { onError } from 'apollo-link-error';\nimport { LiveLink } from './LiveLink';\n\nexport const createApolloClient = ({\n  monitor,\n  endpoint,\n  apolloState,\n}: {\n  readonly monitor: Monitor;\n  readonly endpoint: string;\n  readonly apolloState: NormalizedCacheObject;\n}) => {\n  const liveLink = new LiveLink({\n    endpoint,\n    monitor,\n  });\n\n  const errorLink = onError(({ networkError }) => {\n    if (networkError !== undefined) {\n      monitor.logError({\n        name: 'graphql_network_error',\n        error: networkError,\n      });\n    }\n  });\n\n  return new ApolloClient({\n    link: ApolloLink.from([errorLink, liveLink]),\n    cache: new InMemoryCache({\n      addTypename: false,\n    }).restore(apolloState),\n    queryDeduplication: false,\n    defaultOptions: {\n      watchQuery: {\n        fetchPolicy: 'cache-and-network',\n        errorPolicy: 'all',\n        notifyOnNetworkStatusChange: false,\n      },\n      query: {\n        fetchPolicy: 'cache-and-network',\n        errorPolicy: 'all',\n      },\n      mutate: {\n        errorPolicy: 'all',\n      },\n    },\n  });\n};\n","// tslint:disable no-import-side-effect ordered-imports\nimport './init';\nimport { CollectingLogger, DefaultMonitor, Reporter } from '@neo-one/monitor';\nimport { labels } from '@neotracker/shared-utils';\nimport TraceKit from 'tracekit';\nimport { render } from './render';\n\nconst start = () => {\n  const monitor = DefaultMonitor.create({ service: 'client_web' });\n  // tslint:disable-next-line no-any\n  const currentWindow = window as any;\n  const endpoint = currentWindow.__OPTIONS__.reportURL;\n  if (endpoint != undefined) {\n    const collectingLogger = new CollectingLogger();\n    // tslint:disable-next-line no-unused-expression\n    new Reporter({\n      logger: collectingLogger,\n      timer: currentWindow.__OPTIONS__.reportTimer,\n      endpoint,\n    });\n  }\n\n  TraceKit.report.subscribe((stack, _isWindowError, error) => {\n    const firstStack = stack.stack[0] as TraceKit.StackFrame | undefined;\n    monitor\n      .withData({\n        [labels.STACK_MESSAGE]: stack.message,\n        [labels.STACK_LINENUMBER]: firstStack === undefined ? undefined : firstStack.line,\n        [labels.STACK_COLUMNNUMBER]: firstStack === undefined ? undefined : firstStack.column,\n      })\n      .logError({ name: 'client_uncaught_exception', error });\n  });\n  // tslint:disable-next-line no-object-mutation\n  TraceKit.collectWindowErrors = true;\n\n  currentWindow.addEventListener('unhandledrejection', (event: PromiseRejectionEvent | undefined) => {\n    let error = new Error('Unknown');\n    if (event && event.reason instanceof Error) {\n      error = event.reason;\n    }\n\n    monitor.logError({ name: 'client_unhandled_rejection', error });\n    if (event) {\n      event.preventDefault();\n    }\n  });\n\n  render({ monitor });\n};\n\nstart();\n","import { Monitor } from '@neo-one/monitor';\nimport ApolloClient, { ApolloError, FetchPolicy, NetworkStatus, OperationVariables } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { Observable, Observer } from 'rxjs';\n\ninterface QueryResultBase<TVariables> {\n  readonly variables: TVariables;\n  readonly networkStatus: NetworkStatus;\n  readonly loading: boolean;\n  readonly error?: ApolloError;\n}\nexport interface ResolvedQueryResult<TData, TVariables> extends QueryResultBase<TVariables> {\n  readonly type: 'resolved';\n  readonly data: TData;\n}\n\nexport function isResolvedQueryResult<TData, TVariables>(\n  result: QueryResult<TData, TVariables>,\n): result is ResolvedQueryResult<TData, TVariables> {\n  return result.type === 'resolved';\n}\n\nexport interface UnresolvedQueryResult<TData, TVariables> extends QueryResultBase<TVariables> {\n  readonly type: 'unresolved';\n  readonly data: Partial<TData>;\n}\n\nexport function isUnresolvedQueryResult<TData, TVariables>(\n  result: QueryResult<TData, TVariables>,\n): result is UnresolvedQueryResult<TData, TVariables> {\n  return result.type === 'unresolved';\n}\n\nexport type QueryResult<TData, TVariables = OperationVariables> =\n  | ResolvedQueryResult<TData, TVariables>\n  | UnresolvedQueryResult<TData, TVariables>;\n\nexport interface ObserveQueryOptions<TVariables> {\n  readonly monitor: Monitor;\n  // tslint:disable-next-line no-any\n  readonly apollo: ApolloClient<any>;\n  readonly query: DocumentNode;\n  readonly variables?: TVariables;\n  readonly fetchPolicy?: FetchPolicy;\n  readonly notifyOnNetworkStatusChange?: boolean;\n}\n\nexport const observeQuery = <TData, TVariables = OperationVariables>({\n  monitor,\n  apollo,\n  query,\n  variables,\n  fetchPolicy = 'cache-and-network',\n  notifyOnNetworkStatusChange = false,\n}: ObserveQueryOptions<TVariables>): Observable<QueryResult<TData, TVariables>> =>\n  Observable.create((observer: Observer<QueryResult<TData, TVariables>>) => {\n    const queryObservable$ = apollo.watchQuery<TData>({\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy: 'all',\n      fetchResults: true,\n      notifyOnNetworkStatusChange,\n      context: { monitor },\n    });\n\n    const next = () => {\n      const currentResult = queryObservable$.currentResult();\n      const { data, errors, loading, networkStatus, partial } = currentResult;\n      let { error } = currentResult;\n\n      if (errors !== undefined && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      if (partial) {\n        observer.next({\n          type: 'unresolved',\n          data,\n          variables: variables as TVariables,\n          loading,\n          error,\n          networkStatus,\n        });\n      } else {\n        observer.next({\n          type: 'resolved',\n          data: data as TData,\n          variables: variables as TVariables,\n          loading,\n          error,\n          networkStatus,\n        });\n      }\n    };\n\n    let subscription: { unsubscribe: () => void } | undefined;\n    const unsubscribe = () => {\n      if (subscription !== undefined) {\n        subscription.unsubscribe();\n        subscription = undefined;\n      }\n    };\n    const resubscribe = () => {\n      unsubscribe();\n      const lastError = queryObservable$.getLastError();\n      const lastResult = queryObservable$.getLastResult();\n      // If lastError is set, the observable will immediately\n      // send it, causing the stream to terminate on initialization.\n      // We clear everything here and restore it afterward to\n      // make sure the new subscription sticks.\n      queryObservable$.resetLastResults();\n      subscribe();\n      Object.assign(queryObservable$, { lastError, lastResult });\n    };\n    const subscribe = () => {\n      subscription = queryObservable$.subscribe({\n        next: () => {\n          next();\n        },\n        error: (error) => {\n          resubscribe();\n\n          // If it has graphQLErrors it's an ApolloError and is already captured as data.\n          // Throw other errors.\n          if (!error.hasOwnProperty('graphQLErrors')) {\n            throw error;\n          }\n\n          next();\n        },\n        complete: observer.complete,\n      });\n    };\n\n    subscribe();\n    next();\n\n    return () => {\n      unsubscribe();\n    };\n  });\n"],"sourceRoot":""}