{"version":3,"sources":["webpack:///packages/neotracker-shared-web-next/src/utils/observeQuery.ts","webpack:///packages/neotracker-shared-web-next/src/components/render/Query.tsx","webpack:///packages/neotracker-shared-web-next/src/pages/Home.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AAEA;AAaM,SAAU,qBAAV,CACJ,MADI,EACkC;AAEtC,SAAO,MAAM,CAAC,IAAP,KAAgB,UAAvB;AACD;AAOK,SAAU,uBAAV,CACJ,MADI,EACkC;AAEtC,SAAO,MAAM,CAAC,IAAP,KAAgB,YAAvB;AACD;AAgBM,MAAM,YAAY,GAAG,CAAyC;AACnE,SADmE;AAEnE,QAFmE;AAGnE,OAHmE;AAInE,WAJmE;AAKnE,aAAW,GAAG,mBALqD;AAMnE,6BAA2B,GAAG;AANqC,CAAzC,KAQ1B,4BAAU,CAAC,MAAX,CAAmB,QAAD,IAAuD;AACvE,QAAM,gBAAgB,GAAG,MAAM,CAAC,UAAP,CAAyB;AAChD,SADgD;AAEhD,aAFgD;AAGhD,eAHgD;AAIhD,eAAW,EAAE,KAJmC;AAKhD,gBAAY,EAAE,IALkC;AAMhD,+BANgD;AAOhD,WAAO,EAAE;AAAE;AAAF;AAPuC,GAAzB,CAAzB;;AAUA,QAAM,IAAI,GAAG,MAAK;AAChB,UAAM,aAAa,GAAG,gBAAgB,CAAC,aAAjB,EAAtB;AACA,UAAM;AAAE,UAAF;AAAQ,YAAR;AAAgB,aAAhB;AAAyB,mBAAzB;AAAwC;AAAxC,QAAoD,aAA1D;AACA,QAAI;AAAE;AAAF,QAAY,aAAhB;;AAEA,QAAI,MAAM,KAAK,SAAX,IAAwB,MAAM,CAAC,MAAP,GAAgB,CAA5C,EAA+C;AAC7C,WAAK,GAAG,IAAI,sCAAJ,CAAgB;AAAE,qBAAa,EAAE;AAAjB,OAAhB,CAAR;AACD;;AAED,QAAI,OAAJ,EAAa;AACX,cAAQ,CAAC,IAAT,CAAc;AACZ,YAAI,EAAE,YADM;AAEZ,YAFY;AAGZ,iBAAS,EAAE,SAHC;AAIZ,eAJY;AAKZ,aALY;AAMZ;AANY,OAAd;AAQD,KATD,MASO;AACL,cAAQ,CAAC,IAAT,CAAc;AACZ,YAAI,EAAE,UADM;AAEZ,YAAI,EAAE,IAFM;AAGZ,iBAAS,EAAE,SAHC;AAIZ,eAJY;AAKZ,aALY;AAMZ;AANY,OAAd;AAQD;AACF,GA5BD;;AA8BA,MAAI,YAAJ;;AACA,QAAM,WAAW,GAAG,MAAK;AACvB,QAAI,YAAY,KAAK,SAArB,EAAgC;AAC9B,kBAAY,CAAC,WAAb;AACA,kBAAY,GAAG,SAAf;AACD;AACF,GALD;;AAMA,QAAM,WAAW,GAAG,MAAK;AACvB,eAAW;AACX,UAAM,SAAS,GAAG,gBAAgB,CAAC,YAAjB,EAAlB;AACA,UAAM,UAAU,GAAG,gBAAgB,CAAC,aAAjB,EAAnB,CAHuB,CAIvB;AACA;AACA;AACA;;AACA,oBAAgB,CAAC,gBAAjB;AACA,aAAS;AACT,UAAM,CAAC,MAAP,CAAc,gBAAd,EAAgC;AAAE,eAAF;AAAa;AAAb,KAAhC;AACD,GAXD;;AAYA,QAAM,SAAS,GAAG,MAAK;AACrB,gBAAY,GAAG,gBAAgB,CAAC,SAAjB,CAA2B;AACxC,UAAI,EAAE,MAAK;AACT,YAAI;AACL,OAHuC;AAIxC,WAAK,EAAG,KAAD,IAAU;AACf,mBAAW,GADI,CAGf;AACA;;AACA,YAAI,CAAC,KAAK,CAAC,cAAN,CAAqB,eAArB,CAAL,EAA4C;AAC1C,gBAAM,KAAN;AACD;;AAED,YAAI;AACL,OAduC;AAexC,cAAQ,EAAE,QAAQ,CAAC;AAfqB,KAA3B,CAAf;AAiBD,GAlBD;;AAoBA,WAAS;AACT,MAAI;AAEJ,SAAO,MAAK;AACV,eAAW;AACZ,GAFD;AAGD,CAtFD,CARK,C;;;;;;;;AC7CP;AACA;AAEA;AAEA;AAOA;AACA;;AAoBA,SAAS,sBAAT,CAA4C;AAC1C,YAAU,EAAE;AAAE,UAAF;AAAU;AAAV,GAD8B;AAE1C,OAF0C;AAG1C,WAH0C;AAI1C,6BAA2B,GAAG,KAJY;AAK1C,aAAW,GAAG;AAL4B,CAA5C,EAMqC;AACnC,SAAO;AACL,UADK;AAEL,WAFK;AAGL,SAHK;AAIL,aAAS,EAAE,SAJN;AAKL,eALK;AAML;AANK,GAAP;AAQD;;AAED,MAAM,eAAN,SAAgE,4BAAhE,CAAyG;AAGvG,cAAmB,KAAnB,EAAkD;AAChD,UAAM,KAAN;AAEA,SAAK,cAAL,GAAsB,YAAY,CAAC,sBAAsB,CAAC,KAAD,CAAvB,CAAlC;AACD;;AAEM,2BAAyB,CAAC,SAAD,EAAoC;AAClE,QACE,KAAK,KAAL,CAAW,UAAX,CAAsB,MAAtB,KAAiC,SAAS,CAAC,UAAV,CAAqB,MAAtD,IACA,KAAK,KAAL,CAAW,UAAX,CAAsB,OAAtB,KAAkC,SAAS,CAAC,UAAV,CAAqB,OADvD,IAEA,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAS,CAAC,KAF/B,IAGA,KAAK,KAAL,CAAW,2BAAX,KAA2C,SAAS,CAAC,2BAHrD,IAIA,CAAC,yBAAC,CAAC,OAAF,CAAU,KAAK,KAAL,CAAW,SAArB,EAAgC,SAAS,CAAC,SAA1C,CALH,EAME;AACA,WAAK,cAAL,GAAsB,YAAY,CAAC,sBAAsB,CAAC,SAAD,CAAvB,CAAlC;AACD;AACF;;AAEM,QAAM;AACX,WAAO,iCAAC,gCAAD,EAAW;AAAA,gBAAS,KAAK;AAAd,KAAX,EAA0C,KAAK,KAAL,CAAW,QAArD,CAAP;AACD;;AAvBsG;;AAiClG,MAAM,SAAS,GAAG,CAAyC;AAChE,OADgE;AAEhE;AAFgE,CAAzC,KAGuC;AAC9D,QAAM,KAAN,SAAoB,4BAApB,CAAkE;AACzD,iBAAa,SAAb,CAAuB,UAAvB,EAA+C,SAA/C,EAAqE;AAC1E,YAAM,MAAM,GAAG,MAAM,YAAY,CAC/B,sBAAsB,CAAC;AAAE,kBAAF;AAAc,aAAd;AAAqB,iBAArB;AAAgC,mBAAW,EAAE;AAA7C,OAAD,CADS,CAAZ,CAGlB,IAHkB,CAIjB,yBAAG,CAAE,KAAD,IAAU;AACZ,YAAI,KAAK,CAAC,KAAN,KAAgB,SAApB,EAA+B;AAC7B,gBAAM,KAAK,CAAC,KAAZ;AACD;;AAED,eAAO,KAAP;AACD,OANE,CAJc,EAWjB,4BAAM,CAAC,qBAAD,CAXW,EAYjB,0BAAI,CAAC,CAAD,CAZa,EAclB,SAdkB,EAArB;;AAgBA,UAAI,aAAa,KAAK,SAAtB,EAAiC;AAC/B,cAAM,aAAa,CAAC,UAAD,EAAa,MAAb,CAAnB;AACD;AACF;;AAEM,UAAM;AACX,aACE,iCAAC,wCAAD,EAAe,IAAf,EACI,UAAD,IACC,iCAAC,eAAD,EAAU,kBAAK,KAAK,KAAV,EAAe;AAAE,aAAK,EAAE,KAAT;AAAgB,kBAAU,EAAE;AAA5B,OAAf,CAAV,EACG,KAAK,KAAL,CAAW,QADd,CAFJ,CADF;AASD;;AAjC+D;;AAoClE,SAAO,KAAP;AACD,CAzCM,C;;ACpFP;AAAA;AACA;AAEA;AAGA,MAAM,QAAQ,GAAG,kCAAM,CAAC,uBAAD,CAAT;AAAA;AAAA;AAAA,kDAAd;AAMA,MAAM,SAAS,GAAG,SAAS,CAAgB;AACzC,OAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADoC,CAAhB,CAA3B;AAeM,SAAU,IAAV,GAAc;AAClB,SACE,iCAAC,SAAD,EAAU,IAAV,EACG,CAAC;AAAE,QAAF;AAAQ;AAAR,GAAD,KAAoB;AACnB,QAAI,IAAI,CAAC,KAAL,KAAe,SAAf,IAA4B,IAAI,CAAC,MAAL,KAAgB,SAAhD,EAA2D;AACzD,YAAM,KAAK,GAAG,IAAI,CAAC,KAAL,IAAc,SAAd,GAA0B,SAA1B,GAAsC,iCAAC,uBAAD,EAAI,IAAJ,EAAM,IAAI,CAAC,KAAL,CAAW,IAAjB,CAApD;AACA,YAAM,MAAM,GAAG,IAAI,CAAC,MAAL,IAAe,SAAf,GAA2B,SAA3B,GAAuC,iCAAC,uBAAD,EAAI,IAAJ,EAAM,IAAI,CAAC,MAAL,CAAY,IAAlB,CAAtD;AAEA,aACE,oEACG,KADH,EAEG,MAFH,CADF;AAMD;;AAED,QAAI,KAAJ,EAAW;AACT,aAAO,iCAAC,QAAD,EAAS,IAAT,EAAS,QAAT,CAAP;AACD;;AAED,WAAO,iCAAC,uBAAD,EAAI,IAAJ,EAAI,YAAJ,CAAP;AACD,GAnBH,CADF;AAuBD;;AAED,WAAiB,IAAjB,EAAqB;AACN,2BAAoB,MAAO,UAAP,IAAgD;AAC/E,UAAM,SAAS,CAAC,SAAV,CAAoB,UAApB,CAAN;AACD,GAFY;AAGd,CAJD,EAAiB,IAAI,KAAJ,IAAI,MAArB,E","file":"1.js","sourcesContent":["import { Monitor } from '@neo-one/monitor';\nimport ApolloClient, { ApolloError, FetchPolicy, NetworkStatus, OperationVariables } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { Observable, Observer } from 'rxjs';\n\ninterface QueryResultBase<TVariables> {\n  readonly variables: TVariables;\n  readonly networkStatus: NetworkStatus;\n  readonly loading: boolean;\n  readonly error?: ApolloError;\n}\nexport interface ResolvedQueryResult<TData, TVariables> extends QueryResultBase<TVariables> {\n  readonly type: 'resolved';\n  readonly data: TData;\n}\n\nexport function isResolvedQueryResult<TData, TVariables>(\n  result: QueryResult<TData, TVariables>,\n): result is ResolvedQueryResult<TData, TVariables> {\n  return result.type === 'resolved';\n}\n\nexport interface UnresolvedQueryResult<TData, TVariables> extends QueryResultBase<TVariables> {\n  readonly type: 'unresolved';\n  readonly data: Partial<TData>;\n}\n\nexport function isUnresolvedQueryResult<TData, TVariables>(\n  result: QueryResult<TData, TVariables>,\n): result is UnresolvedQueryResult<TData, TVariables> {\n  return result.type === 'unresolved';\n}\n\nexport type QueryResult<TData, TVariables = OperationVariables> =\n  | ResolvedQueryResult<TData, TVariables>\n  | UnresolvedQueryResult<TData, TVariables>;\n\nexport interface ObserveQueryOptions<TVariables> {\n  readonly monitor: Monitor;\n  // tslint:disable-next-line no-any\n  readonly apollo: ApolloClient<any>;\n  readonly query: DocumentNode;\n  readonly variables?: TVariables;\n  readonly fetchPolicy?: FetchPolicy;\n  readonly notifyOnNetworkStatusChange?: boolean;\n}\n\nexport const observeQuery = <TData, TVariables = OperationVariables>({\n  monitor,\n  apollo,\n  query,\n  variables,\n  fetchPolicy = 'cache-and-network',\n  notifyOnNetworkStatusChange = false,\n}: ObserveQueryOptions<TVariables>): Observable<QueryResult<TData, TVariables>> =>\n  Observable.create((observer: Observer<QueryResult<TData, TVariables>>) => {\n    const queryObservable$ = apollo.watchQuery<TData>({\n      query,\n      variables,\n      fetchPolicy,\n      errorPolicy: 'all',\n      fetchResults: true,\n      notifyOnNetworkStatusChange,\n      context: { monitor },\n    });\n\n    const next = () => {\n      const currentResult = queryObservable$.currentResult();\n      const { data, errors, loading, networkStatus, partial } = currentResult;\n      let { error } = currentResult;\n\n      if (errors !== undefined && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      if (partial) {\n        observer.next({\n          type: 'unresolved',\n          data,\n          variables: variables as TVariables,\n          loading,\n          error,\n          networkStatus,\n        });\n      } else {\n        observer.next({\n          type: 'resolved',\n          data: data as TData,\n          variables: variables as TVariables,\n          loading,\n          error,\n          networkStatus,\n        });\n      }\n    };\n\n    let subscription: { unsubscribe: () => void } | undefined;\n    const unsubscribe = () => {\n      if (subscription !== undefined) {\n        subscription.unsubscribe();\n        subscription = undefined;\n      }\n    };\n    const resubscribe = () => {\n      unsubscribe();\n      const lastError = queryObservable$.getLastError();\n      const lastResult = queryObservable$.getLastResult();\n      // If lastError is set, the observable will immediately\n      // send it, causing the stream to terminate on initialization.\n      // We clear everything here and restore it afterward to\n      // make sure the new subscription sticks.\n      queryObservable$.resetLastResults();\n      subscribe();\n      Object.assign(queryObservable$, { lastError, lastResult });\n    };\n    const subscribe = () => {\n      subscription = queryObservable$.subscribe({\n        next: () => {\n          next();\n        },\n        error: (error) => {\n          resubscribe();\n\n          // If it has graphQLErrors it's an ApolloError and is already captured as data.\n          // Throw other errors.\n          if (!error.hasOwnProperty('graphQLErrors')) {\n            throw error;\n          }\n\n          next();\n        },\n        complete: observer.complete,\n      });\n    };\n\n    subscribe();\n    next();\n\n    return () => {\n      unsubscribe();\n    };\n  });\n","import { FetchPolicy, OperationVariables } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport _ from 'lodash';\nimport * as React from 'react';\nimport { Observable } from 'rxjs';\nimport { filter, map, take } from 'rxjs/operators';\nimport { AppContext } from '../../AppContext';\nimport {\n  isResolvedQueryResult,\n  observeQuery,\n  ObserveQueryOptions,\n  QueryResult,\n  ResolvedQueryResult,\n} from '../../utils';\nimport { FromStream } from './FromStream';\nimport { WithAppContext } from './WithAppContext';\n\nexport interface QueryProps<TData, TVariables> {\n  readonly children: (result: QueryResult<TData, TVariables>) => React.ReactNode;\n  readonly variables?: TVariables;\n  readonly notifyOnNetworkStatusChange?: boolean;\n}\nexport interface Props<TData, TVariables> extends QueryProps<TData, TVariables> {\n  readonly query: DocumentNode;\n  readonly appContext: AppContext;\n}\n\ninterface GetObserveQueryOptions<TVariables> {\n  readonly query: DocumentNode;\n  readonly appContext: AppContext;\n  readonly variables?: TVariables;\n  readonly notifyOnNetworkStatusChange?: boolean;\n  readonly fetchPolicy?: FetchPolicy;\n}\n\nfunction getObserveQueryOptions<TVariables>({\n  appContext: { apollo, monitor },\n  query,\n  variables,\n  notifyOnNetworkStatusChange = false,\n  fetchPolicy = 'cache-and-network',\n}: GetObserveQueryOptions<TVariables>): ObserveQueryOptions<TVariables> {\n  return {\n    apollo,\n    monitor,\n    query,\n    variables: variables as TVariables,\n    fetchPolicy,\n    notifyOnNetworkStatusChange,\n  };\n}\n\nclass QueryBase<TData, TVariables = OperationVariables> extends React.Component<Props<TData, TVariables>> {\n  private mutableResult$: Observable<QueryResult<TData, TVariables>>;\n\n  public constructor(props: Props<TData, TVariables>) {\n    super(props);\n\n    this.mutableResult$ = observeQuery(getObserveQueryOptions(props));\n  }\n\n  public componentWillReceiveProps(nextProps: Props<TData, TVariables>): void {\n    if (\n      this.props.appContext.apollo !== nextProps.appContext.apollo ||\n      this.props.appContext.monitor !== nextProps.appContext.monitor ||\n      this.props.query !== nextProps.query ||\n      this.props.notifyOnNetworkStatusChange !== nextProps.notifyOnNetworkStatusChange ||\n      !_.isEqual(this.props.variables, nextProps.variables)\n    ) {\n      this.mutableResult$ = observeQuery(getObserveQueryOptions(nextProps));\n    }\n  }\n\n  public render(): React.ReactNode {\n    return <FromStream props$={this.mutableResult$}>{this.props.children}</FromStream>;\n  }\n}\n\nexport interface QueryClass<TData, TVariables> extends React.ComponentClass<QueryProps<TData, TVariables>> {\n  readonly fetchData: (appContext: AppContext, variables?: TVariables) => Promise<void>;\n}\nexport interface Options<TData, TVariables> {\n  readonly query: DocumentNode;\n  readonly fetchNextData?: (appContext: AppContext, result: ResolvedQueryResult<TData, TVariables>) => Promise<void>;\n}\nexport const makeQuery = <TData, TVariables = OperationVariables>({\n  query,\n  fetchNextData,\n}: Options<TData, TVariables>): QueryClass<TData, TVariables> => {\n  class Query extends React.Component<QueryProps<TData, TVariables>> {\n    public static async fetchData(appContext: AppContext, variables?: TVariables): Promise<void> {\n      const result = await observeQuery<TData, TVariables>(\n        getObserveQueryOptions({ appContext, query, variables, fetchPolicy: 'cache-first' }),\n      )\n        .pipe(\n          map((value) => {\n            if (value.error !== undefined) {\n              throw value.error;\n            }\n\n            return value;\n          }),\n          filter(isResolvedQueryResult),\n          take(1),\n        )\n        .toPromise();\n\n      if (fetchNextData !== undefined) {\n        await fetchNextData(appContext, result);\n      }\n    }\n\n    public render(): React.ReactNode {\n      return (\n        <WithAppContext>\n          {(appContext) => (\n            <QueryBase {...this.props} query={query} appContext={appContext}>\n              {this.props.children}\n            </QueryBase>\n          )}\n        </WithAppContext>\n      );\n    }\n  }\n\n  return Query;\n};\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport { Box, styled } from 'reakit';\nimport { AppContext } from '../AppContext';\nimport { makeQuery } from '../components';\nimport { HomeQuery as HomeQueryData } from './__generated__/HomeQuery';\n\nconst ErrorBox = styled(Box)`\n  background-color: red;\n  color: black;\n  width: 00;\n`;\n\nconst HomeQuery = makeQuery<HomeQueryData>({\n  query: gql`\n    query HomeQuery {\n      first: block(index: 0) {\n        id\n        hash\n      }\n      second: block(index: 1) {\n        id\n        hash\n      }\n    }\n  `,\n});\n\nexport function Home() {\n  return (\n    <HomeQuery>\n      {({ data, error }) => {\n        if (data.first !== undefined || data.second !== undefined) {\n          const first = data.first == undefined ? undefined : <Box>{data.first.hash}</Box>;\n          const second = data.second == undefined ? undefined : <Box>{data.second.hash}</Box>;\n\n          return (\n            <>\n              {first}\n              {second}\n            </>\n          );\n        }\n\n        if (error) {\n          return <ErrorBox>Error!</ErrorBox>;\n        }\n\n        return <Box>Loading...</Box>;\n      }}\n    </HomeQuery>\n  );\n}\n\nexport namespace Home {\n  export const fetchDataForRoute = async (appContext: AppContext): Promise<void> => {\n    await HomeQuery.fetchData(appContext);\n  };\n}\n"],"sourceRoot":""}