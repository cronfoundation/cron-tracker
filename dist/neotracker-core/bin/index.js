#!/usr/bin/env node
require('source-map-support').install({ handleUncaughtExceptions: false, environment: 'node' });
const { defaultMetrics, metrics } = require('@neo-one/monitor');
metrics.setFactory(defaultMetrics);

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded chunks
/******/ 	// "0" means "already loaded"
/******/ 	var installedChunks = {
/******/ 		0: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// require() chunk loading for javascript
/******/
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] !== 0) {
/******/ 			var chunk = require("./" + ({}[chunkId]||chunkId) + ".js");
/******/ 			var moreModules = chunk.modules, chunkIds = chunk.ids;
/******/ 			for(var moduleId in moreModules) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 			for(var i = 0; i < chunkIds.length; i++)
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// uncaught error handler for webpack runtime
/******/ 	__webpack_require__.oe = function(err) {
/******/ 		process.nextTick(function() {
/******/ 			throw err; // catch this error by using import().catch()
/******/ 		});
/******/ 	};
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 334);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = require("react");

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("recompose");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = require("classnames");

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = require("lodash");

/***/ }),
/* 4 */,
/* 5 */
/***/ (function(module, exports) {

module.exports = require("rxjs/operators");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("objection");

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("rxjs");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return convertJSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return convertJSONBoolean; });
// tslint:disable no-any no-null-keyword
const convertJSON = value => {
  if (value === undefined) {
    return undefined;
  }

  if (value === null) {
    return null;
  }

  return typeof value === 'number' ? String(value) : value;
};
const convertJSONBoolean = value => {
  if (!value) {
    return false;
  }

  return true;
};

/***/ }),
/* 9 */,
/* 10 */
/***/ (function(module, exports) {

module.exports = require("react-relay");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("@neo-one/client");

/***/ }),
/* 12 */,
/* 13 */
/***/ (function(module, exports) {

module.exports = require("bignumber.js");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = require("@neo-one/monitor");

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = require("react-helmet");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(204);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "api", function() { return _api__WEBPACK_IMPORTED_MODULE_0__; });




/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = require("react-router");

/***/ }),
/* 18 */,
/* 19 */,
/* 20 */
/***/ (function(module, exports) {

module.exports = require("react-router-dom");

/***/ }),
/* 21 */,
/* 22 */
/***/ (function(module, exports) {

module.exports = require("react-redux");

/***/ }),
/* 23 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 24 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/lightBlue");

/***/ }),
/* 25 */
/***/ (function(module, exports) {

module.exports = require("graphql/execution/execute");

/***/ }),
/* 26 */,
/* 27 */
/***/ (function(module, exports) {

module.exports = require("change-case");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

module.exports = require("redux-actions");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

module.exports = require("serialize-javascript");

/***/ }),
/* 30 */,
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSACTION_TYPES", function() { return TRANSACTION_TYPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transaction", function() { return Transaction; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);




const TRANSACTION_TYPES = ['MinerTransaction', 'IssueTransaction', 'ClaimTransaction', 'EnrollmentTransaction', 'RegisterTransaction', 'ContractTransaction', 'PublishTransaction', 'InvocationTransaction', 'StateTransaction'];
class Transaction extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__[/* BlockchainModel */ "a"] {
  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, Transaction);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.id),
      system_fee: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.system_fee),
      network_fee: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.network_fee),
      nonce: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.nonce),
      gas: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.gas)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.id); // @ts-ignore

    this.system_fee = Number(this.system_fee).toFixed(8); // @ts-ignore

    this.network_fee = Number(this.network_fee).toFixed(8); // @ts-ignore

    this.nonce = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.nonce); // @ts-ignore

    this.gas = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.gas); // tslint:enable no-object-mutation
  }

}
Transaction.modelName = 'Transaction';
Transaction.exposeGraphQL = true;
Transaction.idDesc = true;
Transaction.indices = [// BlockTransactionPagingView
{
  type: 'order',
  columns: [{
    name: 'block_id',
    order: 'desc'
  }, {
    name: 'index',
    order: 'asc'
  }],
  name: 'transaction_block_id_index'
}, // Home, TransactionSearch
{
  type: 'order',
  columns: [{
    name: 'id',
    order: 'desc'
  }, {
    name: 'type',
    order: 'asc'
  }],
  name: 'transaction_id_type'
}, // run$
{
  type: 'order',
  columns: [{
    name: 'hash',
    order: 'asc'
  }],
  name: 'transaction_hash'
}];
Transaction.fieldSchema = {
  id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    required: true,
    exposeGraphQL: true
  },
  hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    required: true,
    exposeGraphQL: true
  },
  type: {
    type: {
      type: 'string',
      enum: TRANSACTION_TYPES
    },
    required: true,
    exposeGraphQL: true
  },
  size: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  version: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  attributes_raw: {
    type: {
      type: 'string'
    },
    required: true
  },
  system_fee: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  network_fee: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  nonce: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  },
  pubkey: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  },
  block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true,
    exposeGraphQL: true
  },
  block_time: _common__WEBPACK_IMPORTED_MODULE_2__[/* BLOCK_TIME_COLUMN */ "e"],
  index: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  scripts_raw: {
    type: {
      type: 'string'
    },
    required: true
  },
  scripts: {
    type: {
      type: 'custom',
      graphqlType: '[Script!]!'
    },
    graphqlResolver: async obj => {
      if (obj.scripts != undefined) {
        return obj.scripts;
      }

      return typeof obj.scripts_raw === 'string' ? JSON.parse(obj.scripts_raw) : obj.scripts_raw;
    },
    required: true,
    exposeGraphQL: true,
    computed: true
  },
  script: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  },
  gas: {
    type: {
      type: 'decimal'
    },
    exposeGraphQL: true
  },
  result_raw: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  }
};
Transaction.edgeSchema = {
  inputs: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'transaction.id',
        to: 'transaction_input_output.input_transaction_id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"])
    },
    exposeGraphQL: true
  },
  outputs: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'transaction.id',
        to: 'transaction_input_output.output_transaction_id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"])
    },
    exposeGraphQL: true
  },
  enrollment: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'transaction.id',
        to: 'transaction_input_output.output_transaction_id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.subtype', _common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_ENROLLMENT */ "n"])
    },
    exposeGraphQL: true
  },
  claims: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'transaction.id',
        to: 'transaction_input_output.claim_transaction_id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"])
    },
    exposeGraphQL: true
  },
  duplicate_claims: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'transaction.id',
        to: 'transaction_input_output.claim_transaction_id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_DUPLICATE_CLAIM */ "r"])
    },
    exposeGraphQL: true
  },
  asset: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(47).Asset;
      },

      join: {
        from: 'transaction.id',
        to: 'asset.transaction_id'
      }
    },
    exposeGraphQL: true
  },
  block: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(51).Block;
      },

      join: {
        from: 'transaction.block_id',
        to: 'block.id'
      }
    },
    required: true,
    exposeGraphQL: true
  },
  contracts: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(68).Contract;
      },

      join: {
        from: 'transaction.id',
        to: 'contract.transaction_id'
      }
    },
    exposeGraphQL: true
  },
  actions: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(66).Action;
      },

      join: {
        from: 'transaction.id',
        to: 'action.transaction_id'
      }
    },
    exposeGraphQL: true
  },
  transfers: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(40).Transfer;
      },

      join: {
        from: 'transaction.id',
        to: 'transfer.transaction_id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlockchainModel; });
/* harmony import */ var _neotracker_server_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(368);
/* harmony import */ var _createPubSub__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(50);
/* harmony import */ var _BaseVisibleModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(56);



class BlockchainModel extends _BaseVisibleModel__WEBPACK_IMPORTED_MODULE_2__[/* BaseVisibleModel */ "a"] {
  // tslint:disable no-any
  static observable$(_obj, _args, _context, _info) {
    return _neotracker_server_utils__WEBPACK_IMPORTED_MODULE_0__[/* pubsub */ "a"].observable$(_createPubSub__WEBPACK_IMPORTED_MODULE_1__[/* PROCESSED_NEXT_INDEX */ "a"]);
  }

}
BlockchainModel.cacheType = 'blockchain';

/***/ }),
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/constants.ts
var constants = __webpack_require__(365);

// EXTERNAL MODULE: external "objection"
var external_objection_ = __webpack_require__(6);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/utils.ts
var utils = __webpack_require__(223);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/numbers.ts
var numbers = __webpack_require__(366);

// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(13);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/TransactionInputOutput.ts
var TransactionInputOutput = __webpack_require__(39);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/utils/calculateClaimValueBase.ts
var calculateClaimValueBase = __webpack_require__(102);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/utils/calculateClaimValue.ts



const createGetSystemFee = (rootLoader, monitor) => async indexIn => {
  let block;
  let index = indexIn; // tslint:disable-next-line no-loop-statement

  while (block === undefined && index >= indexIn - 5) {
    // eslint-disable-next-line
    block = await rootLoader.loaders.block.load({
      id: index,
      monitor
    });

    if (block === undefined) {
      index -= 1;
    }
  }

  if (block === undefined) {
    throw new Error(`Unexpected Block index: ${index}`);
  }

  return new external_bignumber_js_default.a(block.aggregated_system_fee);
}; // NOTE: This is approximate, it may be incorrect. See above - we guard against
//       possible db sync differences by using the previous aggregated system
//       fee


const calculateClaimValue = async ({
  rootLoader,
  monitor,
  coins
}) => Object(calculateClaimValueBase["a" /* calculateClaimValueBase */])({
  getSystemFee: createGetSystemFee(rootLoader, monitor),
  coins
});
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/utils/calculateAddressClaimValue.ts




const calculateAddressClaimValue = async (address, context, info) => {
  const [unclaimed, currentHeight] = await Promise.all([TransactionInputOutput["TransactionInputOutput"].query(context.rootLoader.db).context(context.rootLoader.makeQueryContext(context.getMonitor(info))).where('address_id', address.id).where('asset_id', constants["f" /* NEO_ASSET_ID */]).whereNull('claim_transaction_id'), context.rootLoader.maxIndexFetcher.get()]);
  const nonNullClaimValue = unclaimed.map(tio => tio.claim_value).filter(utils["a" /* utils */].notNull).reduce((acc, value) => acc.plus(new external_bignumber_js_default.a(value)), numbers["a" /* numbers */].ZERO);
  const nullClaimValue = await calculateClaimValue({
    rootLoader: context.rootLoader,
    monitor: context.getMonitor(info),
    coins: unclaimed.filter(tio => tio.claim_value == undefined).map(tio => ({
      value: new external_bignumber_js_default.a(tio.value),
      startHeight: tio.output_block_id,
      endHeight: currentHeight
    }))
  });
  return nonNullClaimValue.plus(nullClaimValue).toFixed(8);
};
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/BlockchainModel.ts
var BlockchainModel = __webpack_require__(32);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/common.ts
var common = __webpack_require__(38);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/convertJSON.ts
var convertJSON = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/Address.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Address", function() { return Address_Address; });
// tslint:disable variable-name no-useless-cast






class Address_Address extends BlockchainModel["a" /* BlockchainModel */] {
  static get pluralName() {
    return 'Addresses';
  }

  static async insertAll(db, context, data) {
    return this.insertAllBase(db, context, data, Address_Address);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      transaction_id: Object(convertJSON["a" /* convertJSON */])(json.transaction_id),
      transaction_count: Object(convertJSON["a" /* convertJSON */])(json.transaction_count),
      transfer_count: Object(convertJSON["a" /* convertJSON */])(json.transfer_count),
      last_transaction_id: Object(convertJSON["a" /* convertJSON */])(json.last_transaction_id)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.transaction_id = Object(convertJSON["a" /* convertJSON */])(this.transaction_id); // @ts-ignore

    this.transaction_count = Object(convertJSON["a" /* convertJSON */])(this.transaction_count); // @ts-ignore

    this.transfer_count = Object(convertJSON["a" /* convertJSON */])(this.transfer_count); // @ts-ignore

    this.last_transaction_id = Object(convertJSON["a" /* convertJSON */])(this.last_transaction_id); // tslint:enable no-object-mutation
  }

}
Address_Address.modelName = 'Address';
Address_Address.exposeGraphQL = true;
Address_Address.indices = [// AddressSearch
{
  type: 'order',
  columns: [{
    name: 'block_id',
    order: 'desc'
  }, {
    name: 'id',
    order: 'asc'
  }],
  name: 'address_block_id_id'
}];
Address_Address.fieldSchema = {
  id: {
    type: common["a" /* ADDRESS_VALIDATOR */],
    exposeGraphQL: true,
    required: true
  },
  transaction_id: {
    type: common["c" /* BIG_INT_ID */],
    exposeGraphQL: true
  },
  transaction_hash: {
    type: common["h" /* HASH_VALIDATOR */],
    exposeGraphQL: true
  },
  block_id: {
    type: common["i" /* INTEGER_INDEX_VALIDATOR */],
    exposeGraphQL: true
  },
  block_time: common["e" /* BLOCK_TIME_COLUMN */],
  transaction_count: {
    type: {
      type: 'bigInteger',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  transfer_count: {
    type: {
      type: 'bigInteger',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  aggregate_block_id: {
    type: common["d" /* BLOCK_ID_VALIDATOR */],
    required: true
  },
  last_transaction_id: {
    type: common["c" /* BIG_INT_ID */],
    exposeGraphQL: true
  },
  last_transaction_hash: {
    type: common["h" /* HASH_VALIDATOR */],
    exposeGraphQL: true
  },
  last_transaction_time: {
    type: {
      type: 'integer',
      minimum: 0
    },
    exposeGraphQL: true
  },
  claim_value_available_coin: {
    type: {
      type: 'model',
      modelType: 'Coin'
    },
    graphqlResolver: async (obj, _args, context, info) => {
      if (obj.claim_value_available_coin != undefined) {
        return obj.claim_value_available_coin;
      }

      const [asset, value] = await Promise.all([context.rootLoader.loaders.asset.load({
        // tslint:disable-next-line no-any
        id: constants["b" /* GAS_ASSET_ID */],
        monitor: context.getMonitor(info)
      }), calculateAddressClaimValue(obj, context, info)]);
      return {
        id: `-${obj.id}`,
        value,
        asset
      };
    },
    computed: true,
    required: true,
    exposeGraphQL: true
  }
};
Address_Address.edgeSchema = {
  coins: {
    relation: {
      relation: external_objection_["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(67).Coin;
      },

      join: {
        from: 'address.id',
        to: 'coin.address_id'
      }
    },
    exposeGraphQL: true
  },
  transaction_input_outputs: {
    relation: {
      relation: external_objection_["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'address.id',
        to: 'transaction_input_output.address_id'
      }
    },
    exposeGraphQL: true
  },
  first_transaction: {
    relation: {
      relation: external_objection_["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'address.transaction_id',
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true
  },
  transactions: {
    relation: {
      relation: external_objection_["Model"].ManyToManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'address.id',
        through: {
          get modelClass() {
            // tslint:disable-next-line no-require-imports
            return __webpack_require__(103).AddressToTransaction;
          },

          from: 'address_to_transaction.id1',
          to: 'address_to_transaction.id2'
        },
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true
  },
  transfers: {
    relation: {
      relation: external_objection_["Model"].ManyToManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(40).Transfer;
      },

      join: {
        from: 'address.id',
        through: {
          get modelClass() {
            // tslint:disable-next-line no-require-imports
            return __webpack_require__(69).AddressToTransfer;
          },

          from: 'address_to_transfer.id1',
          to: 'address_to_transfer.id2'
        },
        to: 'transfer.id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return BIG_INT_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return HASH_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return NONCE_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADDRESS_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return CONTRACT_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ASSET_HASH_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return INTEGER_INDEX_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return BLOCK_ID_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return BLOCK_TIME_VALIDATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return BLOCK_TIME_COLUMN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "s", function() { return TYPE_INPUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "r", function() { return TYPE_DUPLICATE_CLAIM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "p", function() { return SUBTYPE_NONE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return SUBTYPE_ISSUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return SUBTYPE_ENROLLMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return SUBTYPE_CLAIM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "q", function() { return SUBTYPE_REWARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return NEP5_CONTRACT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return NEP5_BLACKLIST_CONTRACT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "t", function() { return UNKNOWN_CONTRACT_TYPE; });
// tslint:disable no-useless-cast
const BIG_INT_ID = {
  type: 'bigInteger',
  minimum: 0
};
const HASH_VALIDATOR = {
  type: 'string',
  minLength: 64,
  maxLength: 64
};
const NONCE_VALIDATOR = {
  type: 'string',
  minLength: 16,
  maxLength: 16
};
const ADDRESS_VALIDATOR = {
  type: 'string',
  minLength: 34,
  maxLength: 34
};
const CONTRACT_VALIDATOR = {
  type: 'string',
  minLength: 40,
  maxLength: 40
};
const ASSET_HASH_VALIDATOR = {
  type: 'string',
  minLength: 40,
  maxLength: 64
};
const INTEGER_INDEX_VALIDATOR = {
  type: 'integer',
  minimum: 0
};
const BLOCK_ID_VALIDATOR = {
  type: 'integer',
  minimum: -1
};
const BLOCK_TIME_VALIDATOR = {
  type: 'integer',
  minimum: 0
};
const BLOCK_TIME_COLUMN = {
  type: {
    type: 'integer',
    minimum: 0
  },
  required: true,
  exposeGraphQL: true
};
const TYPE_INPUT = 'INPUT';
const TYPE_DUPLICATE_CLAIM = 'DUPLICATE_CLAIM';
const SUBTYPE_NONE = 'NONE';
const SUBTYPE_ISSUE = 'ISSUE';
const SUBTYPE_ENROLLMENT = 'ENROLLMENT';
const SUBTYPE_CLAIM = 'CLAIM';
const SUBTYPE_REWARD = 'REWARD';
const NEP5_CONTRACT_TYPE = 'NEP5';
const NEP5_BLACKLIST_CONTRACT_TYPE = 'NEP5_BLACKLIST';
const UNKNOWN_CONTRACT_TYPE = 'UNKNOWN';

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransactionInputOutput", function() { return TransactionInputOutput; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);



 // Always starts as an output
// May be used as an input in contract (where it subtracts from the owner)
// or a claim (where it does not subtract from the owner)

class TransactionInputOutput extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__[/* BlockchainModel */ "a"] {
  static makeID({
    outputTransactionHash,
    outputTransactionIndex,
    type
  }) {
    return [outputTransactionHash, outputTransactionIndex, type].join('$');
  }

  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, TransactionInputOutput);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      input_transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.input_transaction_id),
      claim_transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.claim_transaction_id),
      output_transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.output_transaction_id),
      value: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.value),
      claim_value: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.claim_value)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.input_transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.input_transaction_id); // @ts-ignore

    this.claim_transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.claim_transaction_id); // @ts-ignore

    this.output_transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.output_transaction_id); // @ts-ignore

    this.value = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.value); // @ts-ignore

    this.claim_value = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.claim_value); // tslint:enable no-object-mutation
  }

}
TransactionInputOutput.modelName = 'TransactionInputOutput';
TransactionInputOutput.exposeGraphQL = true;
TransactionInputOutput.indices = [// TransactionInputPagingTable
{
  type: 'order',
  columns: [{
    name: 'input_transaction_id',
    order: 'desc'
  }, {
    name: 'type',
    order: 'asc'
  }, {
    name: 'output_transaction_index',
    order: 'asc'
  }],
  name: 'tio_input_transaction_id_type_output_transaction_index'
}, // TransactionOutputPagingTable, run$
{
  type: 'order',
  columns: [{
    name: 'output_transaction_id',
    order: 'desc'
  }, {
    name: 'type',
    order: 'asc'
  }, {
    name: 'output_transaction_index',
    order: 'asc'
  }],
  name: 'tio_output_transaction_id_type_output_transaction_index'
}, // TransactionClaimPagingTable
{
  type: 'order',
  columns: [{
    name: 'claim_transaction_id',
    order: 'desc'
  }, {
    name: 'type',
    order: 'asc'
  }, {
    name: 'output_transaction_index',
    order: 'asc'
  }],
  name: 'tio_claim_transaction_id_type_output_transaction_index'
}, {
  type: 'order',
  columns: [{
    name: 'address_id',
    order: 'asc'
  }, {
    name: 'asset_id',
    order: 'asc'
  }, {
    name: 'claim_transaction_id',
    order: 'desc'
  }],
  name: 'tio_address_id_asset_id_claim_transaction_id'
}];
TransactionInputOutput.fieldSchema = {
  id: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  type: {
    type: {
      type: 'string',
      enum: [_common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"], _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_DUPLICATE_CLAIM */ "r"]]
    },
    required: true,
    exposeGraphQL: true
  },
  subtype: {
    type: {
      type: 'string',
      enum: [_common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_NONE */ "p"], _common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_ISSUE */ "o"], _common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_ENROLLMENT */ "n"], _common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_CLAIM */ "m"], _common__WEBPACK_IMPORTED_MODULE_2__[/* SUBTYPE_REWARD */ "q"]]
    },
    required: true,
    exposeGraphQL: true
  },
  input_transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    exposeGraphQL: true
  },
  claim_transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    exposeGraphQL: true
  },
  output_transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    required: true,
    exposeGraphQL: true
  },
  input_transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true
  },
  claim_transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true
  },
  output_transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    required: true,
    exposeGraphQL: true
  },
  output_transaction_index: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  output_block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true
  },
  asset_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* ASSET_HASH_VALIDATOR */ "b"],
    required: true,
    exposeGraphQL: true
  },
  value: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* ADDRESS_VALIDATOR */ "a"],
    required: true,
    exposeGraphQL: true
  },
  claim_value: {
    type: {
      type: 'decimal'
    },
    exposeGraphQL: true
  }
};
TransactionInputOutput.edgeSchema = {
  input_transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'transaction_input_output.input_transaction_id',
        to: 'transaction.id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"])
    },
    exposeGraphQL: true
  },
  claim_transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'transaction_input_output.claim_transaction_id',
        to: 'transaction.id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_INPUT */ "s"])
    },
    exposeGraphQL: true
  },
  duplicate_claim_transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'transaction_input_output.claim_transaction_id',
        to: 'transaction.id'
      },
      filter: queryBuilder => queryBuilder.where('transaction_input_output.type', _common__WEBPACK_IMPORTED_MODULE_2__[/* TYPE_DUPLICATE_CLAIM */ "r"])
    },
    exposeGraphQL: true
  },
  output_transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'transaction_input_output.output_transaction_id',
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  asset: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(47).Asset;
      },

      join: {
        from: 'transaction_input_output.asset_id',
        to: 'asset.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'transaction_input_output.address_id',
        to: 'address.id'
      }
    },
    exposeGraphQL: true,
    required: true
  }
};

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Transfer", function() { return Transfer; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);




class Transfer extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__[/* BlockchainModel */ "a"] {
  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, Transfer);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.id),
      transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.transaction_id),
      value: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.value)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.id); // @ts-ignore

    this.transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.transaction_id); // @ts-ignore

    this.value = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.value); // tslint:enable no-object-mutation
  }

}
Transfer.modelName = 'Transfer';
Transfer.exposeGraphQL = true;
Transfer.idDesc = true;
Transfer.indices = [// AssetTransferPagingView
{
  type: 'order',
  columns: [{
    name: 'asset_id',
    order: 'asc'
  }, {
    name: 'id',
    order: 'desc'
  }],
  name: 'transfer_asset_id_id'
}, // TransactionView
{
  type: 'order',
  columns: [{
    name: 'transaction_id',
    order: 'desc'
  }],
  name: 'transfer_transaction_id'
}];
Transfer.fieldSchema = {
  // Action id
  id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    required: true,
    exposeGraphQL: true
  },
  transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    exposeGraphQL: true,
    required: true
  },
  transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true,
    required: true
  },
  asset_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* ASSET_HASH_VALIDATOR */ "b"],
    required: true,
    exposeGraphQL: true
  },
  contract_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* CONTRACT_VALIDATOR */ "g"],
    required: true
  },
  value: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  from_address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* ADDRESS_VALIDATOR */ "a"],
    exposeGraphQL: true
  },
  to_address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* ADDRESS_VALIDATOR */ "a"],
    exposeGraphQL: true
  },
  block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true
  },
  transaction_index: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true
  },
  action_index: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true
  },
  block_time: _common__WEBPACK_IMPORTED_MODULE_2__[/* BLOCK_TIME_COLUMN */ "e"]
};
Transfer.edgeSchema = {
  transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'transfer.transaction_id',
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true
  },
  asset: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(47).Asset;
      },

      join: {
        from: 'transfer.asset_id',
        to: 'asset.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  action: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(66).Action;
      },

      join: {
        from: 'transfer.id',
        to: 'action.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  contract: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(68).Contract;
      },

      join: {
        from: 'transfer.contract_id',
        to: 'contract.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  from_address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'transfer.from_address_id',
        to: 'address.id'
      }
    },
    exposeGraphQL: true
  },
  to_address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'transfer.to_address_id',
        to: 'address.id'
      }
    },
    exposeGraphQL: true
  },
  addresses: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].ManyToManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'transfer.id',
        through: {
          get modelClass() {
            // tslint:disable-next-line no-require-imports
            return __webpack_require__(69).AddressToTransfer;
          },

          from: 'address_to_transfer.id2',
          to: 'address_to_transfer.id1'
        },
        to: 'address.id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 41 */
/***/ (function(module, exports) {

module.exports = require("fs-extra");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

module.exports = require("koa-compose");

/***/ }),
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/constants.ts
var constants = __webpack_require__(365);

// EXTERNAL MODULE: external "objection"
var external_objection_ = __webpack_require__(6);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/numbers.ts
var numbers = __webpack_require__(366);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/utils/calculateClaimValueBase.ts
var calculateClaimValueBase = __webpack_require__(102);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/utils/calculateAvailableGAS.ts


const calculateAvailableGAS = async maxIndex => Object(calculateClaimValueBase["a" /* calculateClaimValueBase */])({
  getSystemFee: async () => Promise.resolve(numbers["a" /* numbers */].ZERO),
  coins: [{
    value: numbers["a" /* numbers */].TOTAL_NEO,
    startHeight: 0,
    endHeight: maxIndex
  }]
});
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/BlockchainModel.ts
var BlockchainModel = __webpack_require__(32);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/common.ts
var common = __webpack_require__(38);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/convertJSON.ts
var convertJSON = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/Asset.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ASSET_TYPES", function() { return ASSET_TYPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Asset", function() { return Asset_Asset; });
// tslint:disable variable-name






const ASSET_TYPES = ['CreditFlag', 'DutyFlag', 'GoverningToken', 'UtilityToken', 'Currency', 'Share', 'Invoice', 'Token', common["k" /* NEP5_CONTRACT_TYPE */]];
class Asset_Asset extends BlockchainModel["a" /* BlockchainModel */] {
  static async insertAll(db, context, data) {
    return this.insertAllBase(db, context, data, Asset_Asset);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      transaction_id: Object(convertJSON["a" /* convertJSON */])(json.transaction_id),
      amount: Object(convertJSON["a" /* convertJSON */])(json.amount),
      issued: Object(convertJSON["a" /* convertJSON */])(json.issued),
      address_count: Object(convertJSON["a" /* convertJSON */])(json.address_count),
      transaction_count: Object(convertJSON["a" /* convertJSON */])(json.transaction_count),
      transfer_count: Object(convertJSON["a" /* convertJSON */])(json.transfer_count)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.transaction_id = Object(convertJSON["a" /* convertJSON */])(this.transaction_id); // @ts-ignore

    this.amount = Object(convertJSON["a" /* convertJSON */])(this.amount); // @ts-ignore

    this.issued = Object(convertJSON["a" /* convertJSON */])(this.issued); // @ts-ignore

    this.address_count = Object(convertJSON["a" /* convertJSON */])(this.address_count); // @ts-ignore

    this.transaction_count = Object(convertJSON["a" /* convertJSON */])(this.transaction_count); // @ts-ignore

    this.transfer_count = Object(convertJSON["a" /* convertJSON */])(this.transfer_count); // tslint:enable no-object-mutation
  }

}
Asset_Asset.modelName = 'Asset';
Asset_Asset.exposeGraphQL = true;
Asset_Asset.indices = [// AssetSearch
{
  type: 'order',
  columns: [{
    name: 'transaction_count',
    order: 'desc'
  }, {
    name: 'id',
    order: 'asc'
  }],
  name: 'asset_transaction_count_id'
}];
Asset_Asset.fieldSchema = {
  id: {
    type: common["b" /* ASSET_HASH_VALIDATOR */],
    exposeGraphQL: true,
    required: true
  },
  transaction_id: {
    type: common["c" /* BIG_INT_ID */],
    exposeGraphQL: true,
    required: true
  },
  transaction_hash: {
    type: common["h" /* HASH_VALIDATOR */],
    exposeGraphQL: true,
    required: true
  },
  type: {
    type: {
      type: 'string',
      enum: ASSET_TYPES
    },
    required: true,
    exposeGraphQL: true
  },
  name_raw: {
    type: {
      type: 'string'
    },
    required: true
  },
  name: {
    type: {
      type: 'custom',
      graphqlType: '[AssetName!]!',
      typeDefs: {
        AssetName: `
            type AssetName {
              lang: String!
              name: String!
            }
          `
      }
    },
    graphqlResolver: async obj => {
      if (obj.name != undefined) {
        return obj.name;
      }

      try {
        const result = typeof obj.name_raw === 'string' ? JSON.parse(obj.name_raw) : obj.name_raw;

        if (typeof result === 'string') {
          return [{
            lang: 'en',
            name: result
          }];
        }

        return result;
      } catch (_a) {
        return [{
          lang: 'en',
          name: obj.name_raw
        }];
      }
    },
    required: true,
    exposeGraphQL: true,
    computed: true
  },
  symbol: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  amount: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  precision: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  // Does not necessarily exist for NEP-5 tokens
  owner: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  },
  // Does not necessarily exist for NEP-5 tokens
  admin_address_id: {
    type: common["a" /* ADDRESS_VALIDATOR */],
    exposeGraphQL: true
  },
  block_time: common["e" /* BLOCK_TIME_COLUMN */],
  issued: {
    type: {
      type: 'decimal',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  available: {
    type: {
      type: 'decimal',
      minimum: 0
    },
    graphqlResolver: async (obj, _args, context) => {
      if (obj.available != undefined) {
        return obj.available;
      }

      if (obj.transaction_id === constants["a" /* GAS_ASSET_HASH */]) {
        const maxIndex = await context.rootLoader.maxIndexFetcher.get();
        return calculateAvailableGAS(maxIndex);
      }

      return obj.issued;
    },
    required: true,
    exposeGraphQL: true,
    computed: true
  },
  address_count: {
    type: {
      type: 'bigInteger',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  transaction_count: {
    type: {
      type: 'bigInteger',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  transfer_count: {
    type: {
      type: 'bigInteger',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  aggregate_block_id: {
    type: common["d" /* BLOCK_ID_VALIDATOR */],
    exposeGraphQL: true,
    required: true
  }
};
Asset_Asset.edgeSchema = {
  coins: {
    relation: {
      relation: external_objection_["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(67).Coin;
      },

      join: {
        from: 'asset.id',
        to: 'coin.asset_id'
      }
    },
    exposeGraphQL: true
  },
  transaction_input_outputs: {
    relation: {
      relation: external_objection_["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(39).TransactionInputOutput;
      },

      join: {
        from: 'asset.id',
        to: 'transaction_input_output.asset_id'
      }
    },
    exposeGraphQL: true
  },
  admin_address: {
    relation: {
      relation: external_objection_["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'asset.admin_address_id',
        to: 'address.id'
      }
    },
    exposeGraphQL: true
  },
  register_transaction: {
    relation: {
      relation: external_objection_["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'asset.transaction_id',
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  transactions: {
    relation: {
      relation: external_objection_["Model"].ManyToManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'asset.id',
        through: {
          get modelClass() {
            // tslint:disable-next-line no-require-imports
            return __webpack_require__(104).AssetToTransaction;
          },

          from: 'asset_to_transaction.id1',
          to: 'asset_to_transaction.id2'
        },
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true
  },
  transfers: {
    relation: {
      relation: external_objection_["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(40).Transfer;
      },

      join: {
        from: 'asset.id',
        to: 'transfer.asset_id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = require("react-dom/server");

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isPostgres; });
/* unused harmony export isMySql */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isSqlite; });
/* unused harmony export isMsSql */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isUniqueError; });
function getDialect(knex) {
  if (knex.client !== undefined && knex.client.dialect !== undefined) {
    return knex.client.dialect;
  }

  return undefined;
}

function isPostgres(knex) {
  return getDialect(knex) === 'postgresql';
}
function isMySql(knex) {
  return getDialect(knex) === 'mysql';
}
function isSqlite(knex) {
  return getDialect(knex) === 'sqlite3';
}
function isMsSql(knex) {
  return getDialect(knex) === 'mssql';
}
const PG_CONFLICT_ERROR_CODE = '23505';
const SQLITE_CONFLICT_ERROR_CODE = 'SQLITE_CONSTRAINT';
function isUniqueError(db, error) {
  if (isPostgres(db)) {
    return error.code === PG_CONFLICT_ERROR_CODE;
  }

  if (isSqlite(db)) {
    return error.code === SQLITE_CONFLICT_ERROR_CODE;
  }

  return false;
}

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PROCESSED_NEXT_INDEX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createPubSub; });
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(219);
/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__);



const PROCESSED_NEXT_INDEX = 'processed_next_index';

const createPGPubSub = ({
  options,
  channel,
  environment,
  monitor
}) => {
  const {
    maxAttempts = 5,
    reconnectTimeMS = 5000
  } = options;
  let connected = false;

  const createClient = () => new pg__WEBPACK_IMPORTED_MODULE_0__["Client"](Object.assign({}, environment, options.db === undefined || options.db.connection === undefined ? {} : options.db.connection));

  let client = createClient();

  const connectClient = async () => {
    if (!connected) {
      connected = true;

      try {
        await client.connect();
      } catch (error) {
        connected = false;
        throw error;
      }
    }
  };

  const closeClient = async () => {
    const currentClient = client;
    client = createClient();
    connected = false;

    try {
      currentClient.removeAllListeners();
      await currentClient.end();
    } catch (error) {
      monitor.logError({
        name: 'pg_pubsub_close_error',
        error
      });
    }
  };

  const doCloseClient = () => {
    closeClient().then(() => {// do nothing
    }).catch(() => {// do nothing
    });
  };

  const value$ = rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"].create(observer => {
    const listener = data => {
      observer.next(data.payload === undefined ? undefined : JSON.parse(data.payload));
    };

    let attempts = 0;

    const listen = async () => {
      try {
        await closeClient();
        await connectClient(); // tslint:disable-next-line no-any

        client.connection.stream.setKeepAlive(true);
        await client.query(`LISTEN ${channel};`);
        client.on('notification', listener);
        client.on('error', error => {
          monitor.logError({
            name: 'pg_pubsub_client_error',
            error
          });
          doListen();
        });
        client.on('end', () => {
          monitor.logError({
            name: 'pg_pubsub_client_end_error',
            error: new Error('Unexpected end')
          });
          doListen();
        });
        attempts = 0;
      } catch (error) {
        monitor.logError({
          name: 'pg_pubsub_error',
          error
        });

        if (attempts >= maxAttempts) {
          throw error;
        }

        attempts += 1;
        await new Promise(resolve => setTimeout(resolve, reconnectTimeMS));
        await listen();
      }
    };

    const doListen = () => {
      listen().then(() => {// do nothing
      }).catch(error => observer.error(error));
    };

    doListen();
    return () => {
      doCloseClient();
    };
  }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["share"])());
  return {
    next: async value => {
      await connectClient();
      await client.query('SELECT pg_notify($1, $2);', [channel, JSON.stringify(value)]);
    },
    value$,
    close: () => {
      doCloseClient();
    }
  };
};

const createPubSub = ({
  options,
  channel,
  environment,
  monitor
}) => {
  if (options.db !== undefined && options.db.client === 'pg') {
    return createPGPubSub({
      options,
      channel,
      environment,
      monitor
    });
  }

  const subject$ = new rxjs__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
  return {
    next: async value => {
      subject$.next(value);
    },
    value$: subject$,
    close: () => {// do nothing
    }
  };
};

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Block", function() { return Block; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _knexUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);





class Block extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_2__[/* BlockchainModel */ "a"] {
  static async insertAndReturn(db, queryContext, block) {
    if (Object(_knexUtils__WEBPACK_IMPORTED_MODULE_1__[/* isPostgres */ "a"])(db)) {
      return Block.query(db).context(queryContext).insert(block).returning('*').first().throwIfNotFound();
    }

    return Block.query(db).context(queryContext).insertAndFetch(block);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      system_fee: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_4__[/* convertJSON */ "a"])(json.system_fee),
      network_fee: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_4__[/* convertJSON */ "a"])(json.network_fee),
      aggregated_system_fee: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_4__[/* convertJSON */ "a"])(json.aggregated_system_fee)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.system_fee = Number(this.system_fee).toFixed(8); // @ts-ignore

    this.network_fee = Number(this.network_fee).toFixed(8); // @ts-ignore

    this.aggregated_system_fee = Number(this.aggregated_system_fee).toFixed(8); // tslint:enable no-object-mutation
  }

}
Block.modelName = 'Block';
Block.exposeGraphQL = true; // Home, BlockSearch

Block.idDesc = true;
Block.indices = [// Block
{
  type: 'order',
  columns: [{
    name: 'hash',
    order: 'asc'
  }],
  name: 'block_hash'
}];
Block.fieldSchema = {
  id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true,
    exposeGraphQL: true
  },
  hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* HASH_VALIDATOR */ "h"],
    required: true,
    exposeGraphQL: true
  },
  size: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  version: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  merkle_root: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* HASH_VALIDATOR */ "h"],
    required: true,
    exposeGraphQL: true
  },
  time: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* BLOCK_TIME_VALIDATOR */ "f"],
    required: true,
    exposeGraphQL: true
  },
  nonce: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* NONCE_VALIDATOR */ "l"],
    required: true,
    exposeGraphQL: true
  },
  validator_address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* ADDRESS_VALIDATOR */ "a"],
    exposeGraphQL: true
  },
  next_validator_address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* ADDRESS_VALIDATOR */ "a"],
    required: true,
    exposeGraphQL: true
  },
  invocation_script: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  verification_script: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  transaction_count: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  previous_block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    exposeGraphQL: true
  },
  previous_block_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true
  },
  next_block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    exposeGraphQL: true
  },
  next_block_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true
  },
  system_fee: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  network_fee: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  aggregated_system_fee: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  script: {
    type: {
      type: 'custom',
      graphqlType: 'Script!'
    },
    graphqlResolver: async obj => {
      if (obj.script != undefined) {
        return obj.script;
      }

      return {
        invocation_script: obj.invocation_script,
        verification_script: obj.verification_script
      };
    },
    required: true,
    exposeGraphQL: true,
    computed: true
  }
};
Block.edgeSchema = {
  transactions: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'block.id',
        to: 'transaction.block_id'
      }
    },
    exposeGraphQL: true
  },
  validator_address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'block.validator_address_id',
        to: 'address.id'
      }
    }
  },
  next_validator_address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'block.next_validator_address_id',
        to: 'address.id'
      }
    },
    required: true
  },
  previous_block: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(51).Block;
      },

      join: {
        from: 'block.previous_block_id',
        to: 'block.id'
      }
    }
  },
  next_block: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(51).Block;
      },

      join: {
        from: 'block.next_block_id',
        to: 'block.id'
      }
    }
  }
};

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = require("yargs");

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = require("graphql/type/definition");

/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = require("graphql/jsutils/isPromise");

/***/ }),
/* 55 */
/***/ (function(module, exports) {

module.exports = require("reselect");

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./packages/neotracker-server-utils/src/errors/CodedError.ts
var CodedError = __webpack_require__(101);

// EXTERNAL MODULE: external "change-case"
var external_change_case_ = __webpack_require__(27);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/lib/Base.ts + 1 modules
var Base = __webpack_require__(73);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/lib/IFace.ts
// tslint:disable-next-line no-unnecessary-class
class Node {}
Node.interfaceName = 'Node';
Node.graphqlFields = ['id'];
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/lib/BaseModel.ts




class BaseModel_BaseModel extends Base["a" /* Base */] {
  static getDataLoader(context) {
    const modelName = `${Object(external_change_case_["lcFirst"])(this.modelSchema.name)}`;
    return context.rootLoader.loaders[modelName];
  }

  static getDataLoaderByField(context, fieldName) {
    const modelName = Object(external_change_case_["lcFirst"])(this.modelSchema.name);
    return context.rootLoader.loadersByField[modelName][fieldName];
  }

  static getDataLoaderByEdge(context, edgeName) {
    const modelName = `${Object(external_change_case_["lcFirst"])(this.modelSchema.name)}`;
    return context.rootLoader.loadersByEdge[modelName][edgeName];
  } // tslint:disable no-any


  static observable$(_obj, _args, _context, _info) {
    throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
  } // tslint:enable no-any


  static get modelSchema() {
    if (this.mutableModelSchema === undefined) {
      this.mutableModelSchema = {
        tableName: this.tableName,
        name: this.modelName,
        pluralName: this.pluralName,
        id: 'id',
        fields: Object.assign({}, this.fieldSchema),
        edges: this.edgeSchema,
        exposeGraphQL: this.exposeGraphQL,
        exposeGraphQLType: this.exposeGraphQLType,
        interfaces: this.interfaces.concat([Node]),
        isEdge: false,
        indices: this.indices.concat([{
          type: 'order',
          columns: [{
            name: 'id',
            order: this.idDesc ? 'desc' : 'asc'
          }],
          unique: true,
          name: `${this.tableName}_id`
        }]),
        chainCustomBefore: this.chainCustomBefore,
        chainCustomAfter: this.chainCustomAfter
      };
    }

    return this.mutableModelSchema;
  }

  async afterGet(context) {
    this.getLoader(context).prime({
      id: this.id,
      monitor: context.monitor
    }, this);
  }

  async clearCache(context) {
    this.getLoader(context).clear({
      id: this.id,
      monitor: context.monitor
    });
  }

  getLoader(context) {
    return this.constructor.getDataLoader(context);
  }

  getLoaderByField(context, fieldName) {
    return this.constructor.getDataLoaderByField(context, fieldName);
  }

  getLoaderByEdge(context, edgeName) {
    return this.constructor.getDataLoaderByEdge(context, edgeName);
  }

}
BaseModel_BaseModel.edgeSchema = {};
BaseModel_BaseModel.exposeGraphQL = false;
BaseModel_BaseModel.exposeGraphQLType = true;
BaseModel_BaseModel.interfaces = [];
BaseModel_BaseModel.indices = [];
BaseModel_BaseModel.cacheType = 'none';
BaseModel_BaseModel.isModel = true;
BaseModel_BaseModel.idDesc = false;
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/BaseVisibleModel.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseVisibleModel_BaseVisibleModel; });

class BaseVisibleModel_BaseVisibleModel extends BaseModel_BaseModel {
  async canView(_context) {
    return true;
  }

}

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = require("react-jss");

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime");

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = require("koa-helmet");

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _routes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(85);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "routes", function() { return _routes__WEBPACK_IMPORTED_MODULE_0__; });








/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = require("react-loadable");

/***/ }),
/* 62 */
/***/ (function(module, exports) {

module.exports = require("safe-stable-stringify");

/***/ }),
/* 63 */,
/* 64 */,
/* 65 */
/***/ (function(module, exports) {

module.exports = require("tslib");

/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return Action; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);




const ACTION_TYPES = ['Log', 'Notification'];
class Action extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__[/* BlockchainModel */ "a"] {
  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, Action);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.id),
      transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.transaction_id)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.id); // @ts-ignore

    this.transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.transaction_id); // tslint:enable no-object-mutation
  }

}
Action.modelName = 'Action';
Action.exposeGraphQL = true;
Action.indices = [// TransactionActionPagingTable
{
  type: 'order',
  columns: [{
    name: 'transaction_id',
    order: 'desc'
  }, {
    name: 'index',
    order: 'asc'
  }],
  name: 'action_transaction_id_index',
  unique: true
}];
Action.fieldSchema = {
  id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    required: true,
    exposeGraphQL: true
  },
  type: {
    type: {
      type: 'string',
      enum: ACTION_TYPES
    },
    required: true,
    exposeGraphQL: true
  },
  block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    exposeGraphQL: true,
    required: true
  },
  transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    exposeGraphQL: true,
    required: true
  },
  transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true,
    required: true
  },
  transaction_index: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    exposeGraphQL: true,
    required: true
  },
  index: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    exposeGraphQL: true,
    required: true
  },
  script_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* CONTRACT_VALIDATOR */ "g"],
    exposeGraphQL: true,
    required: true
  },
  message: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  },
  args_raw: {
    type: {
      type: 'string'
    },
    exposeGraphQL: true
  }
};
Action.edgeSchema = {
  transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'action.transaction_id',
        to: 'transaction.id'
      }
    },
    required: true,
    exposeGraphQL: true
  },
  transfer: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(40).Transfer;
      },

      join: {
        from: 'action.id',
        to: 'transfer.id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Coin", function() { return Coin; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _knexUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);





class Coin extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_2__[/* BlockchainModel */ "a"] {
  static makeID({
    addressHash,
    assetHash
  }) {
    return [addressHash, assetHash].join('$');
  }

  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, Coin);
  }

  static async insertAndReturn(db, queryContext, block) {
    if (Object(_knexUtils__WEBPACK_IMPORTED_MODULE_1__[/* isPostgres */ "a"])(db)) {
      return Coin.query(db).context(queryContext).insert(block).returning('*').first().throwIfNotFound();
    }

    return Coin.query(db).context(queryContext).insertAndFetch(block);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      value: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_4__[/* convertJSON */ "a"])(json.value)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.value = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_4__[/* convertJSON */ "a"])(this.value); // tslint:enable no-object-mutation
  }

}
Coin.modelName = 'Coin';
Coin.indices = [// AssetAddressPagingView
{
  type: 'order',
  columns: [{
    name: 'asset_id',
    order: 'asc'
  }, {
    name: 'value',
    order: 'desc'
  }, {
    name: 'id',
    order: 'desc'
  }],
  name: 'coin_asset_id_value_id'
}, // AddressView, SendTransaction, AccountViewBase
{
  type: 'order',
  columns: [{
    name: 'address_id',
    order: 'asc'
  }],
  name: 'coin_address_id'
}];
Coin.fieldSchema = {
  id: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  address_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* ADDRESS_VALIDATOR */ "a"],
    required: true,
    exposeGraphQL: true
  },
  asset_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* ASSET_HASH_VALIDATOR */ "b"],
    required: true,
    exposeGraphQL: true
  },
  value: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  },
  block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_3__[/* BLOCK_ID_VALIDATOR */ "d"],
    required: true
  }
};
Coin.edgeSchema = {
  address: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(37).Address;
      },

      join: {
        from: 'coin.address_id',
        to: 'address.id'
      }
    },
    required: true,
    exposeGraphQL: true
  },
  asset: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(47).Asset;
      },

      join: {
        from: 'coin.asset_id',
        to: 'asset.id'
      }
    },
    required: true,
    exposeGraphQL: true
  }
};

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Contract", function() { return Contract; });
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var objection__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(objection__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(32);
/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(38);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);




class Contract extends _BlockchainModel__WEBPACK_IMPORTED_MODULE_1__[/* BlockchainModel */ "a"] {
  static async insertAll(db, context, data) {
    return this.insertAllBase(db, context, data, Contract);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      transaction_id: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(json.transaction_id),
      needs_storage: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSONBoolean */ "b"])(json.needs_storage)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.transaction_id = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSON */ "a"])(this.transaction_id); // @ts-ignore
    // tslint:disable-next-line no-redundant-boolean

    this.needs_storage = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_3__[/* convertJSONBoolean */ "b"])(this.needs_storage); // tslint:enable no-object-mutation
  }

}
Contract.modelName = 'Contract';
Contract.exposeGraphQL = true;
Contract.indices = [// ContractSearch
{
  type: 'order',
  columns: [{
    name: 'block_id',
    order: 'desc'
  }, {
    name: 'id',
    order: 'desc'
  }],
  name: 'contract_block_id_id'
}];
Contract.fieldSchema = {
  id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* CONTRACT_VALIDATOR */ "g"],
    exposeGraphQL: true,
    required: true
  },
  script: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  parameters_raw: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  return_type: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  needs_storage: {
    type: {
      type: 'boolean'
    },
    required: true,
    exposeGraphQL: true
  },
  name: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  version: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  author: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  email: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  description: {
    type: {
      type: 'string'
    },
    required: true,
    exposeGraphQL: true
  },
  transaction_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* BIG_INT_ID */ "c"],
    exposeGraphQL: true,
    required: true
  },
  transaction_hash: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* HASH_VALIDATOR */ "h"],
    exposeGraphQL: true,
    required: true
  },
  block_time: _common__WEBPACK_IMPORTED_MODULE_2__[/* BLOCK_TIME_COLUMN */ "e"],
  block_id: {
    type: _common__WEBPACK_IMPORTED_MODULE_2__[/* INTEGER_INDEX_VALIDATOR */ "i"],
    required: true
  },
  type: {
    type: {
      type: 'string',
      enum: [_common__WEBPACK_IMPORTED_MODULE_2__[/* NEP5_CONTRACT_TYPE */ "k"], _common__WEBPACK_IMPORTED_MODULE_2__[/* NEP5_BLACKLIST_CONTRACT_TYPE */ "j"], _common__WEBPACK_IMPORTED_MODULE_2__[/* UNKNOWN_CONTRACT_TYPE */ "t"]]
    },
    required: true,
    exposeGraphQL: true
  }
};
Contract.edgeSchema = {
  transaction: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].BelongsToOneRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(31).Transaction;
      },

      join: {
        from: 'contract.transaction_id',
        to: 'transaction.id'
      }
    },
    exposeGraphQL: true,
    required: true
  },
  transfers: {
    relation: {
      relation: objection__WEBPACK_IMPORTED_MODULE_0__["Model"].HasManyRelation,

      get modelClass() {
        // tslint:disable-next-line no-require-imports
        return __webpack_require__(40).Transfer;
      },

      join: {
        from: 'contract.id',
        to: 'transfer.contract_id'
      }
    },
    exposeGraphQL: true
  }
};

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressToTransfer", function() { return AddressToTransfer; });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


class AddressToTransfer extends _lib__WEBPACK_IMPORTED_MODULE_0__[/* BaseEdge */ "a"] {
  static get id1Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(37).Address;
  }

  static get id2Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(40).Transfer;
  }

  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, AddressToTransfer);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id2: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(json.id2)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id2 = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(this.id2); // tslint:enable no-object-mutation
  }

}
AddressToTransfer.modelName = 'AddressToTransfer';
AddressToTransfer.id2Desc = true;

/***/ }),
/* 70 */
/***/ (function(module, exports) {

module.exports = require("graphql");

/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = require("cross-fetch");

/***/ }),
/* 72 */
/***/ (function(module, exports) {

module.exports = require("koa-compress");

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./packages/neotracker-server-utils/src/errors/CodedError.ts
var CodedError = __webpack_require__(101);

// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/errors/ValidationError.ts

class ValidationError_ValidationError extends CodedError["a" /* CodedError */] {
  constructor(message) {
    super(CodedError["a" /* CodedError */].VALIDATION_ERROR, {
      message
    });
  }

}
// EXTERNAL MODULE: external "change-case"
var external_change_case_ = __webpack_require__(27);

// EXTERNAL MODULE: external "objection"
var external_objection_ = __webpack_require__(6);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/knexUtils.ts
var knexUtils = __webpack_require__(49);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/lib/common.ts
var common = __webpack_require__(217);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/lib/Base.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Base_Base; });





class Base_Base extends external_objection_["Model"] {
  static get pluralName() {
    return `${this.modelName}s`;
  }

  static get tableName() {
    if (this.mutableTableName === undefined) {
      this.mutableTableName = Object(external_change_case_["snakeCase"])(this.modelName);
    }

    return this.mutableTableName;
  }

  static get idColumn() {
    return this.modelSchema.id;
  }

  static get jsonSchema() {
    return Object(common["c" /* makeJSONSchema */])(this.modelSchema.fields);
  }

  static get relationMappings() {
    return Object(common["d" /* makeRelationMappings */])(this.modelSchema.edges);
  }

  static chainCustomBefore(schema) {
    return schema;
  }

  static chainCustomAfter(schema) {
    return schema;
  }

  static async insertAllBase(db, context, values, model, forceSingle = false) {
    if (forceSingle || !Object(knexUtils["a" /* isPostgres */])(db)) {
      await Promise.all(values.map(async value => model.query(db).context(context).insert(value).catch(error => {
        if (!Object(knexUtils["c" /* isUniqueError */])(db, error)) {
          throw error;
        }
      })));
    } else {
      await model.query(db).context(context).insert([...values]).catch(async error => {
        if (Object(knexUtils["c" /* isUniqueError */])(db, error)) {
          return this.insertAllBase(db, context, values, model, true);
        }

        throw error;
      });
    }
  }

  async $afterGet(context) {
    this.checkContext(context);

    if (context.type === 'normal') {
      await this.afterGet(context);
    }
  }

  async $beforeInsert(context) {
    this.checkContext(context);
    const results = await Promise.all([this.validateCreate(), context.type === 'normal' && !context.isAllPowerful ? this.checkCanCreate(context) : Promise.resolve()]);
    const validation = results[0];

    if (validation !== undefined) {
      throw new ValidationError_ValidationError(validation);
    }
  }

  async $afterInsert(context) {
    this.checkContext(context);

    if (context.type === 'normal') {
      await Promise.all([this.clearCache(context), this.afterInsert(context)]);
    }
  }

  async $beforeUpdate(options, context) {
    this.checkContext(context);
    const results = await Promise.all([this.validateEdit(options), context.type === 'normal' && !context.isAllPowerful ? this.checkCanEdit(context, options) : Promise.resolve()]);
    const validation = results[0];

    if (validation !== undefined) {
      throw new ValidationError_ValidationError(validation);
    }
  }

  async $afterUpdate(_options, context) {
    this.checkContext(context);

    if (context.type === 'normal') {
      await Promise.all([this.clearCache(context), this.afterUpdate(context)]);
    }
  }

  async $beforeDelete(context) {
    this.checkContext(context);

    if (context.type === 'normal' && !context.isAllPowerful) {
      await this.checkCanDelete(context);
    }
  }

  async $afterDelete(context) {
    this.checkContext(context);

    if (context.type === 'normal') {
      await Promise.all([this.clearCache(context), this.afterDelete(context)]);
    }
  }

  async canView(context) {
    return context.isAllPowerful;
  }

  async validateCreate() {
    return undefined;
  }

  async checkCanCreate(context) {
    this.checkPermission(context, context.isAllPowerful);
  } // eslint-disable-next-line


  async validateEdit(_options) {
    return undefined;
  }

  async checkCanEdit(context, _options) {
    this.checkPermission(context, context.isAllPowerful);
  }

  async checkCanDelete(context) {
    this.checkPermission(context, context.isAllPowerful);
  }

  async afterGet(_context) {// do nothing
  }

  async clearCache(_context) {// do nothing
  }

  async afterInsert(_context) {// do nothing
  }

  async afterUpdate(_context) {// do nothing
  }

  async afterDelete(_context) {// do nothing
  }

  checkPermission(_context, can) {
    if (!can) {
      throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PERMISSION_DENIED);
    }
  }

  checkContext(context) {
    if (context === undefined || context.type === undefined) {
      throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
    }
  }

}
Base_Base.pickJsonSchemaProperties = true; // tslint:disable-next-line readonly-array

Base_Base.jsonAttributes = [];

/***/ }),
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROOT", function() { return ROOT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOME", function() { return HOME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRAPHQL", function() { return GRAPHQL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLIENT", function() { return CLIENT; });
const ROOT = '/';
const HOME = '/';
const GRAPHQL = '/graphql-next';
const CLIENT = '/client-next';

/***/ }),
/* 86 */
/***/ (function(module, exports) {

module.exports = require("lru-cache");

/***/ }),
/* 87 */
/***/ (function(module, exports) {

module.exports = require("@neo-one/client-core");

/***/ }),
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */
/***/ (function(module, exports) {

module.exports = require("reakit");

/***/ }),
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export ErrorCode */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CodedError; });
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(336);

var ErrorCode;

(function (ErrorCode) {
  ErrorCode["GRAPHQL_QUERY_NOT_FOUND_ERROR"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["GRAPHQL_ERROR"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["INVALID_CSRF_TOKEN"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["NOT_FOUND_ERROR"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["PROGRAMMING_ERROR"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["INVALID_GRAPHQL_METHOD"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["INVALID_GRAPHQL_FIELDS_NULL"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["INVALID_GRAPHQL_FIELDS_ARRAY"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["INVALID_CLIENT_COLLECTOR_FIELDS_NULL"] = "Something went wrong. Report received was null or undefined.";
  ErrorCode["INVALID_CLIENT_COLLECTOR_FIELDS_OBJECT"] = "Something went wrong. Report received was not a JSON object.";
  ErrorCode["INVALID_DISCORD_ALERTER_FIELDS_NULL"] = "Something went wrong. Alert received was null or undefined.";
  ErrorCode["INVALID_DISCORD_ALERTER_FIELDS_OBJECT"] = "Something went wrong.  Alert received was not a JSON object.";
  ErrorCode["VALIDATION_ERROR"] = "Something went wrong. Try refreshing the page or going back to where you were.";
  ErrorCode["PERMISSION_DENIED"] = "You are not allowed to take that action.";
  ErrorCode["BAD_ACME_CHALLENGE_REQUEST"] = "Invalid request format.";
  ErrorCode["UNKNOWN_ACME_CHALLENGE_TOKEN"] = "Unknown token.";
  ErrorCode["MISSING_X_HUB_SIGNATURE"] = "Missing X-Hub Signature";
  ErrorCode["INVALID_X_HUB_SIGNATURE"] = "Invalid X-Hub Signature";
  ErrorCode["INVALID_GITHUB_FIELDS_NULL"] = "Invalid Payload";
  ErrorCode["INVALID_GITHUB_FIELDS_OBJECT"] = "Invalid Payload";
  ErrorCode["INVALID_GITHUB_EVENT"] = "Invalid Event";
})(ErrorCode || (ErrorCode = {}));

class CodedError extends _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__[/* ClientError */ "b"] {
  constructor(errorCode, options = {}) {
    super(options.message === undefined ? ErrorCode[errorCode] : options.message, options.originalError);
    this.code = errorCode;
  }

}
CodedError.GRAPHQL_QUERY_NOT_FOUND_ERROR = 'GRAPHQL_QUERY_NOT_FOUND_ERROR';
CodedError.GRAPHQL_ERROR = 'GRAPHQL_ERROR';
CodedError.INVALID_CSRF_TOKEN = 'INVALID_CSRF_TOKEN';
CodedError.NOT_FOUND_ERROR = 'NOT_FOUND_ERROR';
CodedError.PROGRAMMING_ERROR = 'PROGRAMMING_ERROR';
CodedError.INVALID_GRAPHQL_METHOD = 'INVALID_GRAPHQL_METHOD';
CodedError.INVALID_GRAPHQL_FIELDS_NULL = 'INVALID_GRAPHQL_FIELDS_NULL';
CodedError.INVALID_GRAPHQL_FIELDS_ARRAY = 'INVALID_GRAPHQL_FIELDS_ARRAY';
CodedError.INVALID_CLIENT_COLLECTOR_FIELDS_NULL = 'INVALID_CLIENT_COLLECTOR_FIELDS_NULL';
CodedError.INVALID_CLIENT_COLLECTOR_FIELDS_OBJECT = 'INVALID_CLIENT_COLLECTOR_FIELDS_OBJECT';
CodedError.INVALID_DISCORD_ALERTER_FIELDS_NULL = 'INVALID_DISCORD_ALERTER_FIELDS_NULL';
CodedError.INVALID_DISCORD_ALERTER_FIELDS_OBJECT = 'INVALID_DISCORD_ALERTER_FIELDS_OBJECT';
CodedError.VALIDATION_ERROR = 'VALIDATION_ERROR';
CodedError.PERMISSION_DENIED = 'PERMISSION_DENIED';
CodedError.BAD_ACME_CHALLENGE_REQUEST = 'BAD_ACME_CHALLENGE_REQUEST';
CodedError.UNKNOWN_ACME_CHALLENGE_TOKEN = 'UNKNOWN_ACME_CHALLENGE_TOKEN';
CodedError.MISSING_X_HUB_SIGNATURE = 'MISSING_X_HUB_SIGNATURE';
CodedError.INVALID_X_HUB_SIGNATURE = 'INVALID_X_HUB_SIGNATURE';
CodedError.INVALID_GITHUB_FIELDS_NULL = 'INVALID_GITHUB_FIELDS_NULL';
CodedError.INVALID_GITHUB_FIELDS_OBJECT = 'INVALID_GITHUB_FIELDS_OBJECT';
CodedError.INVALID_GITHUB_EVENT = 'INVALID_GITHUB_EVENT';

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return calculateClaimValueBase; });
/* harmony import */ var _neo_one_client_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87);
/* harmony import */ var _neo_one_client_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_neo_one_client_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(116);
/* harmony import */ var _neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(366);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(222);
/* harmony import */ var bn_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_4__);






const bigNumberToBN = value => new bn_js__WEBPACK_IMPORTED_MODULE_4__["BN"](value.times(_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__[/* numbers */ "a"].D).toString(10), 10);

const bnToBigNumber = value => new bignumber_js__WEBPACK_IMPORTED_MODULE_3___default.a(value.toString(10)).div(_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__[/* numbers */ "a"].D);

const calculateClaimValueBase = async ({
  getSystemFee,
  coins
}) => {
  const result = await _neo_one_client_core__WEBPACK_IMPORTED_MODULE_0__["utils"].calculateClaimAmount({
    coins: coins.map(coin => ({
      value: bigNumberToBN(coin.value),
      startHeight: coin.startHeight,
      endHeight: coin.endHeight
    })),
    decrementInterval: Object(_neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_1__["main"])().decrementInterval,
    generationAmount: Object(_neo_one_node_neo_settings__WEBPACK_IMPORTED_MODULE_1__["main"])().generationAmount,
    getSystemFee: async index => getSystemFee(index).then(bigNumberToBN)
  });
  return bnToBigNumber(result);
};

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AddressToTransaction", function() { return AddressToTransaction; });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


class AddressToTransaction extends _lib__WEBPACK_IMPORTED_MODULE_0__[/* BaseEdge */ "a"] {
  static get id1Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(37).Address;
  }

  static get id2Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(31).Transaction;
  }

  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, AddressToTransaction);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id2: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(json.id2)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id2 = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(this.id2); // tslint:enable no-object-mutation
  }

}
AddressToTransaction.modelName = 'AddressToTransaction';
AddressToTransaction.id2Desc = true;

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AssetToTransaction", function() { return AssetToTransaction; });
/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(125);
/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


class AssetToTransaction extends _lib__WEBPACK_IMPORTED_MODULE_0__[/* BaseEdge */ "a"] {
  static get id1Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(47).Asset;
  }

  static get id2Type() {
    // tslint:disable-next-line no-require-imports
    return __webpack_require__(31).Transaction;
  }

  static async insertAll(db, context, values) {
    return this.insertAllBase(db, context, values, AssetToTransaction);
  }

  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      id2: Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(json.id2)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.id2 = Object(_convertJSON__WEBPACK_IMPORTED_MODULE_1__[/* convertJSON */ "a"])(this.id2); // tslint:enable no-object-mutation
  }

}
AssetToTransaction.modelName = 'AssetToTransaction';
AssetToTransaction.id2Desc = true;

/***/ }),
/* 105 */
/***/ (function(module, exports) {

module.exports = require("graphql/error");

/***/ }),
/* 106 */
/***/ (function(module, exports) {

module.exports = require("graphql/jsutils/invariant");

/***/ }),
/* 107 */
/***/ (function(module, exports) {

module.exports = require("styled-components");

/***/ }),
/* 108 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/styles/createGenerateClassName");

/***/ }),
/* 109 */
/***/ (function(module, exports) {

module.exports = require("jss");

/***/ }),
/* 110 */
/***/ (function(module, exports) {

module.exports = require("jss-preset-default");

/***/ }),
/* 111 */
/***/ (function(module, exports) {

module.exports = require("toobusy-js");

/***/ }),
/* 112 */
/***/ (function(module, exports) {

module.exports = require("koa-convert");

/***/ }),
/* 113 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 114 */
/***/ (function(module, exports) {

module.exports = require("react-router-config");

/***/ }),
/* 115 */
/***/ (function(module, exports) {

module.exports = require("uuid/v4");

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = require("@neo-one/node-neo-settings");

/***/ }),
/* 117 */
/***/ (function(module, exports) {

module.exports = require("graphql/language");

/***/ }),
/* 118 */
/***/ (function(module, exports) {

module.exports = require("iterall");

/***/ }),
/* 119 */
/***/ (function(module, exports) {

module.exports = require("apollo-link");

/***/ }),
/* 120 */
/***/ (function(module, exports) {

module.exports = require("redux");

/***/ }),
/* 121 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/deepPurple");

/***/ }),
/* 122 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/red");

/***/ }),
/* 123 */
/***/ (function(module, exports) {

module.exports = require("crypto");

/***/ }),
/* 124 */
/***/ (function(module, exports) {

module.exports = require("ws");

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseEdge; });
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73);

class BaseEdge extends _Base__WEBPACK_IMPORTED_MODULE_0__[/* Base */ "a"] {
  static get modelSchema() {
    return {
      tableName: this.tableName,
      name: this.modelName,
      pluralName: this.pluralName,
      id: ['id1', 'id2'],
      fields: {
        id1: {
          type: this.id1Type.modelSchema.fields.id.type,
          required: true
        },
        id2: {
          type: this.id2Type.modelSchema.fields.id.type,
          required: true
        }
      },
      interfaces: [],
      isEdge: true,
      indices: [{
        type: 'order',
        columns: [{
          name: 'id1',
          order: 'asc'
        }, {
          name: 'id2',
          order: this.id2Desc ? 'desc' : 'asc'
        }],
        unique: true,
        name: `${this.tableName}_id1_id2`
      }, ...this.indices],
      chainCustomBefore: this.chainCustomBefore,
      chainCustomAfter: this.chainCustomAfter,
      materializedView: this.materializedView === undefined ? undefined : this.materializedView
    };
  }

}
BaseEdge.id2Desc = false;
BaseEdge.indices = [];

/***/ }),
/* 126 */
/***/ (function(module, exports) {

module.exports = require("apollo-client");

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AppContextProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return WithAppContext; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
 // tslint:disable-next-line no-any

const WithAppContextBase = react__WEBPACK_IMPORTED_MODULE_0__["createContext"](undefined);
const AppContextProvider = WithAppContextBase.Provider;
const WithAppContext = WithAppContextBase.Consumer;

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FromStream; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
 // tslint:disable-next-line no-null-keyword

const initialValue = Symbol.for('initialValue');
/**
 * Renders a stream of `Observable` data.
 *
 * The `props$` `Observable` is immediately subscribed on mount so the first render will include any data the observable immediately resolves with. This can be used to render a loading state in combination with `concat` and `of`. See example below.
 *
 * @example
 * import { concat, defer, of as _of } from 'rxjs';
 *
 * <FromStream
 *  props$={concat(
 *    _of(undefined),
 *    defer(async () => loadData()),
 *  )}
 * >
 *  {(data) => data === undefined
 *    ? <Loading />
 *    : <Component data={data} />}
 * </FromStream>
 */

class FromStream extends react__WEBPACK_IMPORTED_MODULE_0__["Component"] {
  constructor(props) {
    super(props);
    this.mutableMounted = false;
    this.state = {
      value: initialValue
    };
    this.subscribe();
    this.mutableMounted = true;
  }

  componentWillUnmount() {
    this.mutableMounted = false;
    this.unsubscribe();
  }

  componentDidUpdate(prevProps) {
    if (this.props.props$ !== prevProps.props$) {
      this.subscribe();
    }
  }

  render() {
    const {
      value
    } = this.state;

    if (value === initialValue) {
      // tslint:disable-next-line no-null-keyword
      return null;
    }

    return this.props.children(value);
  }

  subscribe() {
    this.unsubscribe();
    let stateSet = false;
    this.mutableSubscription = this.props.props$.subscribe({
      next: value => {
        stateSet = true;

        this._setValue(value);
      }
    });

    if (!stateSet) {
      this._setValue(initialValue);
    }
  }

  _setValue(value) {
    if (this.mutableMounted) {
      this.setState(() => ({
        value
      }));
    } else {
      // tslint:disable-next-line no-object-mutation
      this.state = {
        value
      };
    }
  }

  unsubscribe() {
    if (this.mutableSubscription !== undefined) {
      this.mutableSubscription.unsubscribe();
      this.mutableSubscription = undefined;
    }
  }

}

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type BlockTable_blocks$ref: FragmentReference;
export type BlockTable_blocks = $ReadOnlyArray<{|
  +id: string,
  +time: number,
  +transaction_count: number,
  +validator_address_id: ?string,
  +size: number,
  +$refType: BlockTable_blocks$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "BlockTable_blocks",
  "type": "Block",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "validator_address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "size",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'fd69e0df7270a37b71222ff2d6a3011f';
module.exports = node;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionHeaderBackground_transaction$ref: FragmentReference;
export type TransactionHeaderBackground_transaction = {|
  +type: string,
  +$refType: TransactionHeaderBackground_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionHeaderBackground_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '326fb3e339b14cad16630d57a0a4ef07';
module.exports = node;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionTypeAndLink_transaction$ref: FragmentReference;
export type TransactionTypeAndLink_transaction = {|
  +type: string,
  +hash: string,
  +$refType: TransactionTypeAndLink_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionTypeAndLink_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '97c14a8c89b675143ae5191806361821';
module.exports = node;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionHeaderBackground_transaction$ref = any;
type TransactionTypeAndLink_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionSummaryHeader_transaction$ref: FragmentReference;
export type TransactionSummaryHeader_transaction = {|
  +type: string,
  +block_time: number,
  +$fragmentRefs: TransactionHeaderBackground_transaction$ref & TransactionTypeAndLink_transaction$ref,
  +$refType: TransactionSummaryHeader_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionSummaryHeader_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionHeaderBackground_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionTypeAndLink_transaction",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '813c539ce522231abe530c052c5cd8ca';
module.exports = node;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetNameLink_asset$ref: FragmentReference;
export type AssetNameLink_asset = {|
  +id: string,
  +symbol: string,
  +$refType: AssetNameLink_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetNameLink_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "symbol",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '5444e77732d825ff725a0e4a80c444c2';
module.exports = node;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetNameLink_asset$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionInputOutputTable_input_outputs$ref: FragmentReference;
export type TransactionInputOutputTable_input_outputs = $ReadOnlyArray<{|
  +address_id: string,
  +value: string,
  +asset: {|
    +$fragmentRefs: AssetNameLink_asset$ref
  |},
  +$refType: TransactionInputOutputTable_input_outputs$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionInputOutputTable_input_outputs",
  "type": "TransactionInputOutput",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "AssetNameLink_asset",
      "args": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '0fe11ffc0199525fa0b56f21ba91937f';
module.exports = node;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionInputOutputTable_input_outputs$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionInputTable_inputs$ref: FragmentReference;
export type TransactionInputTable_inputs = $ReadOnlyArray<{|
  +output_transaction_hash: string,
  +$fragmentRefs: TransactionInputOutputTable_input_outputs$ref,
  +$refType: TransactionInputTable_inputs$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionInputTable_inputs",
  "type": "TransactionInputOutput",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputOutputTable_input_outputs",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "output_transaction_hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '77c9a799e6e654743a799976b4ca639c';
module.exports = node;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionInputPagingTable_transaction$ref: FragmentReference;
export type TransactionInputPagingTable_transaction = {|
  +hash: string,
  +$refType: TransactionInputPagingTable_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionInputPagingTable_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '5b1170b2a126b4a955bbb4bc01a13d1f';
module.exports = node;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash d7585436aeb3a02b036f171933aa5010
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionInputTable_inputs$ref = any;
export type TransactionInputPagingTableQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type TransactionInputPagingTableQueryResponse = {|
  +transaction: ?{|
    +inputs: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionInputTable_inputs$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |}
  |}
|};
export type TransactionInputPagingTableQuery = {|
  variables: TransactionInputPagingTableQueryVariables,
  response: TransactionInputPagingTableQueryResponse,
|};
*/

/*
query TransactionInputPagingTableQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  transaction(hash: $hash) {
    inputs(first: $first, after: $after, orderBy: [{name: "transaction_input_output.output_transaction_index", direction: "asc"}]) {
      edges {
        node {
          ...TransactionInputTable_inputs
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
    id
  }
}

fragment TransactionInputTable_inputs on TransactionInputOutput {
  ...TransactionInputOutputTable_input_outputs
  output_transaction_hash
}

fragment TransactionInputOutputTable_input_outputs on TransactionInputOutput {
  address_id
  value
  asset {
    ...AssetNameLink_asset
    id
  }
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "asc",
      "name": "transaction_input_output.output_transaction_index"
    }],
    "type": "[OrderByInput!]"
  }],
      v3 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  },
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionInputPagingTableQuery",
    "id": "9",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionInputPagingTableQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "inputs",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToInputsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToInputsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionInputTable_inputs",
                "args": null
              }]
            }]
          }, v3]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionInputPagingTableQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "inputs",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToInputsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToInputsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "ScalarField",
                "alias": null,
                "name": "address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v4, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "output_transaction_hash",
                "args": null,
                "storageKey": null
              }, v4]
            }]
          }, v3]
        }, v4]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '3eb64677838705104a30aa1c4d0bc091';
module.exports = node;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionInputOutputTable_input_outputs$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionOutputTable_outputs$ref: FragmentReference;
export type TransactionOutputTable_outputs = $ReadOnlyArray<{|
  +input_transaction_hash: ?string,
  +$fragmentRefs: TransactionInputOutputTable_input_outputs$ref,
  +$refType: TransactionOutputTable_outputs$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionOutputTable_outputs",
  "type": "TransactionInputOutput",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputOutputTable_input_outputs",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "input_transaction_hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '4cfd8e09640f506a827b2d643417568a';
module.exports = node;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionOutputPagingTable_transaction$ref: FragmentReference;
export type TransactionOutputPagingTable_transaction = {|
  +hash: string,
  +$refType: TransactionOutputPagingTable_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionOutputPagingTable_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'eba61772201449d726f3eb16f6b6a619';
module.exports = node;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 9528584648a4cbb92efe891f63db1a94
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionOutputTable_outputs$ref = any;
export type TransactionOutputPagingTableQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type TransactionOutputPagingTableQueryResponse = {|
  +transaction: ?{|
    +outputs: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionOutputTable_outputs$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |}
  |}
|};
export type TransactionOutputPagingTableQuery = {|
  variables: TransactionOutputPagingTableQueryVariables,
  response: TransactionOutputPagingTableQueryResponse,
|};
*/

/*
query TransactionOutputPagingTableQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  transaction(hash: $hash) {
    outputs(first: $first, after: $after, orderBy: [{name: "transaction_input_output.output_transaction_index", direction: "ASC NULLS LAST"}]) {
      edges {
        node {
          ...TransactionOutputTable_outputs
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
    id
  }
}

fragment TransactionOutputTable_outputs on TransactionInputOutput {
  ...TransactionInputOutputTable_input_outputs
  input_transaction_hash
}

fragment TransactionInputOutputTable_input_outputs on TransactionInputOutput {
  address_id
  value
  asset {
    ...AssetNameLink_asset
    id
  }
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "ASC NULLS LAST",
      "name": "transaction_input_output.output_transaction_index"
    }],
    "type": "[OrderByInput!]"
  }],
      v3 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  },
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionOutputPagingTableQuery",
    "id": "23",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionOutputPagingTableQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "outputs",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToOutputsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToOutputsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionOutputTable_outputs",
                "args": null
              }]
            }]
          }, v3]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionOutputPagingTableQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "outputs",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToOutputsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToOutputsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "ScalarField",
                "alias": null,
                "name": "address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v4, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "input_transaction_hash",
                "args": null,
                "storageKey": null
              }, v4]
            }]
          }, v3]
        }, v4]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '2805848e4f4b51f3b9d4e1ee0e9610c1';
module.exports = node;

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionInputPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionInputOutputSummaryBody_transaction$ref: FragmentReference;
export type TransactionInputOutputSummaryBody_transaction = {|
  +$fragmentRefs: TransactionInputPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionInputOutputSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionInputOutputSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '9be699b1d67f1531bc3c37650a8e691a';
module.exports = node;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionClaimPagingTable_transaction$ref: FragmentReference;
export type TransactionClaimPagingTable_transaction = {|
  +hash: string,
  +$refType: TransactionClaimPagingTable_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionClaimPagingTable_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '4df5fd8ad4c4c0ca5743ff1238b554cb';
module.exports = node;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash ec26773bd95c04fe2c4c9629324b9566
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionInputTable_inputs$ref = any;
export type TransactionClaimPagingTableQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type TransactionClaimPagingTableQueryResponse = {|
  +transaction: ?{|
    +claims: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionInputTable_inputs$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |}
  |}
|};
export type TransactionClaimPagingTableQuery = {|
  variables: TransactionClaimPagingTableQueryVariables,
  response: TransactionClaimPagingTableQueryResponse,
|};
*/

/*
query TransactionClaimPagingTableQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  transaction(hash: $hash) {
    claims(first: $first, after: $after, orderBy: [{name: "transaction_input_output.output_transaction_index", direction: "ASC NULLS LAST"}]) {
      edges {
        node {
          ...TransactionInputTable_inputs
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
    id
  }
}

fragment TransactionInputTable_inputs on TransactionInputOutput {
  ...TransactionInputOutputTable_input_outputs
  output_transaction_hash
}

fragment TransactionInputOutputTable_input_outputs on TransactionInputOutput {
  address_id
  value
  asset {
    ...AssetNameLink_asset
    id
  }
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "ASC NULLS LAST",
      "name": "transaction_input_output.output_transaction_index"
    }],
    "type": "[OrderByInput!]"
  }],
      v3 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  },
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionClaimPagingTableQuery",
    "id": "20",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionClaimPagingTableQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "claims",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToClaimsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToClaimsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionInputTable_inputs",
                "args": null
              }]
            }]
          }, v3]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionClaimPagingTableQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "claims",
          "storageKey": null,
          "args": v2,
          "concreteType": "TransactionToClaimsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToClaimsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "TransactionInputOutput",
              "plural": false,
              "selections": [{
                "kind": "ScalarField",
                "alias": null,
                "name": "address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v4, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "output_transaction_hash",
                "args": null,
                "storageKey": null
              }, v4]
            }]
          }, v3]
        }, v4]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'ae692659f055939aaf59816b7d68ccd6';
module.exports = node;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionClaimPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionClaimSummaryBody_transaction$ref: FragmentReference;
export type TransactionClaimSummaryBody_transaction = {|
  +$fragmentRefs: TransactionClaimPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionClaimSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionClaimSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionClaimPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c65b915902095c38085099160b24503d';
module.exports = node;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionInputPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionEnrollmentSummaryBody_transaction$ref: FragmentReference;
export type TransactionEnrollmentSummaryBody_transaction = {|
  +enrollment: ?{|
    +address: {|
      +id: string
    |}
  |},
  +$fragmentRefs: TransactionInputPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionEnrollmentSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionEnrollmentSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "enrollment",
    "storageKey": null,
    "args": null,
    "concreteType": "TransactionInputOutput",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "address",
      "storageKey": null,
      "args": null,
      "concreteType": "Address",
      "plural": false,
      "selections": [{
        "kind": "ScalarField",
        "alias": null,
        "name": "id",
        "args": null,
        "storageKey": null
      }]
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '558bcfd30dd431ca65dc96a7dc758689';
module.exports = node;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetNameLink_asset$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetRegistered_asset$ref: FragmentReference;
export type AssetRegistered_asset = {|
  +$fragmentRefs: AssetNameLink_asset$ref,
  +$refType: AssetRegistered_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetRegistered_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AssetNameLink_asset",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'aa48c64c28da38d3fcad59bb56d25c64';
module.exports = node;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetRegistered_asset$ref = any;
type TransactionInputPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionRegisterSummaryBody_transaction$ref: FragmentReference;
export type TransactionRegisterSummaryBody_transaction = {|
  +asset: ?{|
    +$fragmentRefs: AssetRegistered_asset$ref
  |},
  +$fragmentRefs: TransactionInputPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionRegisterSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionRegisterSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "AssetRegistered_asset",
      "args": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '9d01c6a770ee91979f8ab193881a7edb';
module.exports = node;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractNameLink_contract$ref: FragmentReference;
export type ContractNameLink_contract = {|
  +id: string,
  +name: string,
  +$refType: ContractNameLink_contract$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractNameLink_contract",
  "type": "Contract",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "name",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'a09ac64a1862c40345d2222171236317';
module.exports = node;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type ContractNameLink_contract$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractPublished_contract$ref: FragmentReference;
export type ContractPublished_contract = {|
  +$fragmentRefs: ContractNameLink_contract$ref,
  +$refType: ContractPublished_contract$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractPublished_contract",
  "type": "Contract",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "ContractNameLink_contract",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'df08967a4a1bcacf28431844879c816c';
module.exports = node;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type ContractPublished_contract$ref = any;
type TransactionInputPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionPublishSummaryBody_transaction$ref: FragmentReference;
export type TransactionPublishSummaryBody_transaction = {|
  +contracts: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: ContractPublished_contract$ref
      |}
    |}>
  |},
  +$fragmentRefs: TransactionInputPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionPublishSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionPublishSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "contracts",
    "storageKey": null,
    "args": null,
    "concreteType": "TransactionToContractsConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "TransactionToContractsEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Contract",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "ContractPublished_contract",
          "args": null
        }]
      }]
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'b51519ca376b607f2cd6012051e1023d';
module.exports = node;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetNameLink_asset$ref = any;
type AssetRegistered_asset$ref = any;
type ContractPublished_contract$ref = any;
type TransactionInputPagingTable_transaction$ref = any;
type TransactionOutputPagingTable_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionInvocationSummaryBody_transaction$ref: FragmentReference;
export type TransactionInvocationSummaryBody_transaction = {|
  +asset: ?{|
    +$fragmentRefs: AssetRegistered_asset$ref
  |},
  +transfers: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +asset: {|
          +$fragmentRefs: AssetNameLink_asset$ref
        |},
        +from_address_id: ?string,
        +to_address_id: ?string,
        +value: string,
      |}
    |}>
  |},
  +contracts: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +id: string,
        +$fragmentRefs: ContractPublished_contract$ref,
      |}
    |}>
  |},
  +$fragmentRefs: TransactionInputPagingTable_transaction$ref & TransactionOutputPagingTable_transaction$ref,
  +$refType: TransactionInvocationSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionInvocationSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionInputPagingTable_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionOutputPagingTable_transaction",
    "args": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "AssetRegistered_asset",
      "args": null
    }]
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "transfers",
    "storageKey": null,
    "args": null,
    "concreteType": "TransactionToTransfersConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "TransactionToTransfersEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Transfer",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "asset",
          "storageKey": null,
          "args": null,
          "concreteType": "Asset",
          "plural": false,
          "selections": [{
            "kind": "FragmentSpread",
            "name": "AssetNameLink_asset",
            "args": null
          }]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "from_address_id",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "to_address_id",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "value",
          "args": null,
          "storageKey": null
        }]
      }]
    }]
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "contracts",
    "storageKey": null,
    "args": null,
    "concreteType": "TransactionToContractsConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "TransactionToContractsEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Contract",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "id",
          "args": null,
          "storageKey": null
        }, {
          "kind": "FragmentSpread",
          "name": "ContractPublished_contract",
          "args": null
        }]
      }]
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '8a9f371f7911368cc5e6019afa3b0d9c';
module.exports = node;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionClaimSummaryBody_transaction$ref = any;
type TransactionEnrollmentSummaryBody_transaction$ref = any;
type TransactionInputOutputSummaryBody_transaction$ref = any;
type TransactionInvocationSummaryBody_transaction$ref = any;
type TransactionPublishSummaryBody_transaction$ref = any;
type TransactionRegisterSummaryBody_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionSummaryBody_transaction$ref: FragmentReference;
export type TransactionSummaryBody_transaction = {|
  +type: string,
  +$fragmentRefs: TransactionClaimSummaryBody_transaction$ref & TransactionEnrollmentSummaryBody_transaction$ref & TransactionInputOutputSummaryBody_transaction$ref & TransactionPublishSummaryBody_transaction$ref & TransactionRegisterSummaryBody_transaction$ref & TransactionInvocationSummaryBody_transaction$ref,
  +$refType: TransactionSummaryBody_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionSummaryBody_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionClaimSummaryBody_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionEnrollmentSummaryBody_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionInputOutputSummaryBody_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionPublishSummaryBody_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionRegisterSummaryBody_transaction",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionInvocationSummaryBody_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '0b33975e599bd1f4d39801a32eb742a6';
module.exports = node;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionSummaryFooter_transaction$ref: FragmentReference;
export type TransactionSummaryFooter_transaction = {|
  +network_fee: string,
  +system_fee: string,
  +$refType: TransactionSummaryFooter_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionSummaryFooter_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "network_fee",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "system_fee",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '5f9b9145461883eafbb8b380b7ef3d40';
module.exports = node;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 4826a79cfc3f3c297db30cf0c1a13fd8
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionSummaryBody_transaction$ref = any;
type TransactionSummaryFooter_transaction$ref = any;
export type TransactionSummaryBodyFooterQueryVariables = {|
  hash: string
|};
export type TransactionSummaryBodyFooterQueryResponse = {|
  +transaction: ?{|
    +$fragmentRefs: TransactionSummaryBody_transaction$ref & TransactionSummaryFooter_transaction$ref
  |}
|};
export type TransactionSummaryBodyFooterQuery = {|
  variables: TransactionSummaryBodyFooterQueryVariables,
  response: TransactionSummaryBodyFooterQueryResponse,
|};
*/

/*
query TransactionSummaryBodyFooterQuery(
  $hash: String!
) {
  transaction(hash: $hash) {
    ...TransactionSummaryBody_transaction
    ...TransactionSummaryFooter_transaction
    id
  }
}

fragment TransactionSummaryBody_transaction on Transaction {
  type
  ...TransactionClaimSummaryBody_transaction
  ...TransactionEnrollmentSummaryBody_transaction
  ...TransactionInputOutputSummaryBody_transaction
  ...TransactionPublishSummaryBody_transaction
  ...TransactionRegisterSummaryBody_transaction
  ...TransactionInvocationSummaryBody_transaction
}

fragment TransactionSummaryFooter_transaction on Transaction {
  network_fee
  system_fee
}

fragment TransactionClaimSummaryBody_transaction on Transaction {
  ...TransactionClaimPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
}

fragment TransactionEnrollmentSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  enrollment {
    address {
      id
    }
    id
  }
}

fragment TransactionInputOutputSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
}

fragment TransactionPublishSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  contracts {
    edges {
      node {
        ...ContractPublished_contract
        id
      }
    }
  }
}

fragment TransactionRegisterSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  asset {
    ...AssetRegistered_asset
    id
  }
}

fragment TransactionInvocationSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  asset {
    ...AssetRegistered_asset
    id
  }
  transfers {
    edges {
      node {
        asset {
          ...AssetNameLink_asset
          id
        }
        from_address_id
        to_address_id
        value
        id
      }
    }
  }
  contracts {
    edges {
      node {
        id
        ...ContractPublished_contract
      }
    }
  }
}

fragment TransactionInputPagingTable_transaction on Transaction {
  hash
}

fragment TransactionOutputPagingTable_transaction on Transaction {
  hash
}

fragment AssetRegistered_asset on Asset {
  ...AssetNameLink_asset
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}

fragment ContractPublished_contract on Contract {
  ...ContractNameLink_contract
}

fragment ContractNameLink_contract on Contract {
  id
  name
}

fragment TransactionClaimPagingTable_transaction on Transaction {
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [v2, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionSummaryBodyFooterQuery",
    "id": "44",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionSummaryBodyFooterQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "TransactionSummaryBody_transaction",
          "args": null
        }, {
          "kind": "FragmentSpread",
          "name": "TransactionSummaryFooter_transaction",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionSummaryBodyFooterQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "type",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "hash",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "enrollment",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionInputOutput",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "address",
            "storageKey": null,
            "args": null,
            "concreteType": "Address",
            "plural": false,
            "selections": [v2]
          }, v2]
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "contracts",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionToContractsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToContractsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Contract",
              "plural": false,
              "selections": [v2, {
                "kind": "ScalarField",
                "alias": null,
                "name": "name",
                "args": null,
                "storageKey": null
              }]
            }]
          }]
        }, v3, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [v3, {
                "kind": "ScalarField",
                "alias": null,
                "name": "from_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "to_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, v2]
            }]
          }]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "network_fee",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "system_fee",
          "args": null,
          "storageKey": null
        }, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '5e11168484db2040d88f15e42103bcc6';
module.exports = node;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionSummaryHeader_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionSummary_transaction$ref: FragmentReference;
export type TransactionSummary_transaction = {|
  +hash: string,
  +$fragmentRefs: TransactionSummaryHeader_transaction$ref,
  +$refType: TransactionSummary_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionSummary_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionSummaryHeader_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '2181b2932df1a1aa8462c2e0cda103d4';
module.exports = node;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionSummary_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionTable_transactions$ref: FragmentReference;
export type TransactionTable_transactions = $ReadOnlyArray<{|
  +id: string,
  +$fragmentRefs: TransactionSummary_transaction$ref,
  +$refType: TransactionTable_transactions$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionTable_transactions",
  "type": "Transaction",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionSummary_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '3480e90d25a902ba3bea06d783e3c885';
module.exports = node;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 8183a8da3d06b2401500a2fa97bde4fe
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type BlockTable_blocks$ref = any;
type MarketCard_neo_btc_data_points$ref = any;
type MarketCard_neo_current_price$ref = any;
type MarketCard_neo_usd_data_points$ref = any;
type TransactionTable_transactions$ref = any;
export type HomeQueryVariables = {||};
export type HomeQueryResponse = {|
  +blocks: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: BlockTable_blocks$ref
      |}
    |}>
  |},
  +transactions: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: TransactionTable_transactions$ref
      |}
    |}>
  |},
  +neo_btc_data_points: $ReadOnlyArray<{|
    +$fragmentRefs: MarketCard_neo_btc_data_points$ref
  |}>,
  +neo_usd_data_points: $ReadOnlyArray<{|
    +$fragmentRefs: MarketCard_neo_usd_data_points$ref
  |}>,
  +neo_current_price: ?{|
    +$fragmentRefs: MarketCard_neo_current_price$ref
  |},
|};
export type HomeQuery = {|
  variables: HomeQueryVariables,
  response: HomeQueryResponse,
|};
*/

/*
query HomeQuery {
  blocks(orderBy: [{name: "block.id", direction: "desc"}], first: 16) {
    edges {
      node {
        ...BlockTable_blocks
        id
      }
    }
  }
  transactions(orderBy: [{name: "transaction.id", direction: "desc"}], filters: [{name: "transaction.type", operator: "!=", value: "MinerTransaction"}], first: 20) {
    edges {
      node {
        ...TransactionTable_transactions
        id
      }
    }
  }
  neo_btc_data_points: prices(from: "NEO", to: "BTC") {
    ...MarketCard_neo_btc_data_points
    id
  }
  neo_usd_data_points: prices(from: "NEO", to: "USD") {
    ...MarketCard_neo_usd_data_points
    id
  }
  neo_current_price: current_price(sym: "NEO") {
    ...MarketCard_neo_current_price
    id
  }
}

fragment BlockTable_blocks on Block {
  id
  time
  transaction_count
  validator_address_id
  size
}

fragment TransactionTable_transactions on Transaction {
  id
  ...TransactionSummary_transaction
}

fragment MarketCard_neo_btc_data_points on DataPoint {
  ...TokenMarket_pair_data_points
}

fragment MarketCard_neo_usd_data_points on DataPoint {
  ...TokenMarket_usd_data_points
}

fragment MarketCard_neo_current_price on CurrentPrice {
  ...TokenMarket_current_price
}

fragment TokenMarket_current_price on CurrentPrice {
  ...DayPrice_current_price
}

fragment DayPrice_current_price on CurrentPrice {
  price_usd
  percent_change_24h
  volume_usd_24h
  market_cap_usd
  last_updated
}

fragment TokenMarket_usd_data_points on DataPoint {
  ...BTCPriceChart_usd_data_points
  ...CNYPriceChart_usd_data_points
}

fragment BTCPriceChart_usd_data_points on DataPoint {
  ...PriceChart_usd_data_points
}

fragment CNYPriceChart_usd_data_points on DataPoint {
  ...PriceChart_usd_data_points
}

fragment PriceChart_usd_data_points on DataPoint {
  time
  value
}

fragment TokenMarket_pair_data_points on DataPoint {
  ...BTCPriceChart_btc_data_points
  ...CNYPriceChart_cny_data_points
}

fragment BTCPriceChart_btc_data_points on DataPoint {
  ...PriceChart_pair_data_points
}

fragment CNYPriceChart_cny_data_points on DataPoint {
  ...PriceChart_pair_data_points
}

fragment PriceChart_pair_data_points on DataPoint {
  time
  value
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "Literal",
    "name": "first",
    "value": 16,
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "block.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v1 = [{
    "kind": "Literal",
    "name": "filters",
    "value": [{
      "name": "transaction.type",
      "operator": "!=",
      "value": "MinerTransaction"
    }],
    "type": "[FilterInput!]"
  }, {
    "kind": "Literal",
    "name": "first",
    "value": 20,
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "transaction.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "Literal",
    "name": "from",
    "value": "NEO",
    "type": "String!"
  },
      v3 = [v2, {
    "kind": "Literal",
    "name": "to",
    "value": "BTC",
    "type": "String!"
  }],
      v4 = [v2, {
    "kind": "Literal",
    "name": "to",
    "value": "USD",
    "type": "String!"
  }],
      v5 = [{
    "kind": "Literal",
    "name": "sym",
    "value": "NEO",
    "type": "String!"
  }],
      v6 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v7 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "time",
    "args": null,
    "storageKey": null
  },
      v8 = [v7, {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, v6];
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "HomeQuery",
    "id": "14",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "HomeQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": [],
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "blocks",
        "storageKey": "blocks(first:16,orderBy:[{\"direction\":\"desc\",\"name\":\"block.id\"}])",
        "args": v0,
        "concreteType": "BlocksConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "BlocksEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Block",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "BlockTable_blocks",
              "args": null
            }]
          }]
        }]
      }, {
        "kind": "LinkedField",
        "alias": null,
        "name": "transactions",
        "storageKey": "transactions(filters:[{\"name\":\"transaction.type\",\"operator\":\"!=\",\"value\":\"MinerTransaction\"}],first:20,orderBy:[{\"direction\":\"desc\",\"name\":\"transaction.id\"}])",
        "args": v1,
        "concreteType": "TransactionsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Transaction",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "TransactionTable_transactions",
              "args": null
            }]
          }]
        }]
      }, {
        "kind": "LinkedField",
        "alias": "neo_btc_data_points",
        "name": "prices",
        "storageKey": "prices(from:\"NEO\",to:\"BTC\")",
        "args": v3,
        "concreteType": "DataPoint",
        "plural": true,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "MarketCard_neo_btc_data_points",
          "args": null
        }]
      }, {
        "kind": "LinkedField",
        "alias": "neo_usd_data_points",
        "name": "prices",
        "storageKey": "prices(from:\"NEO\",to:\"USD\")",
        "args": v4,
        "concreteType": "DataPoint",
        "plural": true,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "MarketCard_neo_usd_data_points",
          "args": null
        }]
      }, {
        "kind": "LinkedField",
        "alias": "neo_current_price",
        "name": "current_price",
        "storageKey": "current_price(sym:\"NEO\")",
        "args": v5,
        "concreteType": "CurrentPrice",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "MarketCard_neo_current_price",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "HomeQuery",
      "argumentDefinitions": [],
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "blocks",
        "storageKey": "blocks(first:16,orderBy:[{\"direction\":\"desc\",\"name\":\"block.id\"}])",
        "args": v0,
        "concreteType": "BlocksConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "BlocksEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Block",
            "plural": false,
            "selections": [v6, v7, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_count",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "validator_address_id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "size",
              "args": null,
              "storageKey": null
            }]
          }]
        }]
      }, {
        "kind": "LinkedField",
        "alias": null,
        "name": "transactions",
        "storageKey": "transactions(filters:[{\"name\":\"transaction.type\",\"operator\":\"!=\",\"value\":\"MinerTransaction\"}],first:20,orderBy:[{\"direction\":\"desc\",\"name\":\"transaction.id\"}])",
        "args": v1,
        "concreteType": "TransactionsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Transaction",
            "plural": false,
            "selections": [v6, {
              "kind": "ScalarField",
              "alias": null,
              "name": "hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "type",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "block_time",
              "args": null,
              "storageKey": null
            }]
          }]
        }]
      }, {
        "kind": "LinkedField",
        "alias": "neo_btc_data_points",
        "name": "prices",
        "storageKey": "prices(from:\"NEO\",to:\"BTC\")",
        "args": v3,
        "concreteType": "DataPoint",
        "plural": true,
        "selections": v8
      }, {
        "kind": "LinkedField",
        "alias": "neo_usd_data_points",
        "name": "prices",
        "storageKey": "prices(from:\"NEO\",to:\"USD\")",
        "args": v4,
        "concreteType": "DataPoint",
        "plural": true,
        "selections": v8
      }, {
        "kind": "LinkedField",
        "alias": "neo_current_price",
        "name": "current_price",
        "storageKey": "current_price(sym:\"NEO\")",
        "args": v5,
        "concreteType": "CurrentPrice",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "price_usd",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "percent_change_24h",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "volume_usd_24h",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "market_cap_usd",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "last_updated",
          "args": null,
          "storageKey": null
        }, v6]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'c21c6e732bfd9e3192eae7fc06275db3';
module.exports = node;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type CoinTable_coins$ref: FragmentReference;
export type CoinTable_coins = $ReadOnlyArray<{|
  +value: string,
  +asset: {|
    +id: string,
    +symbol: string,
  |},
  +$refType: CoinTable_coins$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "CoinTable_coins",
  "type": "Coin",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "id",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '5f37ed94f05475d317875207c85ed7c2';
module.exports = node;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressTable_addresses$ref: FragmentReference;
export type AddressTable_addresses = $ReadOnlyArray<{|
  +id: string,
  +transaction_hash: ?string,
  +block_time: number,
  +last_transaction_hash: ?string,
  +last_transaction_time: ?number,
  +transaction_count: number,
  +$refType: AddressTable_addresses$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressTable_addresses",
  "type": "Address",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "last_transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "last_transaction_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '77ee13850d14636c20560d3877ec6d17';
module.exports = node;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AddressTable_addresses$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressPagingView_addresses$ref: FragmentReference;
export type AddressPagingView_addresses = $ReadOnlyArray<{|
  +$fragmentRefs: AddressTable_addresses$ref,
  +$refType: AddressPagingView_addresses$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressPagingView_addresses",
  "type": "Address",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AddressTable_addresses",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '85443bcedd4e9fe8aa5f69f59e98a3ee';
module.exports = node;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 19eba039c46d8cbafd5e030d2c4041fb
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type AddressPagingView_addresses$ref = any;
type CoinTable_coins$ref = any;
export type AddressSearchQueryVariables = {|
  first: number,
  after?: ?string,
|};
export type AddressSearchQueryResponse = {|
  +addresses: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +id: string,
        +coins: {|
          +edges: $ReadOnlyArray<{|
            +node: {|
              +value: string,
              +asset: {|
                +id: string,
                +symbol: string,
              |},
              +$fragmentRefs: CoinTable_coins$ref,
            |}
          |}>
        |},
        +$fragmentRefs: AddressPagingView_addresses$ref,
      |}
    |}>,
    +pageInfo: {|
      +hasNextPage: boolean
    |},
  |}
|};
export type AddressSearchQuery = {|
  variables: AddressSearchQueryVariables,
  response: AddressSearchQueryResponse,
|};
*/

/*
query AddressSearchQuery(
  $first: Int!
  $after: String
) {
  addresses(orderBy: [{name: "address.block_id", direction: "desc"}, {name: "address.id", direction: "asc"}], first: $first, after: $after) {
    edges {
      node {
        ...AddressPagingView_addresses
        id
        coins {
          edges {
            node {
              ...CoinTable_coins
              value
              asset {
                id
                symbol
              }
              id
            }
          }
        }
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment AddressPagingView_addresses on Address {
  ...AddressTable_addresses
}

fragment CoinTable_coins on Coin {
  value
  asset {
    id
    symbol
  }
}

fragment AddressTable_addresses on Address {
  id
  transaction_hash
  block_time
  last_transaction_hash
  last_transaction_time
  transaction_count
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "address.block_id"
    }, {
      "direction": "asc",
      "name": "address.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  },
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [v2, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  },
      v5 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AddressSearchQuery",
    "id": "32",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AddressSearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "addresses",
        "storageKey": null,
        "args": v1,
        "concreteType": "AddressesConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "AddressesEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Address",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "AddressPagingView_addresses",
              "args": null
            }, v2, {
              "kind": "LinkedField",
              "alias": null,
              "name": "coins",
              "storageKey": null,
              "args": null,
              "concreteType": "AddressToCoinsConnection",
              "plural": false,
              "selections": [{
                "kind": "LinkedField",
                "alias": null,
                "name": "edges",
                "storageKey": null,
                "args": null,
                "concreteType": "AddressToCoinsEdge",
                "plural": true,
                "selections": [{
                  "kind": "LinkedField",
                  "alias": null,
                  "name": "node",
                  "storageKey": null,
                  "args": null,
                  "concreteType": "Coin",
                  "plural": false,
                  "selections": [{
                    "kind": "FragmentSpread",
                    "name": "CoinTable_coins",
                    "args": null
                  }, v3, v4]
                }]
              }]
            }]
          }]
        }, v5]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AddressSearchQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "addresses",
        "storageKey": null,
        "args": v1,
        "concreteType": "AddressesConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "AddressesEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Address",
            "plural": false,
            "selections": [v2, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "block_time",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "last_transaction_hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "last_transaction_time",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_count",
              "args": null,
              "storageKey": null
            }, {
              "kind": "LinkedField",
              "alias": null,
              "name": "coins",
              "storageKey": null,
              "args": null,
              "concreteType": "AddressToCoinsConnection",
              "plural": false,
              "selections": [{
                "kind": "LinkedField",
                "alias": null,
                "name": "edges",
                "storageKey": null,
                "args": null,
                "concreteType": "AddressToCoinsEdge",
                "plural": true,
                "selections": [{
                  "kind": "LinkedField",
                  "alias": null,
                  "name": "node",
                  "storageKey": null,
                  "args": null,
                  "concreteType": "Coin",
                  "plural": false,
                  "selections": [v3, v4, v2]
                }]
              }]
            }]
          }]
        }, v5]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'f393a032080f1d13e44a484710244ff9';
module.exports = node;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type Coin_coin$ref: FragmentReference;
export type Coin_coin = {|
  +value: string,
  +asset: {|
    +id: string,
    +symbol: string,
  |},
  +$refType: Coin_coin$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "Coin_coin",
  "type": "Coin",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "id",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '7691f2ac39f1a671f2314d1d44270415';
module.exports = node;

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionTable_transactions$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionPagingView_transactions$ref: FragmentReference;
export type TransactionPagingView_transactions = $ReadOnlyArray<{|
  +$fragmentRefs: TransactionTable_transactions$ref,
  +$refType: TransactionPagingView_transactions$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionPagingView_transactions",
  "type": "Transaction",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionTable_transactions",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '540a4ffa16dde8ff7ecb57c01c8e19c8';
module.exports = node;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressTransactionPagingView_address$ref: FragmentReference;
export type AddressTransactionPagingView_address = {|
  +id: string,
  +$refType: AddressTransactionPagingView_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressTransactionPagingView_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '68d556b946f7a81a2f8f6ef8865349be';
module.exports = node;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 898c4b6f167ccae536fed811ca390f81
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionPagingView_transactions$ref = any;
export type AddressTransactionPagingViewQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type AddressTransactionPagingViewQueryResponse = {|
  +address: ?{|
    +id: string,
    +transactions: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionPagingView_transactions$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |},
  |}
|};
export type AddressTransactionPagingViewQuery = {|
  variables: AddressTransactionPagingViewQueryVariables,
  response: AddressTransactionPagingViewQueryResponse,
|};
*/

/*
query AddressTransactionPagingViewQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  address(hash: $hash) {
    id
    transactions(first: $first, after: $after, orderBy: [{name: "address_to_transaction.id2", direction: "desc", type: "literal"}]) {
      edges {
        node {
          ...TransactionPagingView_transactions
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

fragment TransactionPagingView_transactions on Transaction {
  ...TransactionTable_transactions
}

fragment TransactionTable_transactions on Transaction {
  id
  ...TransactionSummary_transaction
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "address_to_transaction.id2",
      "type": "literal"
    }],
    "type": "[OrderByInput!]"
  }],
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AddressTransactionPagingViewQuery",
    "id": "16",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AddressTransactionPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v3,
          "concreteType": "AddressToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionPagingView_transactions",
                "args": null
              }]
            }]
          }, v4]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AddressTransactionPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v3,
          "concreteType": "AddressToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [v2, {
                "kind": "ScalarField",
                "alias": null,
                "name": "hash",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "type",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "block_time",
                "args": null,
                "storageKey": null
              }]
            }]
          }, v4]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '4a91dd5c45d7bd840e46b623076a7b27';
module.exports = node;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransferLink_transfer$ref: FragmentReference;
export type TransferLink_transfer = {|
  +transaction_hash: string,
  +$refType: TransferLink_transfer$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransferLink_transfer",
  "type": "Transfer",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c6c6f9d7c178facb3cbafc26eb840530';
module.exports = node;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetNameLink_asset$ref = any;
type TransferLink_transfer$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransferTable_transfers$ref: FragmentReference;
export type TransferTable_transfers = $ReadOnlyArray<{|
  +from_address_id: ?string,
  +to_address_id: ?string,
  +value: string,
  +asset: {|
    +$fragmentRefs: AssetNameLink_asset$ref
  |},
  +block_time: number,
  +$fragmentRefs: TransferLink_transfer$ref,
  +$refType: TransferTable_transfers$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransferTable_transfers",
  "type": "Transfer",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransferLink_transfer",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "from_address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "to_address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "AssetNameLink_asset",
      "args": null
    }]
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'b2ee8cf22e56817d6c66c4f23d20b32c';
module.exports = node;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransferTable_transfers$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransferPagingView_transfers$ref: FragmentReference;
export type TransferPagingView_transfers = $ReadOnlyArray<{|
  +$fragmentRefs: TransferTable_transfers$ref,
  +$refType: TransferPagingView_transfers$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransferPagingView_transfers",
  "type": "Transfer",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransferTable_transfers",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '1625b7afad7dee8b0b0978c55b40b618';
module.exports = node;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressTransferPagingView_address$ref: FragmentReference;
export type AddressTransferPagingView_address = {|
  +id: string,
  +$refType: AddressTransferPagingView_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressTransferPagingView_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '62d33f2b6b8e38668f33e175d07304d9';
module.exports = node;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash aee7c4e2b0e93f729f323e9344eec079
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransferPagingView_transfers$ref = any;
export type AddressTransferPagingViewQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type AddressTransferPagingViewQueryResponse = {|
  +address: ?{|
    +id: string,
    +transfers: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransferPagingView_transfers$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |},
  |}
|};
export type AddressTransferPagingViewQuery = {|
  variables: AddressTransferPagingViewQueryVariables,
  response: AddressTransferPagingViewQueryResponse,
|};
*/

/*
query AddressTransferPagingViewQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  address(hash: $hash) {
    id
    transfers(first: $first, after: $after, orderBy: [{name: "address_to_transfer.id2", direction: "desc", type: "literal"}]) {
      edges {
        node {
          ...TransferPagingView_transfers
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

fragment TransferPagingView_transfers on Transfer {
  ...TransferTable_transfers
}

fragment TransferTable_transfers on Transfer {
  ...TransferLink_transfer
  from_address_id
  to_address_id
  value
  asset {
    ...AssetNameLink_asset
    id
  }
  block_time
}

fragment TransferLink_transfer on Transfer {
  transaction_hash
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "address_to_transfer.id2",
      "type": "literal"
    }],
    "type": "[OrderByInput!]"
  }],
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AddressTransferPagingViewQuery",
    "id": "6",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AddressTransferPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": v3,
          "concreteType": "AddressToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransferPagingView_transfers",
                "args": null
              }]
            }]
          }, v4]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AddressTransferPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": v3,
          "concreteType": "AddressToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [{
                "kind": "ScalarField",
                "alias": null,
                "name": "transaction_hash",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "from_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "to_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v2, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "block_time",
                "args": null,
                "storageKey": null
              }, v2]
            }]
          }, v4]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'effcce37157ad1a5d4121bb9cd669d91';
module.exports = node;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AddressTransactionPagingView_address$ref = any;
type AddressTransferPagingView_address$ref = any;
type TransactionSummary_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressViewExtra_address$ref: FragmentReference;
export type AddressViewExtra_address = {|
  +id: string,
  +first_transaction: ?{|
    +$fragmentRefs: TransactionSummary_transaction$ref
  |},
  +$fragmentRefs: AddressTransactionPagingView_address$ref & AddressTransferPagingView_address$ref,
  +$refType: AddressViewExtra_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressViewExtra_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "first_transaction",
    "storageKey": null,
    "args": null,
    "concreteType": "Transaction",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "TransactionSummary_transaction",
      "args": null
    }]
  }, {
    "kind": "FragmentSpread",
    "name": "AddressTransactionPagingView_address",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "AddressTransferPagingView_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '01c13c763ebbd21178e4f24a4b031de6';
module.exports = node;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AddressViewExtra_address$ref = any;
type CoinTable_coins$ref = any;
type Coin_coin$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AddressView_address$ref: FragmentReference;
export type AddressView_address = {|
  +transaction_hash: ?string,
  +block_time: number,
  +transaction_count: number,
  +transfer_count: number,
  +coins: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +value: string,
        +asset: {|
          +id: string,
          +symbol: string,
        |},
        +$fragmentRefs: CoinTable_coins$ref,
      |}
    |}>
  |},
  +claim_value_available_coin: {|
    +$fragmentRefs: Coin_coin$ref
  |},
  +$fragmentRefs: AddressViewExtra_address$ref,
  +$refType: AddressView_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AddressView_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AddressViewExtra_address",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transfer_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "coins",
    "storageKey": null,
    "args": null,
    "concreteType": "AddressToCoinsConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "AddressToCoinsEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Coin",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "CoinTable_coins",
          "args": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "value",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "asset",
          "storageKey": null,
          "args": null,
          "concreteType": "Asset",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "id",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "symbol",
            "args": null,
            "storageKey": null
          }]
        }]
      }]
    }]
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "claim_value_available_coin",
    "storageKey": null,
    "args": null,
    "concreteType": "Coin",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "Coin_coin",
      "args": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'e1baa2863d319f3e8e39d4b4cbb7cc2d';
module.exports = node;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 043f2cbd787bf187a571b2d1c3155dac
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type AddressView_address$ref = any;
export type AddressQueryVariables = {|
  hash: string
|};
export type AddressQueryResponse = {|
  +address: ?{|
    +$fragmentRefs: AddressView_address$ref
  |}
|};
export type AddressQuery = {|
  variables: AddressQueryVariables,
  response: AddressQueryResponse,
|};
*/

/*
query AddressQuery(
  $hash: String!
) {
  address(hash: $hash) {
    ...AddressView_address
    id
  }
}

fragment AddressView_address on Address {
  ...AddressViewExtra_address
  transaction_hash
  block_time
  transaction_count
  transfer_count
  coins {
    edges {
      node {
        ...CoinTable_coins
        value
        asset {
          id
          symbol
        }
        id
      }
    }
  }
  claim_value_available_coin {
    ...Coin_coin
    id
  }
}

fragment AddressViewExtra_address on Address {
  id
  first_transaction {
    ...TransactionSummary_transaction
    id
  }
  ...AddressTransactionPagingView_address
  ...AddressTransferPagingView_address
}

fragment CoinTable_coins on Coin {
  value
  asset {
    id
    symbol
  }
}

fragment Coin_coin on Coin {
  value
  asset {
    id
    symbol
  }
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment AddressTransactionPagingView_address on Address {
  id
}

fragment AddressTransferPagingView_address on Address {
  id
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  },
      v4 = [{
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [v2, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  }, v2];
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AddressQuery",
    "id": "12",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AddressQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "AddressView_address",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AddressQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "first_transaction",
          "storageKey": null,
          "args": null,
          "concreteType": "Transaction",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "hash",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "type",
            "args": null,
            "storageKey": null
          }, v3, v2]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transaction_hash",
          "args": null,
          "storageKey": null
        }, v3, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transaction_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transfer_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "coins",
          "storageKey": null,
          "args": null,
          "concreteType": "AddressToCoinsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToCoinsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Coin",
              "plural": false,
              "selections": v4
            }]
          }]
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "claim_value_available_coin",
          "storageKey": null,
          "args": null,
          "concreteType": "Coin",
          "plural": false,
          "selections": v4
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '51c3731b6bd28ae1927cbd3bb77c025b';
module.exports = node;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetNameLink_asset$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetTable_assets$ref: FragmentReference;
export type AssetTable_assets = $ReadOnlyArray<{|
  +type: string,
  +amount: string,
  +issued: string,
  +transaction_hash: string,
  +block_time: number,
  +address_count: number,
  +transaction_count: number,
  +$fragmentRefs: AssetNameLink_asset$ref,
  +$refType: AssetTable_assets$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetTable_assets",
  "type": "Asset",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AssetNameLink_asset",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "amount",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "issued",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "address_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'b235794ee6547d1973c7309861ef7bbf';
module.exports = node;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetTable_assets$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetPagingView_assets$ref: FragmentReference;
export type AssetPagingView_assets = $ReadOnlyArray<{|
  +$fragmentRefs: AssetTable_assets$ref,
  +$refType: AssetPagingView_assets$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetPagingView_assets",
  "type": "Asset",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AssetTable_assets",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'e6eb9e2ca8fb1d990c6fc3868d6d3819';
module.exports = node;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 046870c1d2dfcaafc52cb3a102f05682
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type AssetPagingView_assets$ref = any;
export type AssetSearchQueryVariables = {|
  first: number,
  after?: ?string,
|};
export type AssetSearchQueryResponse = {|
  +assets: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: AssetPagingView_assets$ref
      |}
    |}>,
    +pageInfo: {|
      +hasNextPage: boolean
    |},
  |}
|};
export type AssetSearchQuery = {|
  variables: AssetSearchQueryVariables,
  response: AssetSearchQueryResponse,
|};
*/

/*
query AssetSearchQuery(
  $first: Int!
  $after: String
) {
  assets(orderBy: [{name: "asset.transaction_count", direction: "desc"}, {name: "asset.id", direction: "asc"}], first: $first, after: $after, filters: [{name: "asset.id", operator: "!=", value: "cb453a56856a236cbae8b8f937db308a15421daada4ba6ce78123b59bfb7253c"}, {name: "asset.id", operator: "!=", value: "6161af8875eb78654e385a33e7334a473a2a0519281d33c06780ff3c8bce15ea"}]) {
    edges {
      node {
        ...AssetPagingView_assets
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment AssetPagingView_assets on Asset {
  ...AssetTable_assets
}

fragment AssetTable_assets on Asset {
  ...AssetNameLink_asset
  type
  amount
  issued
  transaction_hash
  block_time
  address_count
  transaction_count
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Literal",
    "name": "filters",
    "value": [{
      "name": "asset.id",
      "operator": "!=",
      "value": "cb453a56856a236cbae8b8f937db308a15421daada4ba6ce78123b59bfb7253c"
    }, {
      "name": "asset.id",
      "operator": "!=",
      "value": "6161af8875eb78654e385a33e7334a473a2a0519281d33c06780ff3c8bce15ea"
    }],
    "type": "[FilterInput!]"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "asset.transaction_count"
    }, {
      "direction": "asc",
      "name": "asset.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AssetSearchQuery",
    "id": "17",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AssetSearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "assets",
        "storageKey": null,
        "args": v1,
        "concreteType": "AssetsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "AssetsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Asset",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "AssetPagingView_assets",
              "args": null
            }]
          }]
        }, v2]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AssetSearchQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "assets",
        "storageKey": null,
        "args": v1,
        "concreteType": "AssetsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "AssetsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Asset",
            "plural": false,
            "selections": [{
              "kind": "ScalarField",
              "alias": null,
              "name": "id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "symbol",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "type",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "amount",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "issued",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "block_time",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "address_count",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_count",
              "args": null,
              "storageKey": null
            }]
          }]
        }, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '3ecfd4b96256e4f43f120ae4d2fac0ae';
module.exports = node;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetAddressPagingView_asset$ref: FragmentReference;
export type AssetAddressPagingView_asset = {|
  +id: string,
  +$refType: AssetAddressPagingView_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetAddressPagingView_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c555b39b11659e816a0549cae4e0fb52';
module.exports = node;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 599df0f01562eeab9790a23512ab489d
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type AddressPagingView_addresses$ref = any;
type Coin_coin$ref = any;
export type AssetAddressPagingViewQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type AssetAddressPagingViewQueryResponse = {|
  +asset: ?{|
    +id: string,
    +coins: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +id: string,
          +value: string,
          +address: {|
            +id: string,
            +$fragmentRefs: AddressPagingView_addresses$ref,
          |},
          +$fragmentRefs: Coin_coin$ref,
        |}
      |}>,
      +pageInfo: {|
        +hasNextPage: boolean,
        +endCursor: ?string,
      |},
    |},
  |}
|};
export type AssetAddressPagingViewQuery = {|
  variables: AssetAddressPagingViewQueryVariables,
  response: AssetAddressPagingViewQueryResponse,
|};
*/

/*
query AssetAddressPagingViewQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  asset(hash: $hash) {
    id
    coins(first: $first, after: $after, orderBy: [{name: "coin.value", direction: "desc"}, {name: "coin.id", direction: "desc"}]) {
      edges {
        node {
          ...Coin_coin
          id
          value
          address {
            id
            ...AddressPagingView_addresses
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}

fragment Coin_coin on Coin {
  value
  asset {
    id
    symbol
  }
}

fragment AddressPagingView_addresses on Address {
  ...AddressTable_addresses
}

fragment AddressTable_addresses on Address {
  id
  transaction_hash
  block_time
  last_transaction_hash
  last_transaction_time
  transaction_count
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "coin.value"
    }, {
      "direction": "desc",
      "name": "coin.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  },
      v5 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "endCursor",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AssetAddressPagingViewQuery",
    "id": "48",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AssetAddressPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "coins",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToCoinsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToCoinsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Coin",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "Coin_coin",
                "args": null
              }, v2, v4, {
                "kind": "LinkedField",
                "alias": null,
                "name": "address",
                "storageKey": null,
                "args": null,
                "concreteType": "Address",
                "plural": false,
                "selections": [v2, {
                  "kind": "FragmentSpread",
                  "name": "AddressPagingView_addresses",
                  "args": null
                }]
              }]
            }]
          }, v5]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AssetAddressPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "coins",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToCoinsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToCoinsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Coin",
              "plural": false,
              "selections": [v4, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v2, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, v2, {
                "kind": "LinkedField",
                "alias": null,
                "name": "address",
                "storageKey": null,
                "args": null,
                "concreteType": "Address",
                "plural": false,
                "selections": [v2, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "transaction_hash",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "block_time",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "last_transaction_hash",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "last_transaction_time",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "transaction_count",
                  "args": null,
                  "storageKey": null
                }]
              }]
            }]
          }, v5]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'b2a4ce85cf41d3041da37a0910bb16e7';
module.exports = node;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetTransactionPagingView_asset$ref: FragmentReference;
export type AssetTransactionPagingView_asset = {|
  +id: string,
  +$refType: AssetTransactionPagingView_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetTransactionPagingView_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '98290771581249e8e5e32fcefd92a4a1';
module.exports = node;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash e972d1a6ba25216577b24c2ab3cd4032
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionPagingView_transactions$ref = any;
export type AssetTransactionPagingViewQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type AssetTransactionPagingViewQueryResponse = {|
  +asset: ?{|
    +id: string,
    +transactions: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionPagingView_transactions$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |},
  |}
|};
export type AssetTransactionPagingViewQuery = {|
  variables: AssetTransactionPagingViewQueryVariables,
  response: AssetTransactionPagingViewQueryResponse,
|};
*/

/*
query AssetTransactionPagingViewQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  asset(hash: $hash) {
    id
    transactions(first: $first, after: $after, orderBy: [{name: "asset_to_transaction.id2", direction: "desc", type: "literal"}]) {
      edges {
        node {
          ...TransactionPagingView_transactions
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

fragment TransactionPagingView_transactions on Transaction {
  ...TransactionTable_transactions
}

fragment TransactionTable_transactions on Transaction {
  id
  ...TransactionSummary_transaction
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "asset_to_transaction.id2",
      "type": "literal"
    }],
    "type": "[OrderByInput!]"
  }],
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AssetTransactionPagingViewQuery",
    "id": "24",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AssetTransactionPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionPagingView_transactions",
                "args": null
              }]
            }]
          }, v4]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AssetTransactionPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [v2, {
                "kind": "ScalarField",
                "alias": null,
                "name": "hash",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "type",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "block_time",
                "args": null,
                "storageKey": null
              }]
            }]
          }, v4]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'bd69ebc207cd3673b421e0c694e60d9f';
module.exports = node;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetTransferPagingView_asset$ref: FragmentReference;
export type AssetTransferPagingView_asset = {|
  +id: string,
  +$refType: AssetTransferPagingView_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetTransferPagingView_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '2543daa0b6f60fe74c0de677ac0280c1';
module.exports = node;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 1187717fda55049fc66613afa4a97b1a
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransferPagingView_transfers$ref = any;
export type AssetTransferPagingViewQueryVariables = {|
  hash: string,
  first: number,
  after?: ?string,
|};
export type AssetTransferPagingViewQueryResponse = {|
  +asset: ?{|
    +id: string,
    +transfers: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransferPagingView_transfers$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |},
  |}
|};
export type AssetTransferPagingViewQuery = {|
  variables: AssetTransferPagingViewQueryVariables,
  response: AssetTransferPagingViewQueryResponse,
|};
*/

/*
query AssetTransferPagingViewQuery(
  $hash: String!
  $first: Int!
  $after: String
) {
  asset(hash: $hash) {
    id
    transfers(first: $first, after: $after, orderBy: [{name: "transfer.id", direction: "desc"}]) {
      edges {
        node {
          ...TransferPagingView_transfers
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
  }
}

fragment TransferPagingView_transfers on Transfer {
  ...TransferTable_transfers
}

fragment TransferTable_transfers on Transfer {
  ...TransferLink_transfer
  from_address_id
  to_address_id
  value
  asset {
    ...AssetNameLink_asset
    id
  }
  block_time
}

fragment TransferLink_transfer on Transfer {
  transaction_hash
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "transfer.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AssetTransferPagingViewQuery",
    "id": "25",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AssetTransferPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransferPagingView_transfers",
                "args": null
              }]
            }]
          }, v4]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AssetTransferPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": v3,
          "concreteType": "AssetToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AssetToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [{
                "kind": "ScalarField",
                "alias": null,
                "name": "transaction_hash",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "from_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "to_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v2, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }]
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "block_time",
                "args": null,
                "storageKey": null
              }, v2]
            }]
          }, v4]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '950fd2e7c5dbf9d70d6d57ad308a8d5f';
module.exports = node;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetAddressPagingView_asset$ref = any;
type AssetTransactionPagingView_asset$ref = any;
type AssetTransferPagingView_asset$ref = any;
type TransactionSummary_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetViewExtra_asset$ref: FragmentReference;
export type AssetViewExtra_asset = {|
  +type: string,
  +register_transaction: {|
    +$fragmentRefs: TransactionSummary_transaction$ref
  |},
  +$fragmentRefs: AssetTransactionPagingView_asset$ref & AssetTransferPagingView_asset$ref & AssetAddressPagingView_asset$ref,
  +$refType: AssetViewExtra_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetViewExtra_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "register_transaction",
    "storageKey": null,
    "args": null,
    "concreteType": "Transaction",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "TransactionSummary_transaction",
      "args": null
    }]
  }, {
    "kind": "FragmentSpread",
    "name": "AssetTransactionPagingView_asset",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "AssetTransferPagingView_asset",
    "args": null
  }, {
    "kind": "FragmentSpread",
    "name": "AssetAddressPagingView_asset",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'd428eaae6588d99708739ab463f7948e';
module.exports = node;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AssetViewExtra_asset$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AssetView_asset$ref: FragmentReference;
export type AssetView_asset = {|
  +id: string,
  +transaction_hash: string,
  +type: string,
  +symbol: string,
  +name: $ReadOnlyArray<{|
    +lang: string,
    +name: string,
  |}>,
  +amount: string,
  +issued: string,
  +available: string,
  +precision: number,
  +admin_address_id: ?string,
  +block_time: number,
  +transaction_count: number,
  +address_count: number,
  +transfer_count: number,
  +$fragmentRefs: AssetViewExtra_asset$ref,
  +$refType: AssetView_asset$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AssetView_asset",
  "type": "Asset",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "available",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "symbol",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "name",
    "storageKey": null,
    "args": null,
    "concreteType": "AssetName",
    "plural": true,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "lang",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "name",
      "args": null,
      "storageKey": null
    }]
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "amount",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "issued",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "precision",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "admin_address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "address_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transfer_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "AssetViewExtra_asset",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'd443fd0ab5f6cf93050eaaadbf27d489';
module.exports = node;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 4ed773723f88abd1dd3d07c750d411ae
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type AssetView_asset$ref = any;
export type AssetQueryVariables = {|
  hash: string
|};
export type AssetQueryResponse = {|
  +asset: ?{|
    +id: string,
    +symbol: string,
    +$fragmentRefs: AssetView_asset$ref,
  |}
|};
export type AssetQuery = {|
  variables: AssetQueryVariables,
  response: AssetQueryResponse,
|};
*/

/*
query AssetQuery(
  $hash: String!
) {
  asset(hash: $hash) {
    id
    symbol
    ...AssetView_asset
  }
}

fragment AssetView_asset on Asset {
  id
  transaction_hash
  type
  symbol
  name {
    lang
    name
  }
  amount
  issued
  available
  precision
  admin_address_id
  block_time
  transaction_count
  address_count
  transfer_count
  ...AssetViewExtra_asset
}

fragment AssetViewExtra_asset on Asset {
  type
  register_transaction {
    ...TransactionSummary_transaction
    id
  }
  ...AssetTransactionPagingView_asset
  ...AssetTransferPagingView_asset
  ...AssetAddressPagingView_asset
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment AssetTransactionPagingView_asset on Asset {
  id
}

fragment AssetTransferPagingView_asset on Asset {
  id
}

fragment AssetAddressPagingView_asset on Asset {
  id
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "symbol",
    "args": null,
    "storageKey": null
  },
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  },
      v5 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "AssetQuery",
    "id": "10",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "AssetQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [v2, v3, {
          "kind": "FragmentSpread",
          "name": "AssetView_asset",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "AssetQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "asset",
        "storageKey": null,
        "args": v1,
        "concreteType": "Asset",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "available",
          "args": null,
          "storageKey": null
        }, v2, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transaction_hash",
          "args": null,
          "storageKey": null
        }, v4, {
          "kind": "LinkedField",
          "alias": null,
          "name": "name",
          "storageKey": null,
          "args": null,
          "concreteType": "AssetName",
          "plural": true,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "lang",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "name",
            "args": null,
            "storageKey": null
          }]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "amount",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "issued",
          "args": null,
          "storageKey": null
        }, v3, {
          "kind": "ScalarField",
          "alias": null,
          "name": "precision",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "admin_address_id",
          "args": null,
          "storageKey": null
        }, v5, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transaction_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "address_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transfer_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "register_transaction",
          "storageKey": null,
          "args": null,
          "concreteType": "Transaction",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "hash",
            "args": null,
            "storageKey": null
          }, v4, v5, v2]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '34d2ec6a309946235e640aa255f6323b';
module.exports = node;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type BlockTable_blocks$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type BlockPagingView_blocks$ref: FragmentReference;
export type BlockPagingView_blocks = $ReadOnlyArray<{|
  +$fragmentRefs: BlockTable_blocks$ref,
  +$refType: BlockPagingView_blocks$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "BlockPagingView_blocks",
  "type": "Block",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "BlockTable_blocks",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '6f1fdd679d5091689aa26209e3830778';
module.exports = node;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 6e45f7c26fc5e69a32f847ecc7eea3f9
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type BlockPagingView_blocks$ref = any;
export type BlockSearchQueryVariables = {|
  first: number,
  after?: ?string,
|};
export type BlockSearchQueryResponse = {|
  +blocks: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: BlockPagingView_blocks$ref
      |}
    |}>,
    +pageInfo: {|
      +hasNextPage: boolean
    |},
  |}
|};
export type BlockSearchQuery = {|
  variables: BlockSearchQueryVariables,
  response: BlockSearchQueryResponse,
|};
*/

/*
query BlockSearchQuery(
  $first: Int!
  $after: String
) {
  blocks(orderBy: [{name: "block.id", direction: "desc"}], first: $first, after: $after) {
    edges {
      node {
        ...BlockPagingView_blocks
        id
      }
    }
    pageInfo {
      hasNextPage
    }
  }
}

fragment BlockPagingView_blocks on Block {
  ...BlockTable_blocks
}

fragment BlockTable_blocks on Block {
  id
  time
  transaction_count
  validator_address_id
  size
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "block.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "BlockSearchQuery",
    "id": "13",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "BlockSearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "blocks",
        "storageKey": null,
        "args": v1,
        "concreteType": "BlocksConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "BlocksEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Block",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "BlockPagingView_blocks",
              "args": null
            }]
          }]
        }, v2]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "BlockSearchQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "blocks",
        "storageKey": null,
        "args": v1,
        "concreteType": "BlocksConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "BlocksEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Block",
            "plural": false,
            "selections": [{
              "kind": "ScalarField",
              "alias": null,
              "name": "id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "time",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_count",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "validator_address_id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "size",
              "args": null,
              "storageKey": null
            }]
          }]
        }, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '6688219afee81069bf3d564ccafc8307';
module.exports = node;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type BlockTransactionPagingView_block$ref: FragmentReference;
export type BlockTransactionPagingView_block = {|
  +id: string,
  +$refType: BlockTransactionPagingView_block$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "BlockTransactionPagingView_block",
  "type": "Block",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'ed887ca91cf4a69f6ceac3fea21c1903';
module.exports = node;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 7de87744533c3fe5a8c85c159b566aab
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionPagingView_transactions$ref = any;
export type BlockTransactionPagingViewQueryVariables = {|
  index: number,
  first: number,
  after?: ?string,
|};
export type BlockTransactionPagingViewQueryResponse = {|
  +block: ?{|
    +transactions: {|
      +edges: $ReadOnlyArray<{|
        +node: {|
          +$fragmentRefs: TransactionPagingView_transactions$ref
        |}
      |}>,
      +pageInfo: {|
        +hasPreviousPage: boolean,
        +hasNextPage: boolean,
      |},
    |}
  |}
|};
export type BlockTransactionPagingViewQuery = {|
  variables: BlockTransactionPagingViewQueryVariables,
  response: BlockTransactionPagingViewQueryResponse,
|};
*/

/*
query BlockTransactionPagingViewQuery(
  $index: Int!
  $first: Int!
  $after: String
) {
  block(index: $index) {
    transactions(first: $first, after: $after, orderBy: [{name: "transaction.index", direction: "asc"}]) {
      edges {
        node {
          ...TransactionPagingView_transactions
          id
        }
      }
      pageInfo {
        hasPreviousPage
        hasNextPage
      }
    }
    id
  }
}

fragment TransactionPagingView_transactions on Transaction {
  ...TransactionTable_transactions
}

fragment TransactionTable_transactions on Transaction {
  id
  ...TransactionSummary_transaction
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "index",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "index",
    "variableName": "index",
    "type": "Int"
  }],
      v2 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "asc",
      "name": "transaction.index"
    }],
    "type": "[OrderByInput!]"
  }],
      v3 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  },
      v4 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "BlockTransactionPagingViewQuery",
    "id": "4",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "BlockTransactionPagingViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "block",
        "storageKey": null,
        "args": v1,
        "concreteType": "Block",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v2,
          "concreteType": "BlockToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "BlockToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [{
                "kind": "FragmentSpread",
                "name": "TransactionPagingView_transactions",
                "args": null
              }]
            }]
          }, v3]
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "BlockTransactionPagingViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "block",
        "storageKey": null,
        "args": v1,
        "concreteType": "Block",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "transactions",
          "storageKey": null,
          "args": v2,
          "concreteType": "BlockToTransactionsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "BlockToTransactionsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transaction",
              "plural": false,
              "selections": [v4, {
                "kind": "ScalarField",
                "alias": null,
                "name": "hash",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "type",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "block_time",
                "args": null,
                "storageKey": null
              }]
            }]
          }, v3]
        }, v4]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = 'f99bc674b14c73bce54abcd354dfddec';
module.exports = node;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type BlockTransactionPagingView_block$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type BlockViewExtra_block$ref: FragmentReference;
export type BlockViewExtra_block = {|
  +script: {|
    +invocation_script: string,
    +verification_script: string,
  |},
  +$fragmentRefs: BlockTransactionPagingView_block$ref,
  +$refType: BlockViewExtra_block$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "BlockViewExtra_block",
  "type": "Block",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "BlockTransactionPagingView_block",
    "args": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "script",
    "storageKey": null,
    "args": null,
    "concreteType": "Script",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "invocation_script",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "verification_script",
      "args": null,
      "storageKey": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '3f2bb3e8a16d7e3a6460d5c9c37bffdd';
module.exports = node;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type BlockViewExtra_block$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type BlockView_block$ref: FragmentReference;
export type BlockView_block = {|
  +id: string,
  +hash: string,
  +size: number,
  +version: number,
  +time: number,
  +previous_block_hash: ?string,
  +next_block_hash: ?string,
  +merkle_root: string,
  +transaction_count: number,
  +validator_address_id: ?string,
  +$fragmentRefs: BlockViewExtra_block$ref,
  +$refType: BlockView_block$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "BlockView_block",
  "type": "Block",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "previous_block_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "size",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "version",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "next_block_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "merkle_root",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_count",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "validator_address_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "BlockViewExtra_block",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '952cf7784552d0246a6908510315ff36';
module.exports = node;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 3c5652f7a8e19f2a4ea71f30cc00a83e
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type BlockView_block$ref = any;
export type BlockQueryVariables = {|
  hash?: ?string,
  index?: ?number,
|};
export type BlockQueryResponse = {|
  +block: ?{|
    +id: string,
    +$fragmentRefs: BlockView_block$ref,
  |}
|};
export type BlockQuery = {|
  variables: BlockQueryVariables,
  response: BlockQueryResponse,
|};
*/

/*
query BlockQuery(
  $hash: String
  $index: Int
) {
  block(hash: $hash, index: $index) {
    id
    ...BlockView_block
  }
}

fragment BlockView_block on Block {
  id
  hash
  size
  version
  time
  previous_block_hash
  next_block_hash
  merkle_root
  transaction_count
  validator_address_id
  ...BlockViewExtra_block
}

fragment BlockViewExtra_block on Block {
  ...BlockTransactionPagingView_block
  script {
    invocation_script
    verification_script
  }
}

fragment BlockTransactionPagingView_block on Block {
  id
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "index",
    "type": "Int",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "index",
    "variableName": "index",
    "type": "Int"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "BlockQuery",
    "id": "8",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "BlockQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "block",
        "storageKey": null,
        "args": v1,
        "concreteType": "Block",
        "plural": false,
        "selections": [v2, {
          "kind": "FragmentSpread",
          "name": "BlockView_block",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "BlockQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "block",
        "storageKey": null,
        "args": v1,
        "concreteType": "Block",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "previous_block_hash",
          "args": null,
          "storageKey": null
        }, v2, {
          "kind": "ScalarField",
          "alias": null,
          "name": "size",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "version",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "time",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "hash",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "next_block_hash",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "merkle_root",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "transaction_count",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "validator_address_id",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "script",
          "storageKey": null,
          "args": null,
          "concreteType": "Script",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "invocation_script",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "verification_script",
            "args": null,
            "storageKey": null
          }]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '5ee7a69c4768655426b47561cad77bba';
module.exports = node;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractTable_contracts$ref: FragmentReference;
export type ContractTable_contracts = $ReadOnlyArray<{|
  +id: string,
  +name: string,
  +author: string,
  +transaction_hash: string,
  +block_time: number,
  +$refType: ContractTable_contracts$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractTable_contracts",
  "type": "Contract",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "name",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "author",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "transaction_hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '4a5e77019882be5072e6ecde2bc51400';
module.exports = node;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type ContractTable_contracts$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractPagingView_contracts$ref: FragmentReference;
export type ContractPagingView_contracts = $ReadOnlyArray<{|
  +$fragmentRefs: ContractTable_contracts$ref,
  +$refType: ContractPagingView_contracts$ref,
|}>;
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractPagingView_contracts",
  "type": "Contract",
  "metadata": {
    "plural": true
  },
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "ContractTable_contracts",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '2e2e5672ab90a007f96ce7d7c540eeb1';
module.exports = node;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 8b2dcc43cb7aba179af165cfa8f08adc
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type ContractPagingView_contracts$ref = any;
export type ContractSearchQueryVariables = {|
  first: number,
  after?: ?string,
|};
export type ContractSearchQueryResponse = {|
  +contracts: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: ContractPagingView_contracts$ref
      |}
    |}>,
    +pageInfo: {|
      +hasPreviousPage: boolean,
      +hasNextPage: boolean,
    |},
  |}
|};
export type ContractSearchQuery = {|
  variables: ContractSearchQueryVariables,
  response: ContractSearchQueryResponse,
|};
*/

/*
query ContractSearchQuery(
  $first: Int!
  $after: String
) {
  contracts(orderBy: [{name: "contract.block_id", direction: "desc"}, {name: "contract.id", direction: "desc"}], first: $first, after: $after) {
    edges {
      node {
        ...ContractPagingView_contracts
        id
      }
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
    }
  }
}

fragment ContractPagingView_contracts on Contract {
  ...ContractTable_contracts
}

fragment ContractTable_contracts on Contract {
  id
  name
  author
  transaction_hash
  block_time
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "contract.block_id"
    }, {
      "direction": "desc",
      "name": "contract.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "ContractSearchQuery",
    "id": "11",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "ContractSearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "contracts",
        "storageKey": null,
        "args": v1,
        "concreteType": "ContractsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "ContractsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Contract",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "ContractPagingView_contracts",
              "args": null
            }]
          }]
        }, v2]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "ContractSearchQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "contracts",
        "storageKey": null,
        "args": v1,
        "concreteType": "ContractsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "ContractsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Contract",
            "plural": false,
            "selections": [{
              "kind": "ScalarField",
              "alias": null,
              "name": "id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "name",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "author",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "transaction_hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "block_time",
              "args": null,
              "storageKey": null
            }]
          }]
        }, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '49137734fa329ca563e9d6e498bfd773';
module.exports = node;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionSummary_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractViewExtra_contract$ref: FragmentReference;
export type ContractViewExtra_contract = {|
  +script: string,
  +transaction: {|
    +$fragmentRefs: TransactionSummary_transaction$ref
  |},
  +$refType: ContractViewExtra_contract$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractViewExtra_contract",
  "type": "Contract",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "script",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "transaction",
    "storageKey": null,
    "args": null,
    "concreteType": "Transaction",
    "plural": false,
    "selections": [{
      "kind": "FragmentSpread",
      "name": "TransactionSummary_transaction",
      "args": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '6cadf5222dc2039b1b562e0ca765134d';
module.exports = node;

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type ContractViewExtra_contract$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type ContractView_contract$ref: FragmentReference;
export type ContractView_contract = {|
  +id: string,
  +name: string,
  +version: string,
  +parameters_raw: string,
  +return_type: string,
  +needs_storage: boolean,
  +author: string,
  +email: string,
  +description: string,
  +$fragmentRefs: ContractViewExtra_contract$ref,
  +$refType: ContractView_contract$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "ContractView_contract",
  "type": "Contract",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "name",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "version",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "parameters_raw",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "return_type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "needs_storage",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "author",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "email",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "description",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "ContractViewExtra_contract",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'e5664fffbe8b65537b47a17720cd5f6c';
module.exports = node;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 97269c8deb63adc1b21e2acf8446fd2a
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type ContractView_contract$ref = any;
export type ContractQueryVariables = {|
  hash: string
|};
export type ContractQueryResponse = {|
  +contract: ?{|
    +name: string,
    +$fragmentRefs: ContractView_contract$ref,
  |}
|};
export type ContractQuery = {|
  variables: ContractQueryVariables,
  response: ContractQueryResponse,
|};
*/

/*
query ContractQuery(
  $hash: String!
) {
  contract(hash: $hash) {
    name
    ...ContractView_contract
    id
  }
}

fragment ContractView_contract on Contract {
  id
  name
  version
  parameters_raw
  return_type
  needs_storage
  author
  email
  description
  ...ContractViewExtra_contract
}

fragment ContractViewExtra_contract on Contract {
  script
  transaction {
    ...TransactionSummary_transaction
    id
  }
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "name",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "ContractQuery",
    "id": "5",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "ContractQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "contract",
        "storageKey": null,
        "args": v1,
        "concreteType": "Contract",
        "plural": false,
        "selections": [v2, {
          "kind": "FragmentSpread",
          "name": "ContractView_contract",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "ContractQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "contract",
        "storageKey": null,
        "args": v1,
        "concreteType": "Contract",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "needs_storage",
          "args": null,
          "storageKey": null
        }, v2, {
          "kind": "ScalarField",
          "alias": null,
          "name": "version",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "parameters_raw",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "return_type",
          "args": null,
          "storageKey": null
        }, v3, {
          "kind": "ScalarField",
          "alias": null,
          "name": "author",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "email",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "description",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "script",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transaction",
          "storageKey": null,
          "args": null,
          "concreteType": "Transaction",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "hash",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "type",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "block_time",
            "args": null,
            "storageKey": null
          }, v3]
        }]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '8c98408ee303d4da40179a46eb1378b9';
module.exports = node;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash cbb0f5be6c637956a6c275528ae36364
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
export type SearchQueryVariables = {|
  value: string,
  index?: ?number,
|};
export type SearchQueryResponse = {|
  +address: ?{|
    +id: string
  |},
  +asset: ?{|
    +id: string
  |},
  +block: ?{|
    +id: string
  |},
  +contract: ?{|
    +id: string
  |},
  +transaction: ?{|
    +hash: string
  |},
|};
export type SearchQuery = {|
  variables: SearchQueryVariables,
  response: SearchQueryResponse,
|};
*/

/*
query SearchQuery(
  $value: String!
  $index: Int
) {
  address(hash: $value) {
    id
  }
  asset(hash: $value) {
    id
  }
  block(hash: $value, index: $index) {
    id
  }
  contract(hash: $value) {
    id
  }
  transaction(hash: $value) {
    hash
    id
  }
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "value",
    "type": "String!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "index",
    "type": "Int",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "value",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v3 = [v2],
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "address",
    "storageKey": null,
    "args": v1,
    "concreteType": "Address",
    "plural": false,
    "selections": v3
  },
      v5 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": v1,
    "concreteType": "Asset",
    "plural": false,
    "selections": v3
  },
      v6 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "block",
    "storageKey": null,
    "args": [{
      "kind": "Variable",
      "name": "hash",
      "variableName": "value",
      "type": "String"
    }, {
      "kind": "Variable",
      "name": "index",
      "variableName": "index",
      "type": "Int"
    }],
    "concreteType": "Block",
    "plural": false,
    "selections": v3
  },
      v7 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "contract",
    "storageKey": null,
    "args": v1,
    "concreteType": "Contract",
    "plural": false,
    "selections": v3
  },
      v8 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "SearchQuery",
    "id": "21",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "SearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [v4, v5, v6, v7, {
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [v8]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "SearchQuery",
      "argumentDefinitions": v0,
      "selections": [v4, v5, v6, v7, {
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [v8, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '200bb22a5672885a2a75490b1c024ad2';
module.exports = node;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash e45d916864a4046f54256bf4c0a0a050
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionPagingView_transactions$ref = any;
export type TransactionSearchQueryVariables = {|
  first: number,
  after?: ?string,
|};
export type TransactionSearchQueryResponse = {|
  +transactions: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: TransactionPagingView_transactions$ref
      |}
    |}>,
    +pageInfo: {|
      +hasPreviousPage: boolean,
      +hasNextPage: boolean,
    |},
  |}
|};
export type TransactionSearchQuery = {|
  variables: TransactionSearchQueryVariables,
  response: TransactionSearchQueryResponse,
|};
*/

/*
query TransactionSearchQuery(
  $first: Int!
  $after: String
) {
  transactions(orderBy: [{name: "transaction.id", direction: "desc"}], filters: [{name: "transaction.type", operator: "!=", value: "MinerTransaction"}], first: $first, after: $after) {
    edges {
      node {
        ...TransactionPagingView_transactions
        id
      }
    }
    pageInfo {
      hasPreviousPage
      hasNextPage
    }
  }
}

fragment TransactionPagingView_transactions on Transaction {
  ...TransactionTable_transactions
}

fragment TransactionTable_transactions on Transaction {
  id
  ...TransactionSummary_transaction
}

fragment TransactionSummary_transaction on Transaction {
  hash
  ...TransactionSummaryHeader_transaction
}

fragment TransactionSummaryHeader_transaction on Transaction {
  ...TransactionHeaderBackground_transaction
  ...TransactionTypeAndLink_transaction
  type
  block_time
}

fragment TransactionHeaderBackground_transaction on Transaction {
  type
}

fragment TransactionTypeAndLink_transaction on Transaction {
  type
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "first",
    "type": "Int!",
    "defaultValue": null
  }, {
    "kind": "LocalArgument",
    "name": "after",
    "type": "String",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "after",
    "variableName": "after",
    "type": "String"
  }, {
    "kind": "Literal",
    "name": "filters",
    "value": [{
      "name": "transaction.type",
      "operator": "!=",
      "value": "MinerTransaction"
    }],
    "type": "[FilterInput!]"
  }, {
    "kind": "Variable",
    "name": "first",
    "variableName": "first",
    "type": "Int"
  }, {
    "kind": "Literal",
    "name": "orderBy",
    "value": [{
      "direction": "desc",
      "name": "transaction.id"
    }],
    "type": "[OrderByInput!]"
  }],
      v2 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "pageInfo",
    "storageKey": null,
    "args": null,
    "concreteType": "PageInfo",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "hasPreviousPage",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "hasNextPage",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionSearchQuery",
    "id": "2",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionSearchQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transactions",
        "storageKey": null,
        "args": v1,
        "concreteType": "TransactionsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Transaction",
            "plural": false,
            "selections": [{
              "kind": "FragmentSpread",
              "name": "TransactionPagingView_transactions",
              "args": null
            }]
          }]
        }, v2]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionSearchQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transactions",
        "storageKey": null,
        "args": v1,
        "concreteType": "TransactionsConnection",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "edges",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionsEdge",
          "plural": true,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "node",
            "storageKey": null,
            "args": null,
            "concreteType": "Transaction",
            "plural": false,
            "selections": [{
              "kind": "ScalarField",
              "alias": null,
              "name": "id",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "hash",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "type",
              "args": null,
              "storageKey": null
            }, {
              "kind": "ScalarField",
              "alias": null,
              "name": "block_time",
              "args": null,
              "storageKey": null
            }]
          }]
        }, v2]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '4860721ba4e9f38229ff36fc7e9905a5';
module.exports = node;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionViewExtra_transaction$ref: FragmentReference;
export type TransactionViewExtra_transaction = {|
  +type: string,
  +scripts: $ReadOnlyArray<{|
    +invocation_script: string,
    +verification_script: string,
  |}>,
  +script: ?string,
  +$refType: TransactionViewExtra_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionViewExtra_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "scripts",
    "storageKey": null,
    "args": null,
    "concreteType": "Script",
    "plural": true,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "invocation_script",
      "args": null,
      "storageKey": null
    }, {
      "kind": "ScalarField",
      "alias": null,
      "name": "verification_script",
      "args": null,
      "storageKey": null
    }]
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "script",
    "args": null,
    "storageKey": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '5e9f2f42652387dc009f7b7ade1ace4b';
module.exports = node;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransactionSummaryBody_transaction$ref = any;
type TransactionViewExtra_transaction$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransactionView_transaction$ref: FragmentReference;
export type TransactionView_transaction = {|
  +type: string,
  +hash: string,
  +network_fee: string,
  +system_fee: string,
  +size: number,
  +block_time: number,
  +block_id: number,
  +$fragmentRefs: TransactionSummaryBody_transaction$ref & TransactionViewExtra_transaction$ref,
  +$refType: TransactionView_transaction$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransactionView_transaction",
  "type": "Transaction",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransactionSummaryBody_transaction",
    "args": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "type",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "network_fee",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "system_fee",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "size",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_time",
    "args": null,
    "storageKey": null
  }, {
    "kind": "ScalarField",
    "alias": null,
    "name": "block_id",
    "args": null,
    "storageKey": null
  }, {
    "kind": "FragmentSpread",
    "name": "TransactionViewExtra_transaction",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'eeb712619bc10ea19ec8e8a7bae352b5';
module.exports = node;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 19155547aa9218ac0d865b228a39ea5e
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type TransactionView_transaction$ref = any;
export type TransactionQueryVariables = {|
  hash: string
|};
export type TransactionQueryResponse = {|
  +transaction: ?{|
    +hash: string,
    +$fragmentRefs: TransactionView_transaction$ref,
  |}
|};
export type TransactionQuery = {|
  variables: TransactionQueryVariables,
  response: TransactionQueryResponse,
|};
*/

/*
query TransactionQuery(
  $hash: String!
) {
  transaction(hash: $hash) {
    hash
    ...TransactionView_transaction
    id
  }
}

fragment TransactionView_transaction on Transaction {
  ...TransactionSummaryBody_transaction
  type
  hash
  network_fee
  system_fee
  size
  block_time
  block_id
  ...TransactionViewExtra_transaction
}

fragment TransactionSummaryBody_transaction on Transaction {
  type
  ...TransactionClaimSummaryBody_transaction
  ...TransactionEnrollmentSummaryBody_transaction
  ...TransactionInputOutputSummaryBody_transaction
  ...TransactionPublishSummaryBody_transaction
  ...TransactionRegisterSummaryBody_transaction
  ...TransactionInvocationSummaryBody_transaction
}

fragment TransactionViewExtra_transaction on Transaction {
  type
  scripts {
    invocation_script
    verification_script
  }
  script
}

fragment TransactionClaimSummaryBody_transaction on Transaction {
  ...TransactionClaimPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
}

fragment TransactionEnrollmentSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  enrollment {
    address {
      id
    }
    id
  }
}

fragment TransactionInputOutputSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
}

fragment TransactionPublishSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  contracts {
    edges {
      node {
        ...ContractPublished_contract
        id
      }
    }
  }
}

fragment TransactionRegisterSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  asset {
    ...AssetRegistered_asset
    id
  }
}

fragment TransactionInvocationSummaryBody_transaction on Transaction {
  ...TransactionInputPagingTable_transaction
  ...TransactionOutputPagingTable_transaction
  asset {
    ...AssetRegistered_asset
    id
  }
  transfers {
    edges {
      node {
        asset {
          ...AssetNameLink_asset
          id
        }
        from_address_id
        to_address_id
        value
        id
      }
    }
  }
  contracts {
    edges {
      node {
        id
        ...ContractPublished_contract
      }
    }
  }
}

fragment TransactionInputPagingTable_transaction on Transaction {
  hash
}

fragment TransactionOutputPagingTable_transaction on Transaction {
  hash
}

fragment AssetRegistered_asset on Asset {
  ...AssetNameLink_asset
}

fragment AssetNameLink_asset on Asset {
  id
  symbol
}

fragment ContractPublished_contract on Contract {
  ...ContractNameLink_contract
}

fragment ContractNameLink_contract on Contract {
  id
  name
}

fragment TransactionClaimPagingTable_transaction on Transaction {
  hash
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "hash",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  },
      v4 = {
    "kind": "LinkedField",
    "alias": null,
    "name": "asset",
    "storageKey": null,
    "args": null,
    "concreteType": "Asset",
    "plural": false,
    "selections": [v3, {
      "kind": "ScalarField",
      "alias": null,
      "name": "symbol",
      "args": null,
      "storageKey": null
    }]
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "TransactionQuery",
    "id": "46",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "TransactionQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [v2, {
          "kind": "FragmentSpread",
          "name": "TransactionView_transaction",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "TransactionQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "transaction",
        "storageKey": null,
        "args": v1,
        "concreteType": "Transaction",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "system_fee",
          "args": null,
          "storageKey": null
        }, v2, {
          "kind": "LinkedField",
          "alias": null,
          "name": "enrollment",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionInputOutput",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "address",
            "storageKey": null,
            "args": null,
            "concreteType": "Address",
            "plural": false,
            "selections": [v3]
          }, v3]
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "contracts",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionToContractsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToContractsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Contract",
              "plural": false,
              "selections": [v3, {
                "kind": "ScalarField",
                "alias": null,
                "name": "name",
                "args": null,
                "storageKey": null
              }]
            }]
          }]
        }, v4, {
          "kind": "LinkedField",
          "alias": null,
          "name": "transfers",
          "storageKey": null,
          "args": null,
          "concreteType": "TransactionToTransfersConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "TransactionToTransfersEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Transfer",
              "plural": false,
              "selections": [v4, {
                "kind": "ScalarField",
                "alias": null,
                "name": "from_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "to_address_id",
                "args": null,
                "storageKey": null
              }, {
                "kind": "ScalarField",
                "alias": null,
                "name": "value",
                "args": null,
                "storageKey": null
              }, v3]
            }]
          }]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "network_fee",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "type",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "size",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "block_time",
          "args": null,
          "storageKey": null
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "block_id",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "scripts",
          "storageKey": null,
          "args": null,
          "concreteType": "Script",
          "plural": true,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "invocation_script",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "verification_script",
            "args": null,
            "storageKey": null
          }]
        }, {
          "kind": "ScalarField",
          "alias": null,
          "name": "script",
          "args": null,
          "storageKey": null
        }, v3]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '496b9e735d6768b6a046e818d2814d21';
module.exports = node;

/***/ }),
/* 204 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAX_NAME_CHARACTERS", function() { return MAX_NAME_CHARACTERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateName", function() { return validateName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertAccount", function() { return convertAccount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createKeystoreFilename", function() { return createKeystoreFilename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPrivateKey", function() { return getPrivateKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unlockWalletDeprecated", function() { return unlockWalletDeprecated; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extractKeystore", function() { return extractKeystore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "validateAmount", function() { return validateAmount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "doSendAsset", function() { return doSendAsset; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "claimAllGAS", function() { return claimAllGAS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapCurrentLocalWallet", function() { return mapCurrentLocalWallet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapAccounts", function() { return mapAccounts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "selectAccount", function() { return selectAccount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "unlockWallet", function() { return unlockWallet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "updateName", function() { return updateName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deleteAccount", function() { return deleteAccount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addAccount", function() { return addAccount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addNEP2Account", function() { return addNEP2Account; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "addPrivateKeyAccount", function() { return addPrivateKeyAccount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNEP2", function() { return isNEP2; });
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(336);
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(221);
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(365);
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(366);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(13);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _neo_one_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);
/* harmony import */ var _neo_one_client__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_neo_one_client__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(7);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(rxjs__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var recompose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var recompose__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(recompose__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(123);
/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var scrypt_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(290);
/* harmony import */ var scrypt_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(scrypt_js__WEBPACK_IMPORTED_MODULE_10__);
/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(291);
/* harmony import */ var js_sha3__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(js_sha3__WEBPACK_IMPORTED_MODULE_11__);
/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(367);










const MAX_NAME_CHARACTERS = 34;
const validateName = name => {
  if (name.length === 0) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].NAME_TOO_SHORT_ERROR);
  }

  if (name.length > MAX_NAME_CHARACTERS) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].NAME_TOO_LONG_ERROR);
  }
};

const add0x = value => value.startsWith('0x') ? value : `0x${value}`;

const strip0x = value => value.startsWith('0x') ? value.slice(2) : value;

const doConvertAccount = async ({
  appContext: {
    client
  },
  wallet,
  password
}) => {
  const {
    localStorage,
    memory
  } = client.providers;
  const {
    account,
    privateKey
  } = wallet;
  await memory.keystore.deleteAccount(account.id);

  try {
    await localStorage.keystore.addAccount({
      network: account.id.network,
      name: account.name,
      privateKey,
      password
    });
    await client.selectAccount(account.id);
  } catch (error) {
    try {
      await memory.keystore.addAccount({
        network: account.id.network,
        name: account.name,
        privateKey
      });
      await client.selectAccount(account.id);
    } catch (err) {// ignore errors
    }

    throw error;
  }
};

const convertAccount = async input => {
  try {
    return doConvertAccount(input);
  } catch (error) {
    if (error instanceof _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__[/* ClientError */ "b"]) {
      throw error;
    }

    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].CREATE_NEP2_ERROR, error);
  }
};
const createKeystoreFilename = ({
  address
}) => `${address}.txt`;

const prependKey = seedIn => {
  let seed = seedIn;

  while (seed.length < 32) {
    const nullBuff = Buffer.from([0x00]);
    seed = Buffer.concat([nullBuff, seed]);
  }

  return seed;
};

const decipherBuffer = (decipher, data) => Buffer.concat([decipher.update(data), decipher.final()]);

const getPrivateKey = async ({
  keystore,
  password
}) => {
  let derivedKey;
  const {
    kdfparams
  } = keystore.crypto;

  if (keystore.crypto.kdf === 'scrypt') {
    try {
      derivedKey = await new Promise((resolve, reject) => scrypt_js__WEBPACK_IMPORTED_MODULE_10___default()(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen, (error, progress, key) => {
        if (error != null) {
          reject(error);
        } else if (key) {
          resolve(Buffer.from(key));
        }
      }));
    } catch (error) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_DERIVED_KEY_ERROR, error);
    }
  } else if (keystore.crypto.kdf === 'pbkdf2') {
    if (kdfparams.prf !== 'hmac-sha256') {
      throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_UNSUPPORTED_PBKDF2_PARAMETERS);
    }

    try {
      derivedKey = await new Promise((resolve, reject) => crypto__WEBPACK_IMPORTED_MODULE_8___default.a.pbkdf2(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256', (error, key) => {
        if (error != null) {
          reject(error);
        } else {
          resolve(key);
        }
      }));
    } catch (error) {
      throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_DERIVED_KEY_ERROR, error);
    }
  } else {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_UNSUPPORTED_ALGO);
  }

  let ciphertext;
  let mac;

  try {
    ciphertext = Buffer.from(keystore.crypto.ciphertext, 'hex');
    mac = Object(js_sha3__WEBPACK_IMPORTED_MODULE_11__["sha3_256"])(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));
  } catch (error) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_UNKNOWN_CRYPTO_ERROR, error);
  }

  if (mac.toString('hex') !== keystore.crypto.mac) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_WRONG_PASSPHRASE);
  }

  let seed;

  try {
    const decipher = crypto__WEBPACK_IMPORTED_MODULE_8___default.a.createDecipheriv(keystore.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(keystore.crypto.cipherparams.iv, 'hex'));
    seed = prependKey(decipherBuffer(decipher, ciphertext));
  } catch (error) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_DECIPHER_ERROR, error);
  }

  const privateKey = seed.toString('hex');
  const address = Object(_neo_one_client__WEBPACK_IMPORTED_MODULE_5__["privateKeyToAddress"])(privateKey);

  if (address !== keystore.address) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].DECRYPT_KEYSTORE_WRONG_ADDRESS);
  }

  return privateKey;
};
const unlockWalletDeprecated = async ({
  appContext,
  wallet,
  password,
  deleteWallet
}) => {
  const privateKey = await getPrivateKey({
    keystore: wallet.keystore,
    password
  });
  const {
    client,
    network
  } = appContext;
  await client.providers.localStorage.keystore.addAccount({
    network,
    name: wallet.name,
    privateKey,
    password
  });
  deleteWallet();
};

const isValidKDFParams = (kdf, kdfparams) => typeof kdfparams.dklen === 'number' && typeof kdfparams.salt === 'string' && (kdf === 'scrypt' && typeof kdfparams.n === 'number' && typeof kdfparams.r === 'number' && typeof kdfparams.p === 'number' || kdf === 'pbkdf2' && typeof kdfparams.c === 'number' && typeof kdfparams.prf === 'string');

const extractKeystore = ({
  text
}) => {
  if (typeof text !== 'string') {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].EXTRACT_KEYSTORE_INVALID_FILE);
  }

  let keystore;

  try {
    keystore = JSON.parse(text);
  } catch (error) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].EXTRACT_KEYSTORE_INVALID_JSON, error);
  }

  if (!(typeof keystore === 'object' && typeof keystore.version === 'number' && keystore.version === 3 && typeof keystore.id === 'string' && typeof keystore.address === 'string' && keystore.address.length === 34 && typeof keystore.crypto === 'object' && typeof keystore.crypto.ciphertext === 'string' && typeof keystore.crypto.cipherparams === 'object' && typeof keystore.crypto.cipherparams.iv === 'string' && typeof keystore.crypto.cipher === 'string' && typeof keystore.crypto.kdf === 'string' && typeof keystore.crypto.kdfparams === 'object' && isValidKDFParams(keystore.crypto.kdf, keystore.crypto.kdfparams) && typeof keystore.crypto.mac === 'string')) {
    throw new _errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"](_errors__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].EXTRACT_KEYSTORE_INVALID_FORMAT);
  }

  return keystore;
};
const validateAmount = (amount, coin) => {
  let amountNumber;

  try {
    amountNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_4___default.a(amount);
  } catch (error) {// ignore errors
  }

  if (amountNumber == null || amountNumber.toFixed(amountNumber.decimalPlaces()) !== amount) {
    return 'Please enter a number.';
  }

  if (amountNumber.decimalPlaces() > coin.asset.precision) {
    return 'Too many decimal places.';
  }

  const coinValueNumber = new bignumber_js__WEBPACK_IMPORTED_MODULE_4___default.a(coin.value);

  if (amountNumber.gt(coinValueNumber)) {
    return 'Amount entered is more than you own.';
  }

  if (amountNumber.isNegative() || amountNumber.isZero()) {
    return 'Amount must be positive';
  }

  return null;
};
const doSendAsset = async ({
  appContext,
  account,
  toAddress,
  amount,
  assetType,
  assetHash: assetHashIn
}) => {
  const asset = add0x(assetHashIn);
  const {
    client,
    readClient,
    network
  } = appContext;
  const transactionOptions = {
    from: account
  };

  if (assetType === 'NEP5') {
    const decimals = await _neo_one_client__WEBPACK_IMPORTED_MODULE_5__["nep5"].getDecimals(readClient, asset);
    const contract = _neo_one_client__WEBPACK_IMPORTED_MODULE_5__["nep5"].createNEP5SmartContract(client, {
      [network]: {
        address: asset
      }
    }, decimals);
    const result = await contract.transfer(account.address, toAddress, amount, transactionOptions);
    return strip0x(result.transaction.hash);
  }

  const result = await client.transfer(amount, asset, toAddress, transactionOptions);
  return strip0x(result.transaction.hash);
};
const claimAllGAS = ({
  appContext,
  account: accountID,
  onProgress
}) => appContext.monitor.withData({
  [_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_1__[/* labels */ "a"].NEO_ADDRESS]: accountID.address
}).captureSpanLog(async span => {
  const callOnProgress = progress => {
    if (onProgress) {
      onProgress(progress);
    }
  };

  const {
    client,
    readClient
  } = appContext;
  const transactionOptions = {
    from: accountID,
    monitor: span
  };
  callOnProgress({
    type: 'fetch-unspent-sending'
  });
  const [account, appOptions] = await Promise.all([readClient.getAccount(accountID.address, span), appContext.options$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["take"])(1)).toPromise()]);
  const neoBalance = account.balances[_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__[/* NEO_ASSET_HASH_0X */ "e"]] || _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_3__[/* numbers */ "a"].ZERO;
  callOnProgress({
    type: 'fetch-unspent-done'
  });

  if (neoBalance.gt(_neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_3__[/* numbers */ "a"].ZERO)) {
    callOnProgress({
      type: 'spend-all-sending'
    });
    const result = await client.transfer(neoBalance, _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_2__[/* NEO_ASSET_HASH_0X */ "e"], account.address, transactionOptions);
    callOnProgress({
      type: 'spend-all-confirming',
      hash: strip0x(result.transaction.hash)
    });
    await result.confirmed({
      timeoutMS: appOptions.confirmLimitMS,
      monitor: span
    });
    callOnProgress({
      type: 'spend-all-confirmed'
    });
  } else {
    callOnProgress({
      type: 'spend-all-skip'
    });
  }

  try {
    callOnProgress({
      type: 'claim-gas-sending'
    });
    const result = await client.claim(transactionOptions);
    callOnProgress({
      type: 'claim-gas-confirming',
      hash: strip0x(result.transaction.hash)
    });
    await result.confirmed({
      timeoutMS: appOptions.confirmLimitMS,
      monitor: span
    });
    callOnProgress({
      type: 'claim-gas-confirmed'
    });
  } catch (error) {
    if (error.code === 'NOTHING_TO_CLAIM') {
      callOnProgress({
        type: 'claim-gas-skip'
      });
    } else {
      throw error;
    }
  }
}, {
  name: 'neotracker_wallet_claim_all_gas'
});
const mapCurrentLocalWallet = Object(recompose__WEBPACK_IMPORTED_MODULE_7__["compose"])(Object(recompose__WEBPACK_IMPORTED_MODULE_7__["getContext"])({
  appContext: () => null
}), Object(recompose__WEBPACK_IMPORTED_MODULE_7__["mapPropsStream"])(props$ => props$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["switchMap"])(props => {
  const {
    client
  } = props.appContext;
  return client.currentAccount$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["switchMap"])(account => {
    let wallet$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(null);

    if (account != null) {
      if (account.type === 'memory') {
        wallet$ = client.providers.memory.keystore.getWallet$(account.id);
      }

      if (account.type === 'localStorage') {
        wallet$ = client.providers.localStorage.keystore.getWallet$(account.id);
      }
    }

    return Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["combineLatest"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_6__["of"])(account), wallet$);
  }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["map"])(([account, wallet]) => ({ ...props,
    account,
    wallet
  })));
}))));
const mapAccounts = Object(recompose__WEBPACK_IMPORTED_MODULE_7__["compose"])(Object(recompose__WEBPACK_IMPORTED_MODULE_7__["getContext"])({
  appContext: () => null
}), Object(recompose__WEBPACK_IMPORTED_MODULE_7__["mapPropsStream"])(props$ => props$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["switchMap"])(props => {
  const {
    client
  } = props.appContext;
  return client.accounts$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_9__["map"])(accounts => ({ ...props,
    accounts
  })));
}))));
const selectAccount = async ({
  appContext,
  id
}) => {
  const {
    client
  } = appContext;
  await client.selectAccount(id);
};
const unlockWallet = async ({
  appContext: {
    client
  },
  id,
  password
}) => {
  await client.providers.localStorage.keystore.unlockWallet({
    id,
    password
  });
};
const updateName = async ({
  appContext: {
    client
  },
  id,
  name
}) => {
  await client.updateAccountName({
    id,
    name
  });
};
const deleteAccount = async ({
  appContext: {
    client
  },
  id
}) => {
  await client.deleteAccount(id);
  const accounts = client.getAccounts();
  const [account] = accounts;
  await client.selectAccount(account == null ? undefined : account.id);
};
const addAccount = async ({
  appContext: {
    network,
    client
  },
  privateKey,
  password,
  nep2
}) => {
  const wallet = await client.providers.localStorage.keystore.addAccount({
    network,
    privateKey,
    password,
    nep2
  });
  await client.selectAccount(wallet.account.id);
};
const addNEP2Account = async ({
  appContext: {
    network,
    client
  },
  nep2,
  password,
  address
}) => {
  const wallet = await client.providers.localStorage.keystore.addAccount({
    network,
    nep2,
    password,
    address
  });
  await client.selectAccount(wallet.account.id);
};
const addPrivateKeyAccount = async ({
  appContext: {
    network,
    client
  },
  privateKey
}) => {
  const wallet = await client.providers.memory.keystore.addAccount({
    network,
    privateKey
  });
  await client.selectAccount(wallet.account.id);
};
const isNEP2 = value => typeof value === 'string' && Object(_neo_one_client__WEBPACK_IMPORTED_MODULE_5__["isNEP2"])(value);

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type CoinTable_coins$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AccountViewBase_address$ref: FragmentReference;
export type AccountViewBase_address = {|
  +coins: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +$fragmentRefs: CoinTable_coins$ref
      |}
    |}>
  |},
  +claim_value_available_coin: {|
    +value: string
  |},
  +$refType: AccountViewBase_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AccountViewBase_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "LinkedField",
    "alias": null,
    "name": "coins",
    "storageKey": null,
    "args": null,
    "concreteType": "AddressToCoinsConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "AddressToCoinsEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Coin",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "CoinTable_coins",
          "args": null
        }]
      }]
    }]
  }, {
    "kind": "LinkedField",
    "alias": null,
    "name": "claim_value_available_coin",
    "storageKey": null,
    "args": null,
    "concreteType": "Coin",
    "plural": false,
    "selections": [{
      "kind": "ScalarField",
      "alias": null,
      "name": "value",
      "args": null,
      "storageKey": null
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '38dd63f96713136654e5e3774333acd6';
module.exports = node;

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AccountViewBase_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type AccountView_address$ref: FragmentReference;
export type AccountView_address = {|
  +$fragmentRefs: AccountViewBase_address$ref,
  +$refType: AccountView_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "AccountView_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AccountViewBase_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c225b160f40579bdde5032d2776c4e1b';
module.exports = node;

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AccountView_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type SelectCard_address$ref: FragmentReference;
export type SelectCard_address = {|
  +$fragmentRefs: AccountView_address$ref,
  +$refType: SelectCard_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "SelectCard_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AccountView_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '468632a3387cc28b19cbb7d75ec69522';
module.exports = node;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
import type { FragmentReference } from "relay-runtime";
declare export opaque type SendTransaction_address$ref: FragmentReference;
export type SendTransaction_address = {|
  +coins: {|
    +edges: $ReadOnlyArray<{|
      +node: {|
        +value: string,
        +asset: {|
          +type: string,
          +id: string,
          +precision: number,
          +symbol: string,
        |},
      |}
    |}>
  |},
  +$refType: SendTransaction_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "SendTransaction_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "LinkedField",
    "alias": null,
    "name": "coins",
    "storageKey": null,
    "args": null,
    "concreteType": "AddressToCoinsConnection",
    "plural": false,
    "selections": [{
      "kind": "LinkedField",
      "alias": null,
      "name": "edges",
      "storageKey": null,
      "args": null,
      "concreteType": "AddressToCoinsEdge",
      "plural": true,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "node",
        "storageKey": null,
        "args": null,
        "concreteType": "Coin",
        "plural": false,
        "selections": [{
          "kind": "ScalarField",
          "alias": null,
          "name": "value",
          "args": null,
          "storageKey": null
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "asset",
          "storageKey": null,
          "args": null,
          "concreteType": "Asset",
          "plural": false,
          "selections": [{
            "kind": "ScalarField",
            "alias": null,
            "name": "type",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "id",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "precision",
            "args": null,
            "storageKey": null
          }, {
            "kind": "ScalarField",
            "alias": null,
            "name": "symbol",
            "args": null,
            "storageKey": null
          }]
        }]
      }]
    }]
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c292c6bfc5ce1b8aa1c21d4133363939';
module.exports = node;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type SendTransaction_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransferView_address$ref: FragmentReference;
export type TransferView_address = {|
  +$fragmentRefs: SendTransaction_address$ref,
  +$refType: TransferView_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransferView_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "SendTransaction_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '8d02dabec2d7824bb6e6cecf8a69a158';
module.exports = node;

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type TransferView_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type TransferCard_address$ref: FragmentReference;
export type TransferCard_address = {|
  +$fragmentRefs: TransferView_address$ref,
  +$refType: TransferCard_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "TransferCard_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "TransferView_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '0bd437c0a4e8562ca65da75348f724ed';
module.exports = node;

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AddressTransactionPagingView_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type WalletTransactionsCard_address$ref: FragmentReference;
export type WalletTransactionsCard_address = {|
  +$fragmentRefs: AddressTransactionPagingView_address$ref,
  +$refType: WalletTransactionsCard_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "WalletTransactionsCard_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AddressTransactionPagingView_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = '9b369c841c295b6f06dc855e0abf8603';
module.exports = node;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/*::
import type { ConcreteFragment } from 'relay-runtime';
type AddressTransferPagingView_address$ref = any;
import type { FragmentReference } from "relay-runtime";
declare export opaque type WalletTransfersCard_address$ref: FragmentReference;
export type WalletTransfersCard_address = {|
  +$fragmentRefs: AddressTransferPagingView_address$ref,
  +$refType: WalletTransfersCard_address$ref,
|};
*/

const node
/*: ConcreteFragment*/
= {
  "kind": "Fragment",
  "name": "WalletTransfersCard_address",
  "type": "Address",
  "metadata": null,
  "argumentDefinitions": [],
  "selections": [{
    "kind": "FragmentSpread",
    "name": "AddressTransferPagingView_address",
    "args": null
  }]
}; // prettier-ignore

node
/*: any*/
.hash = 'c1c90f1911ddb52fc464ea0b008a56e2';
module.exports = node;

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * 
 * @relayHash 7d64d178e13264e9b127cd74346eb943
 */

/* eslint-disable */

/*::
import type { ConcreteRequest } from 'relay-runtime';
type SelectCard_address$ref = any;
type TransferCard_address$ref = any;
type WalletTransactionsCard_address$ref = any;
type WalletTransfersCard_address$ref = any;
export type MainWalletViewQueryVariables = {|
  hash: string
|};
export type MainWalletViewQueryResponse = {|
  +address: ?{|
    +$fragmentRefs: SelectCard_address$ref & TransferCard_address$ref & WalletTransactionsCard_address$ref & WalletTransfersCard_address$ref
  |}
|};
export type MainWalletViewQuery = {|
  variables: MainWalletViewQueryVariables,
  response: MainWalletViewQueryResponse,
|};
*/

/*
query MainWalletViewQuery(
  $hash: String!
) {
  address(hash: $hash) {
    ...SelectCard_address
    ...TransferCard_address
    ...WalletTransactionsCard_address
    ...WalletTransfersCard_address
    id
  }
}

fragment SelectCard_address on Address {
  ...AccountView_address
}

fragment TransferCard_address on Address {
  ...TransferView_address
}

fragment WalletTransactionsCard_address on Address {
  ...AddressTransactionPagingView_address
}

fragment WalletTransfersCard_address on Address {
  ...AddressTransferPagingView_address
}

fragment AddressTransferPagingView_address on Address {
  id
}

fragment AddressTransactionPagingView_address on Address {
  id
}

fragment TransferView_address on Address {
  ...SendTransaction_address
}

fragment SendTransaction_address on Address {
  coins {
    edges {
      node {
        value
        asset {
          type
          id
          precision
          symbol
        }
        id
      }
    }
  }
}

fragment AccountView_address on Address {
  ...AccountViewBase_address
}

fragment AccountViewBase_address on Address {
  coins {
    edges {
      node {
        ...CoinTable_coins
        id
      }
    }
  }
  claim_value_available_coin {
    value
    id
  }
}

fragment CoinTable_coins on Coin {
  value
  asset {
    id
    symbol
  }
}
*/

const node
/*: ConcreteRequest*/
= function () {
  var v0 = [{
    "kind": "LocalArgument",
    "name": "hash",
    "type": "String!",
    "defaultValue": null
  }],
      v1 = [{
    "kind": "Variable",
    "name": "hash",
    "variableName": "hash",
    "type": "String!"
  }],
      v2 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "value",
    "args": null,
    "storageKey": null
  },
      v3 = {
    "kind": "ScalarField",
    "alias": null,
    "name": "id",
    "args": null,
    "storageKey": null
  };
  return {
    "kind": "Request",
    "operationKind": "query",
    "name": "MainWalletViewQuery",
    "id": "18",
    "text": null,
    "metadata": {},
    "fragment": {
      "kind": "Fragment",
      "name": "MainWalletViewQuery",
      "type": "Query",
      "metadata": null,
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [{
          "kind": "FragmentSpread",
          "name": "SelectCard_address",
          "args": null
        }, {
          "kind": "FragmentSpread",
          "name": "TransferCard_address",
          "args": null
        }, {
          "kind": "FragmentSpread",
          "name": "WalletTransactionsCard_address",
          "args": null
        }, {
          "kind": "FragmentSpread",
          "name": "WalletTransfersCard_address",
          "args": null
        }]
      }]
    },
    "operation": {
      "kind": "Operation",
      "name": "MainWalletViewQuery",
      "argumentDefinitions": v0,
      "selections": [{
        "kind": "LinkedField",
        "alias": null,
        "name": "address",
        "storageKey": null,
        "args": v1,
        "concreteType": "Address",
        "plural": false,
        "selections": [{
          "kind": "LinkedField",
          "alias": null,
          "name": "coins",
          "storageKey": null,
          "args": null,
          "concreteType": "AddressToCoinsConnection",
          "plural": false,
          "selections": [{
            "kind": "LinkedField",
            "alias": null,
            "name": "edges",
            "storageKey": null,
            "args": null,
            "concreteType": "AddressToCoinsEdge",
            "plural": true,
            "selections": [{
              "kind": "LinkedField",
              "alias": null,
              "name": "node",
              "storageKey": null,
              "args": null,
              "concreteType": "Coin",
              "plural": false,
              "selections": [v2, {
                "kind": "LinkedField",
                "alias": null,
                "name": "asset",
                "storageKey": null,
                "args": null,
                "concreteType": "Asset",
                "plural": false,
                "selections": [v3, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "symbol",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "type",
                  "args": null,
                  "storageKey": null
                }, {
                  "kind": "ScalarField",
                  "alias": null,
                  "name": "precision",
                  "args": null,
                  "storageKey": null
                }]
              }, v3]
            }]
          }]
        }, {
          "kind": "LinkedField",
          "alias": null,
          "name": "claim_value_available_coin",
          "storageKey": null,
          "args": null,
          "concreteType": "Coin",
          "plural": false,
          "selections": [v2, v3]
        }, v3]
      }]
    }
  };
}(); // prettier-ignore


node
/*: any*/
.hash = '647fdbf3ddc446138a9c15d55a74d0b9';
module.exports = node;

/***/ }),
/* 214 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);

// EXTERNAL MODULE: external "react-loadable"
var external_react_loadable_ = __webpack_require__(61);
var external_react_loadable_default = /*#__PURE__*/__webpack_require__.n(external_react_loadable_);

// EXTERNAL MODULE: external "react-router"
var external_react_router_ = __webpack_require__(17);

// EXTERNAL MODULE: external "react-helmet"
var external_react_helmet_ = __webpack_require__(15);
var external_react_helmet_default = /*#__PURE__*/__webpack_require__.n(external_react_helmet_);

// EXTERNAL MODULE: external "reakit"
var external_reakit_ = __webpack_require__(93);

// EXTERNAL MODULE: external "styled-components"
var external_styled_components_ = __webpack_require__(107);
var external_styled_components_default = /*#__PURE__*/__webpack_require__.n(external_styled_components_);

// EXTERNAL MODULE: ./packages/neotracker-shared-web-next/src/components/render/WithAppContext.tsx
var WithAppContext = __webpack_require__(127);

// EXTERNAL MODULE: ./packages/neotracker-shared-web-next/src/components/render/FromStream.tsx
var FromStream = __webpack_require__(128);

// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/components/render/WithAppOptions.tsx



const WithAppOptions = ({
  children
}) => external_react_["createElement"](WithAppContext["b" /* WithAppContext */], null, ({
  options$
}) => external_react_["createElement"](FromStream["a" /* FromStream */], {
  "props$": options$
}, children));
// EXTERNAL MODULE: external "tslib"
var external_tslib_ = __webpack_require__(65);

// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/components/render/WithRouter.tsx




class WithRouter_WithRouterComponent extends external_react_["Component"] {
  render() {
    const _a = this.props,
          {
      children
    } = _a,
          props = external_tslib_["__rest"](_a, ["children"]);

    return children(props);
  }

}

const WithRouter = Object(external_react_router_["withRouter"])(WithRouter_WithRouterComponent);
// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/theme/Theme.ts
const createTheme = () => ({
  primary: 'blue',
  secondary: 'green'
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/AppShell.tsx






const theme = createTheme();
const Root = external_styled_components_default()(external_reakit_["Base"]).withConfig({
  displayName: "AppShell__Root",
  componentId: "go7srg-0"
})(["height:100%;"]);
const AppShell = ({
  appContext,
  children
}) => external_react_["createElement"](external_react_["StrictMode"], null, external_react_["createElement"](WithAppContext["a" /* AppContextProvider */], {
  value: appContext
}, external_react_["createElement"](external_styled_components_["ThemeProvider"], {
  theme: theme
}, external_react_["createElement"](Root, null, external_react_["createElement"](WithAppOptions, null, appOptions => external_react_["createElement"](WithRouter, null, ({
  location
}) => {
  const {
    title
  } = appOptions.meta;
  const path = location.pathname.endsWith('/') ? location.pathname.slice(0, -1) : location.pathname;
  const canonicalURL = `${appOptions.url}${path}`;
  return external_react_["createElement"](external_react_["Fragment"], null, external_react_["createElement"](external_react_helmet_default.a, {
    titleTemplate: `%s - ${title}`,
    defaultTitle: title
  }, external_react_["createElement"]("html", {
    lang: "en"
  }), external_react_["createElement"]("meta", {
    name: "application-name",
    content: appOptions.meta.name
  }), external_react_["createElement"]("meta", {
    name: "description",
    content: appOptions.meta.description
  }), external_react_["createElement"]("meta", {
    charSet: "utf-8"
  }), external_react_["createElement"]("meta", {
    httpEquiv: "X-UA-Compatible",
    content: "IE=edge"
  }), external_react_["createElement"]("meta", {
    name: "viewport",
    content: "width=device-width, initial-scale=1"
  }), external_react_["createElement"]("link", {
    rel: "apple-touch-icon",
    sizes: "180x180",
    href: "/apple-touch-icon.png"
  }), external_react_["createElement"]("link", {
    rel: "icon",
    type: "image/png",
    sizes: "32x32",
    href: "/favicon-32x32.png"
  }), external_react_["createElement"]("link", {
    rel: "icon",
    type: "image/png",
    sizes: "16x16",
    href: "/favicon-16x16.png"
  }), external_react_["createElement"]("link", {
    rel: "manifest",
    href: "/manifest.json"
  }), external_react_["createElement"]("link", {
    rel: "mask-icon",
    href: "/safari-pinned-tab.svg",
    color: theme.primary
  }), external_react_["createElement"]("meta", {
    name: "theme-color",
    content: theme.secondary
  }), external_react_["createElement"]("link", {
    rel: "canonical",
    href: canonicalURL
  }), external_react_["createElement"]("script", {
    type: "application/ld+json"
  }, `{
                      "@context": "http://schema.org",
                      "@type": "WebSite",
                      "name": "${appOptions.meta.name}",
                      "url": "${canonicalURL}"
                    }`)), children);
}))))));
// EXTERNAL MODULE: external "@neo-one/monitor"
var monitor_ = __webpack_require__(14);

// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/metrics.ts
 // Note: Remove disable once more metrics have been added
// tslint:disable-next-line export-name

const NEOTRACKER_SESSION = monitor_["metrics"].createCounter({
  name: 'neotracker_session'
});
// EXTERNAL MODULE: ./packages/neotracker-shared-web-next/src/routes.ts
var routes = __webpack_require__(85);

// CONCATENATED MODULE: ./packages/neotracker-shared-web-next/src/App.tsx
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ROUTE_CONFIGS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return App_App; });






const ROUTE_CONFIGS = [{
  exact: true,
  path: routes["HOME"],
  component: external_react_loadable_default()({
    // tslint:disable-next-line promise-function-async
    loader: () => __webpack_require__.e(/* import() */ 1).then(__webpack_require__.bind(null, 335)).then(value => value.Home),
    modules: ['./pages/Home'],
    webpack: () => [/*require.resolve*/(335)],
    // tslint:disable-next-line no-null-keyword
    loading: () => null
  })
}, {
  exact: false,
  path: undefined,
  component: external_react_loadable_default()({
    // tslint:disable-next-line promise-function-async
    loader: () => __webpack_require__.e(/* import() */ 2).then(__webpack_require__.bind(null, 333)).then(value => value.Error404),
    modules: ['./pages/Error404'],
    webpack: () => [/*require.resolve*/(333)],
    // tslint:disable-next-line no-null-keyword
    loading: () => null
  })
}];
const ROUTE_CONFIGS_WITH_RENDER = ROUTE_CONFIGS.map(config => Object.assign({}, config, {
  // tslint:disable-next-line no-any no-unnecessary-type-annotation
  render: props => {
    const {
      component: Component
    } = config;

    if (props.staticContext !== undefined) {
      if (config.exact) {
        // tslint:disable-next-line no-object-mutation no-any
        props.staticContext.routePath = props.match.path;
      } else {
        // tslint:disable-next-line no-object-mutation no-any
        props.staticContext.missed = true;
      }
    }

    return external_react_["createElement"](Component, Object.assign({}, props));
  }
}));
class App_App extends external_react_["Component"] {
  render() {
    return external_react_["createElement"](AppShell, {
      appContext: this.props.appContext
    }, external_react_["createElement"](external_react_router_["Switch"], null, ROUTE_CONFIGS_WITH_RENDER.map(config => external_react_["createElement"](external_react_router_["Route"], {
      key: config.path === undefined ? 'nopath' : config.path,
      exact: config.exact,
      path: config.path,
      render: config.render
    }))));
  }

  componentDidMount() {
    NEOTRACKER_SESSION.inc();
  }

}

/***/ }),
/* 215 */
/***/ (function(module, exports) {

module.exports = require("http");

/***/ }),
/* 216 */
/***/ (function(module, exports) {

module.exports = require("koa");

/***/ }),
/* 217 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return makeJSONSchema; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return makeRelationMappings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createTable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return dropTable; });
/* unused harmony export dropIndices */
/* unused harmony export createIndices */
/* unused harmony export refreshTriggers */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(65);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tslib__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _knexUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(49);
/* harmony import */ var _QueryContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(218);





const makeJSONField = field => {
  const fieldType = field.type;
  let type;

  switch (fieldType.type) {
    case 'id':
    case 'foreignID':
      type = field.required ? ['string', 'integer'] : ['string', 'integer', 'null'];
      return Object.assign({}, fieldType, {
        type
      });

    case 'string':
      type = field.required ? 'string' : ['string', 'null'];

      if (fieldType.enum) {
        // tslint:disable-next-line no-unused
        const _a = Object.assign({}, fieldType, {
          type
        }),
              {
          enum: deleted
        } = _a,
              copiedFieldType = tslib__WEBPACK_IMPORTED_MODULE_0__["__rest"](_a, ["enum"]); // @ts-ignore


        const enumType = field.required ? fieldType.enum : fieldType.enum.concat([undefined]);
        return {
          allOf: [copiedFieldType, {
            enum: enumType
          }]
        };
      }

      return Object.assign({}, fieldType, {
        type
      });

    case 'bigInteger':
      type = field.required ? 'string' : ['string', 'null'];
      return Object.assign({}, fieldType, {
        type
      });

    case 'integer':
      type = field.required ? 'integer' : ['integer', 'null'];
      return Object.assign({}, fieldType, {
        type
      });

    case 'decimal':
      type = field.required ? 'string' : ['string', 'null'];
      return Object.assign({}, fieldType, {
        type
      });

    case 'number':
      type = field.required ? 'number' : ['number', 'null'];
      return Object.assign({}, fieldType, {
        type
      });

    case 'boolean':
      return fieldType;

    case 'array':
      return fieldType;

    case 'json':
      return {
        type: 'string'
      };

    case 'tsvector':
      return undefined;

    default:
      throw new Error(`Unknown field type: ${JSON.stringify(fieldType)}`);
  }
};

const makeJSONSchema = fieldSchema => {
  const required = Object.entries(fieldSchema).filter( // tslint:disable-next-line no-unused
  ([__, field]) => field.required && !field.computed && !field.auto && // @ts-ignore
  field.type.default == undefined) // tslint:disable-next-line no-unused
  .map(([fieldName, __]) => fieldName);
  const properties = Object.entries(fieldSchema).reduce((acc, [fieldName, field]) => {
    if (!field.computed) {
      const jsonField = makeJSONField(field);

      if (jsonField !== undefined) {
        return Object.assign({}, acc, {
          [fieldName]: jsonField
        });
      }
    }

    return acc;
  }, {});
  return {
    type: 'object',
    required: required.length ? required : undefined,
    properties
  };
};
const makeRelationMappings = edgeSchema => {
  if (edgeSchema === undefined) {
    return {};
  }

  return Object.entries(edgeSchema).reduce((acc, [edgeName, edge]) => Object.assign({}, acc, {
    [edgeName]: edge.relation
  }), {});
};

const getColumnType = fieldType => {
  switch (fieldType.type) {
    case 'id':
    case 'foreignID':
    case 'integer':
      return 'integer';

    case 'bigInteger':
      return 'bigInteger';

    case 'decimal':
      return 'numeric';

    case 'string':
      return `varchar(${fieldType.maxLength === undefined ? 255 : fieldType.maxLength})`;

    case 'number':
      return 'float8';

    case 'boolean':
      return 'boolean';

    default:
      throw new Error(`Unknown field type: ${fieldType.type}`);
  }
};

const isBigIntID = (modelSchemas, modelType) => // tslint:disable-next-line strict-type-predicates
modelSchemas[modelType].fields.id !== undefined && modelSchemas[modelType].fields.id.type.type === 'id' && // @ts-ignore
modelSchemas[modelType].fields.id.type.big;

const isAnyBigIntID = (modelSchemas, modelType) => {
  if (typeof modelType === 'string') {
    return isBigIntID(modelSchemas, modelType);
  }

  return lodash__WEBPACK_IMPORTED_MODULE_1___default.a.some(modelType.map(modelTpe => isBigIntID(modelSchemas, modelTpe)));
};

const addColumn = (db, table, fieldName, field, modelSchemas) => {
  let col;
  const fieldType = field.type;

  if (fieldName === 'created_at') {
    col = table.integer(fieldName).unsigned().defaultTo(db.raw('extract(epoch FROM now())'));
  } else if (fieldName === 'updated_at') {
    col = table.integer(fieldName).unsigned().defaultTo(db.raw('extract(epoch FROM now())'));
  } else {
    switch (fieldType.type) {
      case 'id':
        col = fieldType.big ? table.bigIncrements(fieldName) : table.increments(fieldName);
        col.primary().unique().notNullable().unsigned();
        break;

      case 'foreignID':
        col = isAnyBigIntID(modelSchemas, fieldType.modelType) ? table.bigInteger(fieldName) : table.integer(fieldName);
        col.unsigned();
        break;

      case 'integer':
        col = table.integer(fieldName);

        if (fieldType.minimum !== undefined && fieldType.minimum >= 0) {
          col.unsigned();
        }

        break;

      case 'bigInteger':
        col = table.bigInteger(fieldName);

        if (fieldType.minimum !== undefined && fieldType.minimum >= 0) {
          col.unsigned();
        }

        break;

      case 'decimal':
        col = table.specificType(fieldName, 'numeric');
        break;

      case 'string':
        col = table.text(fieldName); // col = table.string(fieldName, fieldType.maxLength || 255);

        break;

      case 'number':
        col = table.float(fieldName);
        break;

      case 'boolean':
        col = table.boolean(fieldName);
        break;

      case 'array':
        col = table.specificType(fieldName, `${getColumnType(fieldType.items)}[]`);
        break;

      case 'json':
        col = table.jsonb(fieldName);
        break;

      case 'model':
        throw new Error(`Models/Interfaces cannot be columns in the Model. See ${fieldName}`);

      case 'tsvector':
        // @ts-ignore
        col = table.specificType(fieldName, 'tsvector').notNullable().index(undefined, 'GIN');
        break;

      default:
        throw new Error(`Unknown field type for ${fieldName}`);
    }
  }

  if (field.required || fieldType.type === 'id') {
    col.notNullable();
  } else {
    col.nullable();
  }

  if (field.unique) {
    col.unique();
  } else if (field.index) {
    col.index();
  } // @ts-ignore


  if (fieldType.default !== undefined) {
    // @ts-ignore
    col.defaultTo(fieldType.default);
  }
};

const getCreateIndex = (index, tableName) => {
  if (index.type === 'order') {
    const orderCols = index.columns.map(col => `${col.name} ${col.order}`).join(', ');
    let orderUnique = '';

    if (index.unique) {
      orderUnique = 'UNIQUE ';
    }

    return `
      CREATE ${orderUnique}INDEX IF NOT EXISTS ${index.name} ON ${tableName} (${orderCols});
    `;
  }

  const cols = index.columnNames.map(col => `${col}`).join(', ');
  let unique = '';

  if (index.unique) {
    unique = 'UNIQUE ';
  }

  return `
    CREATE ${unique}INDEX IF NOT EXISTS ${index.name} ON ${tableName} (${cols});
  `;
};

const createTable = async (db, monitor, modelSchema, modelSchemas, bare) => {
  const schema = db.schema;
  let executeSchema;

  if (modelSchema.materializedView !== undefined) {
    // tslint:disable-next-line no-non-null-assertion
    executeSchema = currentSchema => currentSchema.raw(modelSchema.materializedView);
  } else {
    executeSchema = currentSchema => {
      currentSchema.createTable(modelSchema.tableName, table => {
        Object.entries(modelSchema.fields).forEach(([fieldName, field]) => {
          if (!field.computed) {
            addColumn(db, table, fieldName, field, modelSchemas);
          }
        });

        if (!bare) {
          if (lodash__WEBPACK_IMPORTED_MODULE_1___default.a.isEqual(modelSchema.id, ['id1', 'id2'])) {
            table.primary(['id1', 'id2']);
          }

          modelSchema.indices.forEach(index => {
            if (index.type === 'simple') {
              if (index.unique) {
                table.unique([...index.columnNames], index.name);
              } else {
                table.index([...index.columnNames], index.name);
              }
            } else if (index.type === 'order' && Object(_knexUtils__WEBPACK_IMPORTED_MODULE_2__[/* isSqlite */ "b"])(db)) {
              const columns = index.columns.map(col => col.name);

              if (index.unique) {
                table.unique(columns, index.name);
              } else {
                table.index(columns, index.name);
              }
            }
          });
        }
      });

      if (!bare && Object(_knexUtils__WEBPACK_IMPORTED_MODULE_2__[/* isPostgres */ "a"])(db)) {
        modelSchema.indices.forEach(index => {
          if (index.type === 'order') {
            currentSchema.raw(getCreateIndex(index, modelSchema.tableName));
          }
        });
      }

      return currentSchema;
    };
  }

  const exists = await schema.queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor)).hasTable(modelSchema.tableName);

  if (!exists) {
    if (bare) {
      await executeSchema(schema);
    } else {
      await modelSchema.chainCustomAfter(executeSchema(modelSchema.chainCustomBefore(schema)));
    }
  }
};
const dropTable = async (db, monitor, modelSchema, checkEmpty = false) => {
  const schema = db.schema;

  if (modelSchema.materializedView === undefined) {
    if (checkEmpty) {
      const exists = await schema.queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor)).hasTable(modelSchema.tableName);

      if (!exists) {
        return;
      }

      const result = await db(modelSchema.tableName).select('*').limit(1).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));

      if (result.length === 0) {
        return;
      }
    }

    await schema.dropTableIfExists(modelSchema.tableName).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));
  } else {
    await schema.raw(`
      DROP MATERIALIZED VIEW IF EXISTS ${modelSchema.tableName} CASCADE;
    `).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));
  }
};
const EMPTY_DROP_INDICES = 'query string argument of EXECUTE is null';
const dropIndices = async (db, monitor, tableName) => {
  if (db.client.driverName !== 'pg') {
    throw new Error('Not implemented');
  }

  try {
    await db.raw(`
      DO
      $$BEGIN
         EXECUTE (
         SELECT string_agg('ALTER TABLE ${tableName} DROP CONSTRAINT ' || conname, '; ')
         FROM   pg_constraint
         WHERE conrelid::regclass::text = '${tableName}'
         );
      END$$;
    `).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));
  } catch (error) {
    if (!error.message.includes(EMPTY_DROP_INDICES)) {
      throw error;
    }
  }

  try {
    await db.raw(`
      DO
      $$BEGIN
         EXECUTE (
         SELECT 'DROP INDEX ' || string_agg(indexname, ', ')
         FROM   pg_indexes
         WHERE tablename = '${tableName}'
         );
      END$$;
    `).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));
  } catch (error) {
    if (!error.message.includes(EMPTY_DROP_INDICES)) {
      throw error;
    }
  }
};
const createIndices = async (db, monitor, modelSchema) => {
  await Promise.all(modelSchema.indices.map(index => db.raw(getCreateIndex(index, modelSchema.tableName)).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor))));
};
const refreshTriggers = async (db, monitor, modelSchema) => {
  await modelSchema.chainCustomAfter(modelSchema.chainCustomBefore(db.schema)).queryContext(Object(_QueryContext__WEBPACK_IMPORTED_MODULE_3__[/* makeAllPowerfulQueryContext */ "a"])(monitor));
};

/***/ }),
/* 218 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return makeQueryContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return makeAllPowerfulQueryContext; });
/* harmony import */ var _Base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(73);


async function verifyCanView(model, context) {
  if (model instanceof _Base__WEBPACK_IMPORTED_MODULE_0__[/* Base */ "a"]) {
    const canView = await model.canView(context);
    return canView ? model : undefined;
  }

  return model;
}

function makeQueryContext({
  rootLoader,
  monitor,
  isAllPowerful
}) {
  const queryContext = {
    type: 'normal',

    get rootLoader() {
      return rootLoader();
    },

    monitor,
    isAllPowerful: !!isAllPowerful,
    // tslint:disable-next-line no-unused
    runBefore: (__, queryBuilder) => {
      queryBuilder.options({
        queryContext: queryBuilder.context()
      });
    },
    runAfter: undefined
  }; // @ts-ignore

  queryContext.runAfter = async models => {
    // tslint:disable no-object-mutation
    if (isAllPowerful) {
      return models;
    }

    if (models == undefined) {
      return models;
    }

    if (Array.isArray(models)) {
      const newModels = await Promise.all(models.map(async model => verifyCanView(model, queryContext)));
      return newModels.filter(model => model != undefined);
    }

    return verifyCanView(models, queryContext);
  };

  return queryContext;
}
function makeAllPowerfulQueryContext(monitor) {
  return {
    type: 'allPowerful',
    isAllPowerful: true,
    monitor,
    // @ts-ignore
    runBefore: (__, queryBuilder) => {
      queryBuilder.options({
        queryContext: queryBuilder.context()
      });
    }
  };
}

/***/ }),
/* 219 */
/***/ (function(module, exports) {

module.exports = require("pg");

/***/ }),
/* 220 */
/***/ (function(module, exports) {

module.exports = require("dataloader");

/***/ }),
/* 221 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return labels; });
const labels = {
  CLUSTER_NAME: 'cluster.name',
  // Was this for a new keystore or an existing private key?
  CREATE_KEYSTORE_NEW: 'create.keystore.new',
  // Differentiates click locations
  CLICK_SOURCE: 'click.source',
  // React component stack
  COMPONENT_STACK: 'react.component_stack',
  // Websocket related properties
  WEBSOCKET_URL: 'websocket.url',
  WEBSOCKET_CLOSE_CODE: 'websocket.close.code',
  WEBSOCKET_CLOSE_REASON: 'websocket.close.reason',
  WEBSOCKET_MESSAGE_TYPE: 'websocket.message.type',
  WEBSOCKET_MESSAGEJSON: 'websocket.message_json',
  WEBSOCKET_PROTOCOLS: 'websocket.protocols',
  // GraphQL related propreties
  GRAPHQL_QUERY: 'graphql.query',
  GRAPHQL_VARIABLES: 'graphql.variables',
  GRAPHQL_LIVE_NAME: 'graphql.live.name',
  GRAPHQL_PATH: 'graphql.path',
  // User agent
  UA: 'ua.raw',
  UA_BROWSER_NAME: 'ua.browser.name',
  UA_BROWSER_VERSION: 'ua.browser.version',
  UA_DEVICE_MODEL: 'ua.device.model',
  UA_DEVICE_TYPE: 'ua.device.type',
  UA_DEVICE_VENDOR: 'ua.device.vendor',
  UA_ENGINE_NAME: 'ua.engine.name',
  UA_ENGINE_VERSION: 'ua.engine.version',
  UA_OS_NAME: 'ua.os.name',
  UA_OS_VERSION: 'ua.os.version',
  UA_CPU_ARCHITECTURE: 'ua.cpu.architecture',
  // App version
  APP_VERSION: 'app.version',
  // Client side stack capture
  STACK_MESSAGE: 'client_error.stack.message',
  STACK_LINENUMBER: 'client_error.stack.line_number',
  STACK_COLUMNNUMBER: 'client_error.stack.column_number',
  // Kubernetes
  POD_NAME: 'pod.name',
  // LetsEncrypt
  LETSENCRYPT_DOMAINS: 'lets_encrypt.domains',
  LETSENCRYPT_NAMESPACE: 'lets_encrypt.namespace',
  LETSENCRYPT_SECRET: 'lets_encrypt.secret',
  LETSENCRYPT_HOSTNAME: 'lets_encrypt.hostname',
  // DNS
  DNS_ID: 'dns.id',
  DNS_ADD: 'dns.add',
  DNS_DELETE: 'dns.delete',
  DNS_SERVICE_KEY: 'dns.service.key',
  DNS_SERVICE_RECORDS: 'dns.service.records',
  DNS_SERVICE_DELETE: 'dns.service.delete',
  DNS_NODE_RECORDS: 'dns.node.records',
  // Postgre
  POSTGRES_BACKUPWAL_ISBEHIND: 'postgres.backup_wal.is_behind',
  POSTGRES_BACKUPWAL_VALUE: 'postgres.backup_wal.value',
  POSTGRES_BACKUPWAL_LSNOFFSET: 'postgres.backup_wal.lsn_offset',
  POSTGRES_BACKUPWAL_REDOWAL: 'postgres.backup_wal.redo_wal',
  POSTGRES_BACKUPWAL_REDOWALLSN: 'postgres.backup_wal.redo_wal_lsn',
  POSTGRES_DATAEXIST: 'postgres.data_exist',
  POSTGRES_BACKUPEXIST: 'postgres.backup_exist',
  POSTGRES_ONSAMETIMELINE: 'postgres.on_same_timeline',
  POSTGRES_EXIT_CODE: 'postgres.exit.code',
  POSTGRES_EXIT_SIGNAL: 'postgres.exit.signal',
  POSTGRES_LOG_FILE: 'postgres.log.file',
  POSTGRES_REMOTEWALFILE: 'postgres.remote_walfile',
  // Process
  EXEC_COMMAND: 'exec.command',
  EXEC_ARGS: 'exec.args',
  // Consul
  CONSUL_PATH: 'consul.path',
  CONSUL_KEY: 'consul.key',
  CONSUL_LOCK_REASON: 'consul.lock.reason',
  // Scrape
  ACTION_BLOCK_INDEX: 'action.block.index',
  ACTION_TRANSACTION_INDEX: 'action.transaction.index',
  ACTION_INDEX: 'action.index',
  CONTRACT_HASH: 'contract.hash',
  SCRAPE_REPAIR_NEP5_COINS: 'scrape.repair_nep5.coins',
  SCRAPE_REPAIR_NEP5_ASSET: 'scrape.repair_nep5.asset.hash',
  // General
  QUEUE_SIZE: 'queue.size',
  OPTIONS: 'options',
  // NEO
  NEO_ADDRESS: 'neo.address',
  // Database
  DB_TABLE: 'db.table'
};

/***/ }),
/* 222 */
/***/ (function(module, exports) {

module.exports = require("bn.js");

/***/ }),
/* 223 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return utils; });
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3);
/* harmony import */ var lodash__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__);


const nowSeconds = () => Math.round(Date.now() / 1000);

function nullthrows(value) {
  if (value == undefined) {
    throw new Error('Unexpected null');
  }

  return value;
}

function assertNever(_value) {} // do nothing
// tslint:disable-next-line no-any


function isPromise(value) {
  return value != undefined && value.then != undefined && typeof value.then === 'function';
}

function notNull(value) {
  return value != undefined;
}

function zip(...arrays) {
  // tslint:disable-next-line no-any
  return lodash__WEBPACK_IMPORTED_MODULE_0___default.a.zip(...arrays);
} // tslint:enable readonly-array


const utils = {
  nowSeconds,
  nullthrows,
  assertNever,
  notNull,
  isPromise,
  zip
};

/***/ }),
/* 224 */
/***/ (function(module, exports) {

module.exports = require("knex");

/***/ }),
/* 225 */
/***/ (function(module, exports) {

module.exports = require("sql-summary");

/***/ }),
/* 226 */
/***/ (function(module, exports) {

module.exports = require("app-root-dir");

/***/ }),
/* 227 */
/***/ (function(module, exports) {

module.exports = require("graphql/execution/values");

/***/ }),
/* 228 */
/***/ (function(module, exports) {

module.exports = require("graphql/utilities");

/***/ }),
/* 229 */
/***/ (function(module, exports) {

module.exports = require("graphql/jsutils/isInvalid");

/***/ }),
/* 230 */
/***/ (function(module, exports) {

module.exports = require("graphql/jsutils/isNullish");

/***/ }),
/* 231 */
/***/ (function(module, exports) {

module.exports = require("graphql/jsutils/memoize3");

/***/ }),
/* 232 */
/***/ (function(module, exports) {

module.exports = require("graphql-tools");

/***/ }),
/* 233 */
/***/ (function(module, exports) {

module.exports = require("cryptocompare");

/***/ }),
/* 234 */
/***/ (function(module, exports) {

module.exports = require("koa-better-body");

/***/ }),
/* 235 */
/***/ (function(module, exports) {

module.exports = require("koa-ratelimit-lru");

/***/ }),
/* 236 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 237 */
/***/ (function(module, exports) {

module.exports = require("http-errors");

/***/ }),
/* 238 */
/***/ (function(module, exports) {

module.exports = require("resolve-path");

/***/ }),
/* 239 */
/***/ (function(module, exports) {

module.exports = require("sitemap");

/***/ }),
/* 240 */
/***/ (function(module, exports) {

module.exports = require("apollo-cache-inmemory");

/***/ }),
/* 241 */
/***/ (function(module, exports) {

module.exports = require("react-loadable/webpack");

/***/ }),
/* 242 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/amber");

/***/ }),
/* 243 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/blue");

/***/ }),
/* 244 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/blueGrey");

/***/ }),
/* 245 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/brown");

/***/ }),
/* 246 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/cyan");

/***/ }),
/* 247 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/deepOrange");

/***/ }),
/* 248 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/green");

/***/ }),
/* 249 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/grey");

/***/ }),
/* 250 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/indigo");

/***/ }),
/* 251 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/lightGreen");

/***/ }),
/* 252 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/lime");

/***/ }),
/* 253 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/orange");

/***/ }),
/* 254 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/pink");

/***/ }),
/* 255 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/purple");

/***/ }),
/* 256 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/teal");

/***/ }),
/* 257 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/colors/yellow");

/***/ }),
/* 258 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/styles/createMuiTheme");

/***/ }),
/* 259 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/styles/MuiThemeProvider");

/***/ }),
/* 260 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Button");

/***/ }),
/* 261 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Typography");

/***/ }),
/* 262 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/styles/withStyles");

/***/ }),
/* 263 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Paper");

/***/ }),
/* 264 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/IconButton");

/***/ }),
/* 265 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Icon");

/***/ }),
/* 266 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Collapse");

/***/ }),
/* 267 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/ClickAwayListener");

/***/ }),
/* 268 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/FormHelperText");

/***/ }),
/* 269 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/FormControl");

/***/ }),
/* 270 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/InputLabel");

/***/ }),
/* 271 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Input");

/***/ }),
/* 272 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Hidden");

/***/ }),
/* 273 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Snackbar");

/***/ }),
/* 274 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/LinearProgress");

/***/ }),
/* 275 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Grid");

/***/ }),
/* 276 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Card");

/***/ }),
/* 277 */
/***/ (function(module, exports) {

module.exports = require("timeago.js");

/***/ }),
/* 278 */
/***/ (function(module, exports) {

module.exports = require("locale2");

/***/ }),
/* 279 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/CircularProgress");

/***/ }),
/* 280 */
/***/ (function(module, exports) {

module.exports = require("react-lifecycles-compat");

/***/ }),
/* 281 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/deferrableFragmentKey");

/***/ }),
/* 282 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/RelayConcreteVariables");

/***/ }),
/* 283 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/RelayModernOperationSelector");

/***/ }),
/* 284 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/normalizeRelayPayload");

/***/ }),
/* 285 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/RelayError");

/***/ }),
/* 286 */
/***/ (function(module, exports) {

module.exports = require("relay-runtime/lib/RelayStoreUtils");

/***/ }),
/* 287 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Select");

/***/ }),
/* 288 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/MenuItem");

/***/ }),
/* 289 */
/***/ (function(module, exports) {

module.exports = require("react-tippy");

/***/ }),
/* 290 */
/***/ (function(module, exports) {

module.exports = require("scrypt-js");

/***/ }),
/* 291 */
/***/ (function(module, exports) {

module.exports = require("js-sha3");

/***/ }),
/* 292 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Dialog");

/***/ }),
/* 293 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogTitle");

/***/ }),
/* 294 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogContent");

/***/ }),
/* 295 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/DialogActions");

/***/ }),
/* 296 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Menu");

/***/ }),
/* 297 */
/***/ (function(module, exports) {

module.exports = require("qr-image");

/***/ }),
/* 298 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/FormLabel");

/***/ }),
/* 299 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/RadioGroup");

/***/ }),
/* 300 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/FormControlLabel");

/***/ }),
/* 301 */
/***/ (function(module, exports) {

module.exports = require("@material-ui/core/Radio");

/***/ }),
/* 302 */
/***/ (function(module, exports) {

module.exports = require("markdown-it");

/***/ }),
/* 303 */
/***/ (function(module, exports) {

module.exports = require("ua-parser-js");

/***/ }),
/* 304 */
/***/ (function(module, exports) {

module.exports = require("koa-router");

/***/ }),
/* 305 */
/***/ (function(module, exports) {

module.exports = require("koa-cors");

/***/ }),
/* 306 */
/***/ (function(module, exports) {

module.exports = require("rxjs/internal/OuterSubscriber");

/***/ }),
/* 307 */
/***/ (function(module, exports) {

module.exports = require("rxjs/internal/util/subscribeToResult");

/***/ }),
/* 308 */
/***/ (function(module, exports) {

module.exports = require("graphql/error/locatedError");

/***/ }),
/* 309 */
/***/ (function(module, exports) {

module.exports = require("ix/asynciterable/asynciterablex");

/***/ }),
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */
/***/ (function(module, exports) {

module.exports = require("cross-fetch/polyfill");

/***/ }),
/* 329 */
/***/ (function(module, exports) {

module.exports = require("css.escape");

/***/ }),
/* 330 */
/***/ (function(module, exports) {

module.exports = require("headroom.js");

/***/ }),
/* 331 */
/***/ (function(module, exports) {



/***/ }),
/* 332 */,
/* 333 */,
/* 334 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var routes_namespaceObject = {};
__webpack_require__.r(routes_namespaceObject);
__webpack_require__.d(routes_namespaceObject, "ROOT", function() { return ROOT; });
__webpack_require__.d(routes_namespaceObject, "HOME", function() { return HOME; });
__webpack_require__.d(routes_namespaceObject, "HEALTH_CHECK", function() { return HEALTH_CHECK; });
__webpack_require__.d(routes_namespaceObject, "GRAPHQL", function() { return GRAPHQL; });
__webpack_require__.d(routes_namespaceObject, "PUBLIC", function() { return PUBLIC; });
__webpack_require__.d(routes_namespaceObject, "CLIENT", function() { return CLIENT; });
__webpack_require__.d(routes_namespaceObject, "makePublic", function() { return makePublic; });
__webpack_require__.d(routes_namespaceObject, "makeRoot", function() { return makeRoot; });
__webpack_require__.d(routes_namespaceObject, "ERROR", function() { return ERROR; });
__webpack_require__.d(routes_namespaceObject, "RPC", function() { return RPC; });
__webpack_require__.d(routes_namespaceObject, "REPORT", function() { return REPORT; });
__webpack_require__.d(routes_namespaceObject, "WALLET_HOME", function() { return WALLET_HOME; });
__webpack_require__.d(routes_namespaceObject, "isWallet", function() { return routes_isWallet; });
__webpack_require__.d(routes_namespaceObject, "WALLET_NEW_WALLET", function() { return WALLET_NEW_WALLET; });
__webpack_require__.d(routes_namespaceObject, "WALLET_OPEN_WALLET", function() { return WALLET_OPEN_WALLET; });
__webpack_require__.d(routes_namespaceObject, "WALLET_CREATE_KEYSTORE", function() { return WALLET_CREATE_KEYSTORE; });
__webpack_require__.d(routes_namespaceObject, "WALLET_FAQ", function() { return WALLET_FAQ; });
__webpack_require__.d(routes_namespaceObject, "TRANSACTION_HASH_ARGUMENT", function() { return TRANSACTION_HASH_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeTransaction", function() { return makeTransaction; });
__webpack_require__.d(routes_namespaceObject, "TRANSACTION_SEARCH_PAGE_ARGUMENT", function() { return TRANSACTION_SEARCH_PAGE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeTransactionSearch", function() { return makeTransactionSearch; });
__webpack_require__.d(routes_namespaceObject, "isTransaction", function() { return isTransaction; });
__webpack_require__.d(routes_namespaceObject, "ADDRESS_HASH_ARGUMENT", function() { return ADDRESS_HASH_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeAddress", function() { return makeAddress; });
__webpack_require__.d(routes_namespaceObject, "ADDRESS_SEARCH_PAGE_ARGUMENT", function() { return ADDRESS_SEARCH_PAGE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeAddressSearch", function() { return makeAddressSearch; });
__webpack_require__.d(routes_namespaceObject, "isAddress", function() { return isAddress; });
__webpack_require__.d(routes_namespaceObject, "BLOCK_HASH_ARGUMENT", function() { return BLOCK_HASH_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeBlockHash", function() { return makeBlockHash; });
__webpack_require__.d(routes_namespaceObject, "BLOCK_INDEX_ARGUMENT", function() { return BLOCK_INDEX_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeBlockIndex", function() { return makeBlockIndex; });
__webpack_require__.d(routes_namespaceObject, "BLOCK_SEARCH_PAGE_ARGUMENT", function() { return BLOCK_SEARCH_PAGE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeBlockSearch", function() { return makeBlockSearch; });
__webpack_require__.d(routes_namespaceObject, "isBlock", function() { return isBlock; });
__webpack_require__.d(routes_namespaceObject, "ASSET_HASH_ARGUMENT", function() { return ASSET_HASH_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeAsset", function() { return makeAsset; });
__webpack_require__.d(routes_namespaceObject, "ASSET_SEARCH_PAGE_ARGUMENT", function() { return ASSET_SEARCH_PAGE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeAssetSearch", function() { return makeAssetSearch; });
__webpack_require__.d(routes_namespaceObject, "isAsset", function() { return isAsset; });
__webpack_require__.d(routes_namespaceObject, "CONTRACT_HASH_ARGUMENT", function() { return CONTRACT_HASH_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeContract", function() { return makeContract; });
__webpack_require__.d(routes_namespaceObject, "CONTRACT_SEARCH_PAGE_ARGUMENT", function() { return CONTRACT_SEARCH_PAGE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeContractSearch", function() { return makeContractSearch; });
__webpack_require__.d(routes_namespaceObject, "isContract", function() { return isContract; });
__webpack_require__.d(routes_namespaceObject, "MAKE_SEARCH_VALUE_ARGUMENT", function() { return MAKE_SEARCH_VALUE_ARGUMENT; });
__webpack_require__.d(routes_namespaceObject, "makeSearch", function() { return makeSearch; });

// EXTERNAL MODULE: external "cross-fetch/polyfill"
var polyfill_ = __webpack_require__(328);

// EXTERNAL MODULE: external "css.escape"
var external_css_escape_ = __webpack_require__(329);

// EXTERNAL MODULE: external "recompose"
var external_recompose_ = __webpack_require__(1);

// EXTERNAL MODULE: external "rxjs"
var external_rxjs_ = __webpack_require__(7);

// CONCATENATED MODULE: ./packages/neotracker-core/src/bin/init.ts
// tslint:disable no-import-side-effect no-submodule-imports




Object(external_recompose_["setObservableConfig"])({
  // tslint:disable-next-line no-any
  fromESObservable: obs$ => new external_rxjs_["Observable"](subscriber => obs$.subscribe(subscriber))
});
// EXTERNAL MODULE: external "@neo-one/monitor"
var monitor_ = __webpack_require__(14);

// EXTERNAL MODULE: external "yargs"
var external_yargs_ = __webpack_require__(52);
var external_yargs_default = /*#__PURE__*/__webpack_require__.n(external_yargs_);

// CONCATENATED MODULE: ./packages/neotracker-core/src/options/common.ts
const common_userAgents = '(Alexabot|Googlebot|Googlebot-Mobile|Googlebot-Image|Googlebot-News|Googlebot-Video|AdsBot-Google|Mediapartners-Google|bingbot|slurp|java|wget|curl|Commons-HttpClient|Python-urllib|libwww|httpunit|nutch|Go-http-client|phpcrawl|msnbot|jyxobot|FAST-WebCrawler|FAST Enterprise Crawler|biglotron|teoma|convera|seekbot|gigabot|gigablast|exabot|ngbot|ia_archiver|GingerCrawler|webmon |httrack|webcrawler|grub.org|UsineNouvelleCrawler|antibot|netresearchserver|speedy|fluffy|bibnum.bnf|findlink|msrbot|panscient|yacybot|AISearchBot|IOI|ips-agent|tagoobot|MJ12bot|woriobot|yanga|buzzbot|mlbot|yandexbot|yandex.com\\/bots|purebot|Linguee Bot|CyberPatrol|voilabot|baiduspider|citeseerxbot|spbot|twengabot|postrank|turnitinbot|scribdbot|page2rss|sitebot|linkdex|Adidxbot|blekkobot|ezooms|dotbot|Mail.RU_Bot|discobot|heritrix|findthatfile|europarchive.org|NerdByNature.Bot|sistrix crawler|ahrefsbot|Aboundex|domaincrawler|wbsearchbot|summify|ccbot|edisterbot|seznambot|ec2linkfinder|gslfbot|aihitbot|intelium_bot|facebookexternalhit|yeti|RetrevoPageAnalyzer|lb-spider|sogou|lssbot|careerbot|wotbox|wocbot|ichiro|DuckDuckBot|lssrocketcrawler|drupact|webcompanycrawler|acoonbot|openindexspider|gnam gnam spider|web-archive-net.com.bot|backlinkcrawler|coccoc|integromedb|content crawler spider|toplistbot|seokicks-robot|it2media-domain-crawler|ip-web-crawler.com|siteexplorer.info|elisabot|proximic|changedetection|blexbot|arabot|WeSEE:Search|niki-bot|CrystalSemanticsBot|rogerbot|360Spider|psbot|InterfaxScanBot|CC Metadata Scaper|g00g1e.net|GrapeshotCrawler|urlappendbot|brainobot|fr-crawler|binlar|SimpleCrawler|Twitterbot|cXensebot|smtbot|bnf.fr_bot|A6-Indexer|ADmantX|Facebot|OrangeBot|memorybot|AdvBot|MegaIndex|SemanticScholarBot|ltx71|nerdybot|xovibot|BUbiNG|Qwantify|archive.org_bot|Applebot|TweetmemeBot|crawler4j|findxbot|SemrushBot|yoozBot|lipperhey|y!j-asr|Domain Re-Animator Bot|AddThis|Screaming Frog SEO Spider|MetaURI|Scrapy|LivelapBot|OpenHoseBot|CapsuleChecker|collection@infegy.com|IstellaBot|DeuSu\\/|betaBot|Cliqzbot\\/|MojeekBot\\/|netEstate NE Crawler|SafeSearch microdata crawler|Gluten Free Crawler\\/|Sonic|Sysomos|Trove|deadlinkchecker|Slack-ImgProxy|Embedly|RankActiveLinkBot|iskanie|SafeDNSBot|SkypeUriPreview|Veoozbot|Slackbot|redditbot|datagnionbot|Google-Adwords-Instant|adbeat_bot|Scanbot|WhatsApp|contxbot|pinterest|electricmonk|GarlikCrawler|BingPreview\\/|vebidoobot|FemtosearchBot|Yahoo Link Preview)';
const common_whitelistedUserAgents = '(Googlebot|Googlebot-Mobile|Googlebot-Image|Googlebot-News|Googlebot-Video|AdsBot-Google|Mediapartners-Google|Google-Adwords-Instant)';

const common_db = (database, filename) => ({
  // tslint:disable-next-line no-useless-cast
  client: 'pg',
  connection: {
    host: 'localhost',
    port: 5432,
    database: 'neotracker_priv',
    filename: '',
    password: 'nTS#ed=9eT?sQeA8xGeb'
  }
});

password: process.env.POSTGRESS_PASSWORD;

;
const common = ({
  rpcURL,
  database,
  port,
  blacklistNEP5Hashes,
  dbFileName,
  configuration
}) => ({
  server: {
    db: common_db(database, dbFileName),
    rootLoader: {
      cacheEnabled: true,
      cacheSize: 100
    },
    subscribeProcessedNextIndex: {},
    rateLimit: {
      enabled: true,
      config: {
        rate: 5 * 60,
        duration: 60 * 1000,
        throw: true
      }
    },
    react: {
      clientAssetsPath: configuration.clientAssetsPath,
      ssr: {
        enabled: true,
        userAgents: common_userAgents
      },
      rpcURL
    },
    reactApp: {
      clientAssetsPath: configuration.clientAssetsPathNext,
      statsPath: configuration.statsPath,
      publicPath: configuration.clientPublicPathNext,
      rpcURL
    },
    toobusy: {
      enabled: true,
      userAgents: common_userAgents,
      whitelistedUserAgents: common_whitelistedUserAgents,
      maxLag: 70,
      smoothingFactor: 1 / 3
    },
    security: {
      enforceHTTPs: false,
      frameguard: {
        enabled: true,
        action: 'deny'
      },
      cspConfig: {
        enabled: false,
        directives: {
          childSrc: ["'self'"],
          defaultSrc: ["'self'"],
          connectSrc: ["'self'", `ws://localhost:${port}`],
          imgSrc: ["'self'", 'data:'],
          fontSrc: ["'self'", 'https://fonts.gstatic.com/'],
          frameSrc: ["'self'"],
          objectSrc: ["'self'"],
          mediaSrc: ["'self'"],
          manifestSrc: ["'self'"],
          scriptSrc: ["'self'", "'unsafe-inline'", 'https://cdn.polyfill.io'],
          styleSrc: ["'self'", "'unsafe-inline'", 'blob:', 'https://fonts.googleapis.com']
        },
        browserSniff: false
      }
    },
    clientAssets: {
      path: configuration.clientBundlePath
    },
    clientAssetsNext: {
      path: configuration.clientBundlePathNext
    },
    publicAssets: {
      path: configuration.publicAssetsPath
    },
    rootAssets: {
      path: configuration.rootAssetsPath
    },
    domain: 'wallet.cron.global',
    rpcURL,
    server: {
      keepAliveTimeoutMS: 650000
    },
    appOptions: {
      meta: {
        title: 'CRON Tracker Blockchain Explorer & Wallet',
        name: 'CRON Tracker',
        description: 'CRON blockchain explorer and wallet. Explore blocks, transactions, addresses and more. Transfer CRONIUM or CRON, claim CRON and more with the web wallet.',
        walletDescription: 'CRON Tracker Wallet is a light web wallet that lets CRONIUM holders interact ' + 'with the CRON blockchain. Transfer CRONIUM, CRON or other tokens, claim CRON, ' + 'print paper wallets and more.',
        social: {
          fb: '',
          twitter: ''
        },
        donateAddress: ''
      },
      url: `http://127.0.0.1:${port}`,
      rpcURL: `https://wallet.cron.global/rpc`,
      maintenance: false,
      disableWalletModify: false,
      // 3 minutes
      confirmLimitMS: 3 * 60 * 1000
    },
    serveNext: process.env.NEOTRACKER_NEXT === 'true'
  },
  scrape: {
    db: common_db(database, dbFileName),
    rootLoader: {
      cacheEnabled: true,
      cacheSize: 100
    },
    rpcURL,
    migrationEnabled: true,
    blacklistNEP5Hashes,
    repairNEP5BlockFrequency: 10,
    repairNEP5LatencySeconds: 15,
    pubSub: {
      db: common_db(database, dbFileName)
    }
  }
});
// CONCATENATED MODULE: ./packages/neotracker-core/src/options/utils.ts
const mainRPCURL = 'https://neotracker.io/rpc';
const testRPCURL = 'https://testnet.neotracker.io/rpc';
const privRPCURL = 'http://localhost:40200/rpc';
function getNetworkOptions({
  network = 'priv',
  main,
  test,
  priv
}) {
  switch (network) {
    case 'main':
      return {
        options: main,
        network
      };

    case 'test':
      return {
        options: test,
        network
      };

    case 'priv':
      return {
        options: priv,
        network
      };

    default:
      throw new Error('Unknown network type');
  }
}
// CONCATENATED MODULE: ./packages/neotracker-core/src/options/main.ts


const main_main = ({
  port,
  dbFileName,
  configuration,
  rpcURL = mainRPCURL
}) => common({
  database: 'neotracker_main',
  rpcURL,
  port,
  blacklistNEP5Hashes: ['4b4f63919b9ecfd2483f0c72ff46ed31b5bbb7a4', 'a0b328c01eac8b12b0f8a4fe93645d18fb3f1f0a', '7ac4a2bb052a047506f2f2d3d1528b89cc38e8d4', '78e6d16b914fe15bc16150aeb11d0c2a8e532bdd', '23501e5fef0f67ec476406c556e91992323a0357', '442e7964f6486005235e87e082f56cd52aa663b8', '34579e4614ac1a7bd295372d3de8621770c76cdc', '2e25d2127e0240c6deaf35394702feb236d4d7fc', '6d36b38af912ca107f55a5daedc650054f7e4f75'],
  dbFileName,
  configuration
});
// CONCATENATED MODULE: ./packages/neotracker-core/src/options/priv.ts


const priv = ({
  port,
  dbFileName,
  configuration,
  rpcURL = privRPCURL
}) => common({
  database: 'neotracker_priv',
  rpcURL,
  port,
  blacklistNEP5Hashes: [],
  dbFileName,
  configuration
});
// CONCATENATED MODULE: ./packages/neotracker-core/src/options/test.ts


const test = ({
  port,
  dbFileName,
  configuration,
  rpcURL = testRPCURL
}) => common({
  database: 'neotracker_test',
  rpcURL,
  port,
  blacklistNEP5Hashes: [],
  dbFileName,
  configuration
});
// CONCATENATED MODULE: ./packages/neotracker-core/src/options/index.ts








 // tslint:disable-next-line export-name

const getOptions = ({
  network,
  port,
  dbFileName,
  configuration,
  rpcURL
}) => getNetworkOptions({
  network,
  main: main_main({
    port,
    dbFileName,
    configuration,
    rpcURL
  }),
  test: test({
    port,
    dbFileName,
    configuration,
    rpcURL
  }),
  priv: priv({
    port,
    dbFileName,
    configuration,
    rpcURL
  })
});
// EXTERNAL MODULE: external "path"
var external_path_ = __webpack_require__(23);

// EXTERNAL MODULE: external "tslib"
var external_tslib_ = __webpack_require__(65);

// EXTERNAL MODULE: external "lodash"
var external_lodash_ = __webpack_require__(3);
var external_lodash_default = /*#__PURE__*/__webpack_require__.n(external_lodash_);

// CONCATENATED MODULE: ./packages/neotracker-core/src/createConsoleLogger.ts


const createConsoleLogger = () => ({
  log: info => {
    const {
      error,
      level,
      name,
      message
    } = info,
          rest = external_tslib_["__rest"](info, ["error", "level", "name", "message"]);

    let output = `${level}: ${name}`;

    if (!external_lodash_default.a.isEmpty(message)) {
      output += ` ${message}`;
    }

    if (!external_lodash_default.a.isEmpty(rest)) {
      output += ` ${JSON.stringify(rest)}`;
    }

    if (error !== undefined && error.stack !== undefined) {
      output += `\n${error.stack}`;
    }

    if (level === 'error') {
      // tslint:disable-next-line no-console
      console.error(output);
    } else if (level === 'info') {
      // tslint:disable-next-line no-console
      console.log(output);
    }
  },
  close: callback => {
    callback();
  }
});
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/lib/common.ts
var lib_common = __webpack_require__(217);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Action.ts
var Action = __webpack_require__(66);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Address.ts + 2 modules
var Address = __webpack_require__(37);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/AddressToTransaction.ts
var AddressToTransaction = __webpack_require__(103);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/AddressToTransfer.ts
var AddressToTransfer = __webpack_require__(69);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Asset.ts + 1 modules
var Asset = __webpack_require__(47);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/AssetToTransaction.ts
var AssetToTransaction = __webpack_require__(104);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Block.ts
var Block = __webpack_require__(51);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Coin.ts
var Coin = __webpack_require__(67);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Contract.ts
var Contract = __webpack_require__(68);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/BaseVisibleModel.ts + 2 modules
var BaseVisibleModel = __webpack_require__(56);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/DataPoint.ts
// tslint:disable variable-name


const DATA_POINT_TYPES = [// Virtual types, only available through PricesRootCall
'ANStoBTC', 'ANCtoBTC', 'ANStoUSD', 'ANCtoUSD'];
class DataPoint_DataPoint extends BaseVisibleModel["a" /* BaseVisibleModel */] {
  // tslint:disable no-any
  static observable$(_obj, _args, _context, _info) {
    return external_rxjs_["EMPTY"];
  }

}
DataPoint_DataPoint.modelName = 'DataPoint';
DataPoint_DataPoint.exposeGraphQL = true;
DataPoint_DataPoint.fieldSchema = {
  id: {
    type: {
      type: 'id',
      big: false
    },
    required: true,
    exposeGraphQL: true,
    auto: true
  },
  type: {
    type: {
      type: 'string',
      enum: DATA_POINT_TYPES
    },
    required: true,
    exposeGraphQL: true
  },
  time: {
    type: {
      type: 'integer',
      minimum: 0
    },
    required: true,
    exposeGraphQL: true
  },
  value: {
    type: {
      type: 'decimal'
    },
    required: true,
    exposeGraphQL: true
  }
};
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/convertJSON.ts
var convertJSON = __webpack_require__(8);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/Migration.ts


class Migration_Migration extends BaseVisibleModel["a" /* BaseVisibleModel */] {
  static fromJson(json, opt) {
    return super.fromJson(Object.assign({}, json, {
      complete: Object(convertJSON["b" /* convertJSONBoolean */])(json.complete)
    }), opt);
  }

  async $afterGet(context) {
    await super.$afterGet(context); // tslint:disable no-object-mutation
    // @ts-ignore

    this.complete = Object(convertJSON["b" /* convertJSONBoolean */])(this.complete); // tslint:enable no-object-mutation
  }

}
Migration_Migration.modelName = 'Migration';
Migration_Migration.exposeGraphQL = false;
Migration_Migration.indices = [{
  type: 'simple',
  columnNames: ['name'],
  name: 'name',
  unique: true
}];
Migration_Migration.fieldSchema = {
  id: {
    type: {
      type: 'id',
      big: false
    },
    required: true,
    exposeGraphQL: true,
    auto: true
  },
  name: {
    type: {
      type: 'string'
    },
    required: true
  },
  complete: {
    type: {
      type: 'boolean'
    },
    required: true
  },
  data: {
    type: {
      type: 'string'
    }
  }
};
// EXTERNAL MODULE: ./packages/neotracker-server-utils/src/pubsub/index.ts + 1 modules
var src_pubsub = __webpack_require__(368);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/createPubSub.ts
var createPubSub = __webpack_require__(50);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/common.ts
var models_common = __webpack_require__(38);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/ProcessedIndex.ts
// tslint:disable variable-name




class ProcessedIndex_ProcessedIndex extends BaseVisibleModel["a" /* BaseVisibleModel */] {
  // tslint:disable no-any
  static observable$(_obj, _args, _context, _info) {
    return src_pubsub["a" /* pubsub */].observable$(createPubSub["a" /* PROCESSED_NEXT_INDEX */]);
  }

}
ProcessedIndex_ProcessedIndex.modelName = 'ProcessedIndex';
ProcessedIndex_ProcessedIndex.exposeGraphQL = false;
ProcessedIndex_ProcessedIndex.indices = [{
  type: 'simple',
  columnNames: ['index'],
  name: 'processed_index_index',
  unique: true
}];
ProcessedIndex_ProcessedIndex.fieldSchema = {
  id: {
    type: {
      type: 'id',
      big: false
    },
    required: false,
    exposeGraphQL: true,
    auto: true
  },
  index: {
    type: models_common["i" /* INTEGER_INDEX_VALIDATOR */],
    required: true
  }
};
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Transaction.ts
var Transaction = __webpack_require__(31);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/TransactionInputOutput.ts
var TransactionInputOutput = __webpack_require__(39);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/models/Transfer.ts
var Transfer = __webpack_require__(40);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/models/models.ts















const loaderModels = () => [Action["Action"], Address["Address"], Asset["Asset"], Block["Block"], Coin["Coin"], Contract["Contract"], DataPoint_DataPoint, Migration_Migration, ProcessedIndex_ProcessedIndex, Transaction["Transaction"], TransactionInputOutput["TransactionInputOutput"], Transfer["Transfer"]];
const models_models = () => [Action["Action"], Address["Address"], AddressToTransaction["AddressToTransaction"], AddressToTransfer["AddressToTransfer"], Asset["Asset"], AssetToTransaction["AssetToTransaction"], Block["Block"], Coin["Coin"], Contract["Contract"], DataPoint_DataPoint, Migration_Migration, ProcessedIndex_ProcessedIndex, Transaction["Transaction"], TransactionInputOutput["TransactionInputOutput"], Transfer["Transfer"]];
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/setup.ts


const modelSchemas = () => models_models().reduce((acc, model) => Object.assign({}, acc, {
  [model.modelSchema.name]: model.modelSchema
}), {});
const createTables = async (db, monitor) => {
  await Promise.all(models_models().map(async model => Object(lib_common["a" /* createTable */])(db, monitor, model.modelSchema, modelSchemas())));
};
const dropTables = async (db, monitor, checkEmpty = false) => {
  await Promise.all(models_models().map(async model => Object(lib_common["b" /* dropTable */])(db, monitor, model.modelSchema, checkEmpty)));
};
// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/utils.ts
var utils = __webpack_require__(223);

// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/finalize.ts

 // tslint:disable-next-line no-let

let currentID = 0;

const getID = () => {
  const result = currentID;
  currentID += 1;
  return result;
};

function finalize(func) {
  return source$ => external_rxjs_["Observable"].create(observer => {
    let lastValue;
    const subscription = source$.subscribe({
      next: value => {
        lastValue = value;
        observer.next(value);
      },
      error: error => observer.error(error),
      complete: () => observer.complete()
    });
    subscription.add(() => {
      const result = func(lastValue);

      if (utils["a" /* utils */].isPromise(result)) {
        const id = getID();
        let deleted = false;
        const promise = result.then(() => {
          deleted = true;
          finalize.shutdownPromises.delete(id);
        });

        if (!deleted) {
          finalize.shutdownPromises.set(id, promise);
        }
      }
    });
    return subscription;
  });
}

(function (finalize) {
  finalize.shutdownPromises = new Map();

  finalize.wait = async () => {
    const promises = [...finalize.shutdownPromises.values()];

    if (promises.length === 0) {
      return;
    }

    await Promise.all(promises);
    await finalize.wait();
  };
})(finalize || (finalize = {}));
// EXTERNAL MODULE: external "knex"
var external_knex_ = __webpack_require__(224);
var external_knex_default = /*#__PURE__*/__webpack_require__.n(external_knex_);

// EXTERNAL MODULE: external "objection"
var external_objection_ = __webpack_require__(6);

// EXTERNAL MODULE: external "rxjs/operators"
var operators_ = __webpack_require__(5);

// EXTERNAL MODULE: external "sql-summary"
var external_sql_summary_ = __webpack_require__(225);
var external_sql_summary_default = /*#__PURE__*/__webpack_require__.n(external_sql_summary_);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/db.ts





 // @ts-ignore


const NAMESPACE = 'Knex';

const addProfiler = (db, labels) => {
  // tslint:disable-next-line no-any
  db.on('start', builder => {
    let queryContext = builder.queryContext();

    if (queryContext == undefined) {
      const value = (builder._options == undefined ? [] : builder._options).find( // tslint:disable-next-line no-any
      val => val.queryContext != undefined);
      queryContext = value.queryContext;
    }

    const {
      monitor: monitorIn
    } = queryContext;
    const monitor = monitorIn.at(NAMESPACE).withLabels(labels);
    const mutableSpans = {}; // tslint:disable-next-line no-any

    const stopProfiler = (error, obj) => {
      mutableSpans[obj.__knexQueryUid].end(error); // tslint:disable-next-line no-dynamic-delete


      delete mutableSpans[obj.__knexQueryUid];
    }; // tslint:disable-next-line no-any


    builder.on('query', query => {
      mutableSpans[query.__knexQueryUid] = monitor.withLabels({
        [monitor.labels.DB_STATEMENT_SUMMARY]: external_sql_summary_default()(query.sql)
      }).withData({
        [monitor.labels.DB_STATEMENT]: query.sql
      }).startSpan({
        name: 'knex_query'
      });
    }); // tslint:disable-next-line no-any

    builder.on('query-error', (_error, obj) => stopProfiler(true, obj)); // tslint:disable-next-line no-any

    builder.on('query-response', (_response, obj) => stopProfiler(false, obj));
  });
};

const labelNames = [monitor_["KnownLabel"].DB_INSTANCE, monitor_["KnownLabel"].DB_USER, monitor_["KnownLabel"].DB_TYPE];
const numUsedGauge = monitor_["metrics"].createGauge({
  name: 'Knex_pool_num_used',
  labelNames
});
const numFreeGauge = monitor_["metrics"].createGauge({
  name: 'Knex_pool_num_free',
  labelNames
});
const numPendingAcquiresGauge = monitor_["metrics"].createGauge({
  name: 'Knex_pool_num_pending_acquires',
  labelNames
});
const numPendingCreatesGauge = monitor_["metrics"].createGauge({
  name: 'Knex_pool_num_pending_creates',
  labelNames
});
const db_create = ({
  options,
  monitor: monitorIn,
  useNullAsDefault = options.client === 'sqlite3'
}) => {
  const db = external_knex_default()(Object.assign({}, options, {
    useNullAsDefault
  }));
  let destroyed = false;
  const originalDestroy = db.destroy.bind(db);
  const {
    connection = {}
  } = options;
  const labels = {
    // tslint:disable-next-line no-any
    [monitorIn.labels.DB_INSTANCE]: connection.database,
    // tslint:disable-next-line no-any
    [monitorIn.labels.DB_USER]: connection.user,
    [monitorIn.labels.DB_TYPE]: 'postgres'
  };
  const subcription = Object(external_rxjs_["interval"])(5000).pipe(Object(operators_["map"])(() => {
    const {
      pool
    } = db.client;
    numUsedGauge.set(labels, pool.numUsed());
    numFreeGauge.set(labels, pool.numFree());
    numPendingAcquiresGauge.set(labels, pool.numPendingAcquires());
    numPendingCreatesGauge.set(labels, pool.numPendingCreates());
  })).subscribe(); // tslint:disable no-object-mutation
  // @ts-ignore

  db.destroy = async () => {
    if (!destroyed) {
      destroyed = true;
      subcription.unsubscribe();
      await originalDestroy();
    }
  }; // tslint:disable-next-line no-any


  db.__labels = labels; // tslint:enable no-object-mutation

  addProfiler(db, labels);
  return db;
};
const DRAIN_TIMEOUT_MS = 5000;
const create$ = ({
  monitor,
  options$
}) => {
  const dispose = async ({
    db
  } = {
    db: undefined
  }) => {
    if (db === undefined) {
      return;
    }

    try {
      await db.destroy();
    } catch (error) {
      monitor.logError({
        name: 'Knex_destroy_error',
        error
      });
    }
  };

  return options$.pipe(Object(operators_["scan"])((prevResultIn, options) => {
    const prevResult = prevResultIn;

    if (prevResult !== undefined) {
      // tslint:disable-next-line no-array-mutation
      prevResult.disposeTimeouts.push({
        db: prevResult.db,
        timeout: setTimeout(() => {
          // tslint:disable-next-line no-floating-promises no-array-mutation
          dispose(prevResult.disposeTimeouts.shift());
        }, DRAIN_TIMEOUT_MS)
      });
    }

    const db = db_create({
      monitor,
      options
    });
    return prevResult === undefined ? {
      db,
      disposeTimeouts: []
    } : {
      db,
      disposeTimeouts: prevResult.disposeTimeouts
    };
  }, undefined), finalize(async result => {
    if (result !== undefined) {
      result.disposeTimeouts.forEach(disposeTimeout => {
        clearTimeout(disposeTimeout.timeout);
      });
      await Promise.all([Promise.all(result.disposeTimeouts.map(dispose)), dispose({
        db: result.db
      })]);
    }
  }), Object(operators_["filter"])(value => value !== undefined), Object(operators_["map"])(({
    db
  }) => db));
};

const db_getOptions = (environment, options) => Object.assign({}, options, {
  connection: Object.assign({}, options.connection === undefined ? {} : options.connection, {
    host: environment.host,
    port: environment.port
  })
});

const createFromEnvironment = (monitor, environment, options) => db_create({
  options: db_getOptions(environment, options),
  monitor
});
const createFromEnvironment$ = ({
  monitor,
  environment,
  options$
}) => create$({
  monitor,
  options$: options$.pipe(Object(operators_["map"])(options => db_getOptions(environment, options)))
});
async function db_transaction(db, func) {
  return Object(external_objection_["transaction"])(db, async trx => {
    // tslint:disable-next-line no-any
    const __labels = db.__labels;
    addProfiler(trx, __labels === undefined ? {} : __labels);
    return func(trx);
  });
}
// EXTERNAL MODULE: external "@neo-one/client"
var client_ = __webpack_require__(11);

// EXTERNAL MODULE: external "change-case"
var external_change_case_ = __webpack_require__(27);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/lib/QueryContext.ts
var QueryContext = __webpack_require__(218);

// EXTERNAL MODULE: external "lru-cache"
var external_lru_cache_ = __webpack_require__(86);
var external_lru_cache_default = /*#__PURE__*/__webpack_require__.n(external_lru_cache_);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/loader/makeCache.ts

function makeCache({
  modelClass,
  cacheSize
}) {
  const cache = new external_lru_cache_default.a({
    max: cacheSize
  });
  return {
    get(key) {
      const value = cache.get(key);

      if (value === undefined) {
        return undefined;
      } // tslint:disable-next-line no-any


      return value.then(val => {
        if (Array.isArray(val)) {
          return val.map(v => modelClass.fromJson(v));
        }

        return val === undefined ? val : modelClass.fromJson(val);
      });
    },

    set(k, v) {
      cache.set(k, // tslint:disable-next-line no-any
      v.then(res => {
        if (Array.isArray(res)) {
          return res.map(r => r.toJSON());
        }

        return res === undefined ? res : res.toJSON();
      }));
    },

    delete(key) {
      cache.del(key);
    },

    clear() {
      cache.reset();
    }

  };
}
// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/labels.ts
var src_labels = __webpack_require__(221);

// EXTERNAL MODULE: external "dataloader"
var external_dataloader_ = __webpack_require__(220);
var external_dataloader_default = /*#__PURE__*/__webpack_require__.n(external_dataloader_);

// CONCATENATED MODULE: ./packages/neotracker-server-db/src/loader/makeLoader.ts


function makeLoader({
  db,
  modelClass,
  makeQueryContext,
  fieldName = 'id',
  plural = false,
  filter = builder => builder,
  options
}) {
  return new external_dataloader_default.a(async values => {
    if (values.length === 0) {
      return [];
    }

    const {
      monitor
    } = values[0];
    return monitor.withLabels({
      [src_labels["a" /* labels */].DB_TABLE]: modelClass.tableName
    }).captureSpanLog(async span => {
      const ids = values.map(({
        id
      }) => id);
      const models = await filter(modelClass.query(db).context(makeQueryContext(span)).whereIn(fieldName, ids)); // tslint:disable-next-line no-any readonly-keyword

      const mutableIdToModel = {}; // tslint:disable-next-line no-any

      models.forEach(model => {
        if (plural) {
          if (mutableIdToModel[model[fieldName]] == undefined) {
            mutableIdToModel[model[fieldName]] = [];
          }

          mutableIdToModel[model[fieldName]].push(model);
        } else {
          mutableIdToModel[model[fieldName]] = model;
        }
      });
      return ids.map(id => {
        if (plural) {
          return mutableIdToModel[id] === undefined ? [] : mutableIdToModel[id];
        }

        return mutableIdToModel[id];
      });
    }, {
      name: 'knex_loader_load_batch',
      level: {
        log: 'debug',
        span: 'info'
      },
      error: {},
      references: values.slice(1).map(({
        monitor: parent
      }) => monitor.childOf(parent))
    });
  }, Object.assign({}, options, {
    cacheKeyFn: ({
      id
    }) => id
  }));
}
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/loader/RootLoader.ts
class RootLoader {
  constructor({
    db,
    makeQueryContext,
    makeAllPowerfulQueryContext,
    loaders,
    loadersByField,
    loadersByEdge,
    blockHashLoader,
    transactionHashLoader,
    maxIndexFetcher
  }) {
    this.reset = () => {
      Object.values(this.loaders).forEach(loader => loader.clearAll());
      Object.values(this.loadersByField).forEach(fieldLoader => Object.values(fieldLoader).forEach(loader => loader.clearAll()));
      Object.values(this.loadersByEdge).forEach(edgeLoader => Object.values(edgeLoader).forEach(loader => loader.clearAll()));
      this.blockHashLoader.clearAll();
      this.transactionHashLoader.clearAll();
      this.maxIndexFetcher.reset();
    };

    this.db = db;
    this.makeQueryContext = makeQueryContext;
    this.makeAllPowerfulQueryContext = makeAllPowerfulQueryContext;
    this.loaders = loaders;
    this.loadersByField = loadersByField;
    this.loadersByEdge = loadersByEdge;
    this.blockHashLoader = blockHashLoader;
    this.transactionHashLoader = transactionHashLoader;
    this.maxIndexFetcher = maxIndexFetcher;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/loader/createRootLoader$.ts












const getLoaderOptions = (options, model) => options.cacheEnabled && model.cacheType === 'blockchain' ? {
  cacheMap: makeCache({
    modelClass: model,
    cacheSize: options.cacheSize
  })
} : {
  cache: false
};

const makeMaxIndexFetcher = (db, monitor, makeQueryContext) => {
  let maxIndex;
  return {
    async get() {
      if (maxIndex === undefined) {
        maxIndex = await ProcessedIndex_ProcessedIndex.query(db).context(makeQueryContext(monitor)).max('index').first().then(result => {
          // Handle sqlite return
          // tslint:disable-next-line no-any
          if (result !== undefined && result['max(`index`)'] != undefined) {
            // tslint:disable-next-line no-any
            return result['max(`index`)'];
          } // tslint:disable-next-line no-any


          return result === undefined || result.max == undefined ? 0 : result.max;
        }).then(Number);
      }

      return maxIndex;
    },

    reset() {
      maxIndex = undefined;
    }

  };
}; // tslint:enable readonly-keyword


const createLoaders = ({
  db,
  options,
  monitor,
  makeQueryContext
}) => {
  const mutableLoaders = {};
  const mutableLoadersByField = {};
  const mutableLoadersByEdge = {}; // tslint:disable-next-line no-any

  const addLoaderByField = (model, fieldName, loader) => {
    const key = Object(external_change_case_["lcFirst"])(model.modelSchema.name);

    if (mutableLoadersByField[key] === undefined) {
      mutableLoadersByField[key] = {};
    }

    if (mutableLoadersByField[key][fieldName] === undefined) {
      mutableLoadersByField[key][fieldName] = loader;
    }

    return mutableLoadersByField[key][fieldName];
  };

  const addLoaderByEdge = (model, edgeName, // tslint:disable-next-line no-any
  loader) => {
    const key = Object(external_change_case_["lcFirst"])(model.modelSchema.name);

    if (mutableLoadersByEdge[key] === undefined) {
      mutableLoadersByEdge[key] = {};
    }

    mutableLoadersByEdge[key][edgeName] = loader;
  };

  const addLoader = model => {
    const fieldName = 'id';
    const loader = makeLoader({
      db,
      modelClass: model,
      fieldName,
      makeQueryContext,
      options: getLoaderOptions(options, model)
    });
    mutableLoaders[Object(external_change_case_["lcFirst"])(model.modelSchema.name)] = addLoaderByField(model, fieldName, loader);
  };

  loaderModels().forEach(model => {
    addLoader(model);
    Object.entries(model.modelSchema.edges === undefined ? {} : model.modelSchema.edges).forEach(([edgeName, edgeType]) => {
      if (edgeType.relation.relation === external_objection_["Model"].HasOneRelation || edgeType.relation.relation === external_objection_["Model"].BelongsToOneRelation || edgeType.relation.relation === external_objection_["Model"].HasManyRelation) {
        // tslint:disable-next-line no-any
        const modelClass = edgeType.relation.modelClass; // @ts-ignore

        const result = edgeType.relation.join.to.split('.');
        const fieldName = result[1]; // tslint:disable-next-line no-any

        let loader = makeLoader({
          db,
          modelClass,
          fieldName,
          plural: edgeType.relation.relation === external_objection_["Model"].HasManyRelation,
          filter: edgeType.relation.filter,
          makeQueryContext,
          options: getLoaderOptions(options, modelClass)
        });

        if (edgeType.relation.filter === undefined) {
          loader = addLoaderByField(modelClass, fieldName, loader);
        }

        addLoaderByEdge(model, edgeName, loader);
      }
    });
  }); // tslint:disable-next-line no-any

  const blockHashLoader = addLoaderByField( // tslint:disable-next-line no-any
  Block["Block"], 'hash', makeLoader({
    db,
    modelClass: Block["Block"],
    fieldName: 'hash',
    makeQueryContext,
    // tslint:disable-next-line no-any
    options: getLoaderOptions(options, Block["Block"])
  })); // tslint:disable-next-line no-any

  const transactionHashLoader = addLoaderByField( // tslint:disable-next-line no-any
  Transaction["Transaction"], 'hash', makeLoader({
    db,
    modelClass: Transaction["Transaction"],
    fieldName: 'hash',
    makeQueryContext,
    // tslint:disable-next-line no-any
    options: getLoaderOptions(options, Transaction["Transaction"])
  }));
  const maxIndexFetcher = makeMaxIndexFetcher(db, monitor, makeQueryContext);
  return {
    loaders: mutableLoaders,
    loadersByField: mutableLoadersByField,
    loadersByEdge: mutableLoadersByEdge,
    blockHashLoader,
    transactionHashLoader,
    maxIndexFetcher
  };
};

const createRootLoader = (db, options, rootMonitor) => {
  let rootLoader;

  const getRootLoader = () => rootLoader;

  const makeQueryContext = monitor => Object(QueryContext["b" /* makeQueryContext */])({
    rootLoader: getRootLoader,
    isAllPowerful: false,
    monitor
  });

  const {
    loaders,
    loadersByField,
    loadersByEdge,
    blockHashLoader,
    transactionHashLoader,
    maxIndexFetcher
  } = createLoaders({
    db,
    options,
    monitor: rootMonitor,
    makeQueryContext
  });
  rootLoader = new RootLoader({
    db,
    makeQueryContext,
    makeAllPowerfulQueryContext: monitor => Object(QueryContext["b" /* makeQueryContext */])({
      rootLoader: getRootLoader,
      isAllPowerful: true,
      monitor
    }),
    loaders,
    loadersByField,
    loadersByEdge,
    blockHashLoader,
    transactionHashLoader,
    maxIndexFetcher
  });
  return rootLoader;
};
const createRootLoader$ = ({
  db$,
  options$,
  monitor
}) => Object(external_rxjs_["combineLatest"])(Object(external_rxjs_["combineLatest"])(db$, options$).pipe(Object(operators_["map"])(([db, options]) => createRootLoader(db, options, monitor))), src_pubsub["a" /* pubsub */].observable$(createPubSub["a" /* PROCESSED_NEXT_INDEX */]).pipe(Object(operators_["startWith"])(0))).pipe( // tslint:disable-next-line no-any
Object(operators_["scan"])((prevRootLoader, [nextRootLoader]) => {
  if (prevRootLoader === nextRootLoader) {
    nextRootLoader.reset();
  }

  return nextRootLoader;
}, undefined), Object(operators_["distinctUntilChanged"])());
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/channels.ts



 // tslint:disable-next-line no-let

let pubSub;
const createProcessedNextIndexPubSub = ({
  options,
  environment,
  monitor
}) => {
  if (pubSub === undefined) {
    pubSub = Object(createPubSub["b" /* createPubSub */])({
      options,
      environment,
      monitor: monitor.at('subscribe_processed_next_index'),
      channel: createPubSub["a" /* PROCESSED_NEXT_INDEX */]
    });
  }

  return pubSub;
};
const subscribeProcessedNextIndex = ({
  options,
  environment,
  monitor
}) => external_rxjs_["Observable"].create(observer => {
  const pubsub = createProcessedNextIndexPubSub({
    options,
    environment,
    monitor
  });
  const subscription = pubsub.value$.subscribe({
    next: payload => {
      src_pubsub["a" /* pubsub */].publish(createPubSub["a" /* PROCESSED_NEXT_INDEX */], payload);
      observer.next(payload);
    },
    complete: observer.complete,
    error: observer.error
  });
  return () => {
    subscription.unsubscribe();
    pubsub.close();
  };
}).pipe(Object(operators_["share"])());
// CONCATENATED MODULE: ./packages/neotracker-server-db/src/isHealthyDB.ts

let checkDBPromise;

const doCheckDB = async (db, monitor) => monitor.captureSpan(async () => {
  await db.raw('SELECT 1;').queryContext(Object(QueryContext["a" /* makeAllPowerfulQueryContext */])(monitor));
  return true;
}, {
  name: 'service_check_db',
  level: 'verbose'
}).catch(() => false);

const checkDB = async (db, monitor) => {
  if (checkDBPromise === undefined) {
    checkDBPromise = doCheckDB(db, monitor).then(res => {
      checkDBPromise = undefined;
      return res;
    }, () => {
      checkDBPromise = undefined;
      return false;
    });
  }

  return checkDBPromise;
};

const CHECK_TIME_MS = 4000;
let lastCheck;
let healthy;
const isHealthyDB = async (db, monitor) => {
  if (lastCheck === undefined || healthy === undefined || Date.now() - lastCheck > CHECK_TIME_MS) {
    healthy = await checkDB(db, monitor);
    lastCheck = Date.now();
  }

  return healthy;
};
// EXTERNAL MODULE: external "rxjs/internal/OuterSubscriber"
var OuterSubscriber_ = __webpack_require__(306);

// EXTERNAL MODULE: external "rxjs/internal/util/subscribeToResult"
var subscribeToResult_ = __webpack_require__(307);

// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/mergeScanLatest.ts

 // tslint:disable-next-line no-any

const EMPTY_LAST_VALUE = {
  type: 'empty'
};
class mergeScanLatest_MergeScanSubscriber extends OuterSubscriber_["OuterSubscriber"] {
  constructor(destination, accumulator, acc) {
    super(destination);
    this.hasValue = false;
    this.hasCompleted = false;
    this.lastValue = EMPTY_LAST_VALUE;
    this.active = false;
    this.index = 0;
    this.accumulator = accumulator;
    this.acc = acc;
  }

  notifyNext(_outerValue, innerValue) {
    const {
      destination
    } = this;
    this.acc = innerValue;
    this.hasValue = true;

    if (destination.next !== undefined) {
      destination.next(innerValue);
    }
  }

  notifyComplete(innerSub) {
    const {
      lastValue
    } = this;
    this.remove(innerSub);
    this.active = false;

    if (lastValue.type === 'value') {
      this.lastValue = EMPTY_LAST_VALUE;
      this.next(lastValue.value);
    } else if (!this.active && this.hasCompleted) {
      if (!this.hasValue && this.destination.next !== undefined) {
        this.destination.next(this.acc);
      }

      if (this.destination.complete !== undefined) {
        this.destination.complete();
      }
    }
  }

  _next(value) {
    if (!this.active) {
      const {
        index,
        destination
      } = this;
      this.index += 1;

      try {
        const result = this.accumulator(this.acc, value);
        this.active = true;

        this._innerSub(result, value, index);
      } catch (error) {
        if (destination.error !== undefined) {
          destination.error(error);
        }
      }
    } else {
      this.lastValue = {
        type: 'value',
        value
      };
    }
  }

  _complete() {
    this.hasCompleted = true;

    if (!this.active && this.lastValue.type === 'empty') {
      if (!this.hasValue && this.destination.next !== undefined) {
        this.destination.next(this.acc);
      }

      if (this.destination.complete !== undefined) {
        this.destination.complete();
      }
    }
  }

  _innerSub(ish, value, index) {
    this.add(Object(subscribeToResult_["subscribeToResult"])(this, ish, value, index));
  }

}
class MergeScanOperator {
  constructor(accumulator, seed) {
    this.accumulator = accumulator;
    this.seed = seed;
  } // tslint:disable-next-line


  call(subscriber, source) {
    // tslint:disable-next-line
    return source.subscribe(new mergeScanLatest_MergeScanSubscriber(subscriber, this.accumulator, this.seed));
  }

}
function mergeScanLatest(accumulator, seed) {
  return source$ => source$.lift(new MergeScanOperator(accumulator, seed));
}
// EXTERNAL MODULE: external "bignumber.js"
var external_bignumber_js_ = __webpack_require__(13);
var external_bignumber_js_default = /*#__PURE__*/__webpack_require__.n(external_bignumber_js_);

// EXTERNAL MODULE: ./packages/neotracker-server-db/src/knexUtils.ts
var knexUtils = __webpack_require__(49);

// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/SameContextDBUpdater.ts
class SameContextDBUpdater {}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AddressesUpdater.ts



class AddressesUpdater_AddressesUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    addresses
  }) {
    return monitor.captureSpanLog(async span => {
      const existingAddressIDs = await Promise.all(external_lodash_default.a.chunk(addresses, context.chunkSize).map(chunk => Address["Address"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk.map(({
        id
      }) => id)))).then(result => external_lodash_default.a.flatMap(result).map(address => address.id));
      const existingAddressIDsSet = new Set(existingAddressIDs);
      const toCreate = addresses.filter(address => !existingAddressIDsSet.has(address.id));
      await Promise.all(external_lodash_default.a.chunk(toCreate, context.chunkSize).map(async chunk => Address["Address"].insertAll(context.db, context.makeQueryContext(span), chunk)));
    }, {
      name: 'neotracker_scrape_save_addresses',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    addresses,
    blockIndex
  }) {
    return monitor.captureSpan(async span => {
      const addressModels = await Promise.all(external_lodash_default.a.chunk(addresses, context.chunkSize).map(chunk => Address["Address"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk.map(({
        id
      }) => id)))).then(result => external_lodash_default.a.flatMap(result));

      const addressToTransactionID = external_lodash_default.a.fromPairs(addresses.map(({
        id,
        transactionID
      }) => [id, transactionID]));

      const toDelete = addressModels.filter(address => address.transaction_id == undefined && address.block_id === blockIndex || address.transaction_id != undefined && address.transaction_id === addressToTransactionID[address.id]);
      await Promise.all(external_lodash_default.a.chunk(toDelete, context.chunkSize).map(chunk => Address["Address"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk.map(address => address.id)).delete()));
    }, {
      name: 'neotracker_scrape_revert_addresses'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/DBUpdater.ts
class DBUpdater {}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/PrevBlockUpdater.ts


class PrevBlockUpdater_PrevBlockUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    block
  }) {
    return monitor.captureSpanLog(async span => {
      await Block["Block"].query(context.db).context(context.makeQueryContext(span)).where('id', block.index - 1).patch({
        next_block_id: block.index,
        next_block_hash: block.hash
      });
    }, {
      name: 'neotracker_scrape_save_prev_block',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    blockIndex
  }) {
    return monitor.captureSpan(async span => {
      await Block["Block"].query(context.db).context(context.makeQueryContext(span)).where('id', blockIndex - 1).patch({
        // tslint:disable no-null-keyword
        next_block_id: null,
        next_block_hash: null
      });
    }, {
      name: 'neotracker_scrape_revert_prev_block'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/ProcessedIndexUpdater.ts


class ProcessedIndexUpdater_ProcessedIndexUpdater extends SameContextDBUpdater {
  async save(context, monitor, index) {
    await monitor.captureSpanLog(async span => {
      try {
        await ProcessedIndex_ProcessedIndex.query(context.db).context(context.makeQueryContext(span)).insert({
          index
        });
        await context.processedIndexPubSub.next({
          index
        });
      } catch (error) {
        if (!Object(knexUtils["c" /* isUniqueError */])(context.db, error)) {
          throw error;
        }
      }
    }, {
      name: 'neotracker_scrape_save_processed_index',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, index) {
    await monitor.captureSpan(async span => {
      await ProcessedIndex_ProcessedIndex.query(context.db).context(context.makeQueryContext(span)).where('index', '>=', index).delete();
      await this.save(context, span, index - 1);
    }, {
      name: 'neotracker_scrape_revert_processed_index'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/strip0x.ts
const strip0x = hash => hash.startsWith('0x') ? hash.slice('0x'.length) : hash;
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAssetsAndContractsForClient.ts







const getAsset = (transaction, blockTime) => {
  // tslint:disable-next-line deprecation
  let asset;

  if (transaction.type === 'RegisterTransaction') {
    asset = transaction.asset;
  }

  if (transaction.type === 'InvocationTransaction') {
    asset = transaction.invocationData.asset;
  }

  if (asset !== undefined) {
    return {
      id: transaction.hash,
      transaction_id: transaction.receipt.globalIndex.toString(),
      transaction_hash: transaction.hash,
      type: asset.type,
      name_raw: JSON.stringify(asset.name),
      symbol: JSON.stringify(asset.name),
      amount: asset.amount.toString(),
      precision: asset.precision,
      owner: asset.owner,
      // tslint:disable-next-line no-null-keyword
      admin_address_id: asset.admin,
      block_time: blockTime,
      issued: '0',
      address_count: '0',
      transfer_count: '0',
      transaction_count: '0',
      aggregate_block_id: -1
    };
  }

  return undefined;
};

const NEP5_ATTRIBUTES = ['totalSupply', 'name', 'symbol', 'decimals', 'balanceOf', 'transfer'].map(attribute => Buffer.from(attribute, 'utf8').toString('hex'));

const checkIsNEP5 = async (context, contract) => {
  if (context.blacklistNEP5Hashes.has(strip0x(Object(client_["addressToScriptHash"])(contract.address)))) {
    return false;
  }

  return NEP5_ATTRIBUTES.every(attribute => contract.script.includes(attribute));
};

const getContractAndAsset = async ({
  monitor,
  context,
  transaction,
  contract,
  blockIndex,
  blockTime
}) => {
  const isNEP5 = await checkIsNEP5(context, contract);
  const contractModel = {
    id: strip0x(Object(client_["addressToScriptHash"])(contract.address)),
    script: contract.script,
    parameters_raw: JSON.stringify(contract.parameters),
    return_type: contract.returnType,
    needs_storage: contract.storage,
    name: contract.name,
    version: contract.codeVersion,
    author: contract.author,
    email: contract.email,
    description: contract.description,
    transaction_id: transaction.receipt.globalIndex.toString(),
    transaction_hash: transaction.hash,
    block_time: blockTime,
    block_id: blockIndex,
    type: isNEP5 ? models_common["k" /* NEP5_CONTRACT_TYPE */] : models_common["t" /* UNKNOWN_CONTRACT_TYPE */]
  };
  let asset;
  let nep5Contract;

  if (isNEP5) {
    try {
      const decimals = await client_["nep5"].getDecimals(context.client, contract.address); // tslint:disable-next-line no-any

      nep5Contract = client_["nep5"].createNEP5ReadSmartContract(context.client, contract.address, decimals);

      if (nep5Contract === undefined) {
        throw new Error('For TS');
      }

      const [name, symbol, totalSupply] = await Promise.all([nep5Contract.name(monitor), nep5Contract.symbol(monitor), nep5Contract.totalSupply(monitor).catch(() => new external_bignumber_js_default.a(0))]);
      asset = {
        id: contractModel.id,
        transaction_id: transaction.receipt.globalIndex.toString(),
        transaction_hash: transaction.hash,
        type: 'NEP5',
        name_raw: JSON.stringify(name),
        symbol,
        amount: totalSupply.toString(),
        precision: decimals,
        // tslint:disable-next-line no-null-keyword
        owner: null,
        // tslint:disable-next-line no-null-keyword
        admin_address_id: null,
        block_time: blockTime,
        issued: '0',
        address_count: '0',
        transfer_count: '0',
        transaction_count: '0',
        aggregate_block_id: -1
      };
    } catch (error) {
      monitor.logError({
        name: 'scrape_process_nep5_asset_error',
        error
      });
    }
  }

  return {
    asset,
    contract: contractModel,
    nep5Contract
  };
};

const getContracts = async ({
  monitor,
  context,
  transaction,
  blockIndex,
  blockTime
}) => {
  let contracts = [];

  if (transaction.type === 'InvocationTransaction') {
    contracts = transaction.invocationData.contracts;
  }

  if (transaction.type === 'PublishTransaction') {
    contracts = [transaction.contract];
  }

  const results = await Promise.all(contracts.map(async contract => getContractAndAsset({
    monitor,
    context,
    transaction,
    contract,
    blockIndex,
    blockTime
  })));
  return {
    assets: results.map(({
      asset
    }) => asset).filter(utils["a" /* utils */].notNull),
    contracts: results.map(({
      contract
    }) => contract),
    nep5Contracts: results.map(({
      contract,
      nep5Contract
    }) => nep5Contract === undefined ? undefined : {
      contractID: contract.id,
      nep5Contract
    }).filter(utils["a" /* utils */].notNull)
  };
};

const getAssetsAndContractsForClient = async ({
  monitor,
  context,
  transactions,
  blockIndex,
  blockTime
}) => {
  const assets = transactions.map(({
    transaction
  }) => getAsset(transaction, blockTime)).filter(utils["a" /* utils */].notNull);
  const results = await Promise.all(transactions.map(async ({
    transaction
  }) => getContracts({
    monitor,
    context,
    transaction,
    blockIndex,
    blockTime
  })));
  return {
    assets: assets.concat(external_lodash_default.a.flatMap(results.map(({
      assets: contractAssets
    }) => contractAssets))),
    contracts: external_lodash_default.a.flatMap(results.map(({
      contracts
    }) => contracts)),
    context: Object.assign({}, context, {
      nep5Contracts: external_lodash_default.a.flatMap(results.map(({
        nep5Contracts
      }) => nep5Contracts)).reduce((acc, {
        contractID,
        nep5Contract
      }) => Object.assign({}, acc, {
        [contractID]: nep5Contract
      }), context.nep5Contracts)
    })
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getActionDataForClient.ts



function getActionDataForClient({
  context,
  action: actionIn
}) {
  const nep5Contract = context.nep5Contracts[strip0x(Object(client_["addressToScriptHash"])(actionIn.address))];

  if (nep5Contract === undefined) {
    return {
      action: actionIn
    };
  } // tslint:disable-next-line no-any


  let action;

  try {
    action = nep5Contract.convertAction(actionIn);
  } catch (_a) {// ignore errors
  }

  if (action === undefined || action.type !== 'Event' || action.name !== 'transfer') {
    return {
      action: actionIn
    };
  }

  const parameters = action.parameters;
  let fromAddressHash = parameters.from === undefined ? undefined : parameters.from;
  const toAddressHash = parameters.to === undefined ? undefined : parameters.to;
  const value = parameters.amount;

  if (actionIn.address === fromAddressHash) {
    fromAddressHash = undefined;
  }

  const result = {
    fromAddressID: fromAddressHash,
    toAddressID: toAddressHash,
    assetID: strip0x(Object(client_["addressToScriptHash"])(actionIn.address)),
    transferID: actionIn.globalIndex.toString(),
    coinChanges: [fromAddressHash === undefined ? undefined : {
      address: fromAddressHash,
      asset: strip0x(Object(client_["addressToScriptHash"])(actionIn.address)),
      value: value.negated()
    }, toAddressHash === undefined ? undefined : {
      address: toAddressHash,
      asset: strip0x(Object(client_["addressToScriptHash"])(actionIn.address)),
      value
    }].filter(utils["a" /* utils */].notNull)
  };
  return {
    action: actionIn,
    transfer: {
      value,
      result
    }
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/reduceCoinChanges.ts
const reduceCoinChanges = (a, b) => {
  if (a === undefined) {
    return b;
  }

  if (b === undefined) {
    return a;
  }

  return a.concat(b);
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getActionDataInputOutputResult.ts



function getActionDataInputOutputResult({
  actionDatas,
  transactionID,
  transactionHash,
  transactionIndex
}) {
  const addressData = {
    startTransactionID: transactionID,
    startTransactionIndex: transactionIndex,
    startTransactionHash: transactionHash
  };
  const changes = actionDatas.map(({
    transfer
  }) => transfer).filter(utils["a" /* utils */].notNull).map(transfer => transfer.result);
  const mutableAddressIDs = [];
  const mutableAssetIDs = [];
  let coinChanges;
  changes.forEach(({
    fromAddressID,
    toAddressID,
    assetID,
    coinChanges: coinChangesIn
  }) => {
    if (fromAddressID !== undefined) {
      mutableAddressIDs.push(fromAddressID);
    }

    if (toAddressID !== undefined) {
      mutableAddressIDs.push(toAddressID);
    }

    mutableAssetIDs.push(assetID);
    coinChanges = reduceCoinChanges(coinChanges, coinChangesIn);
  });
  return {
    addressIDs: external_lodash_default.a.fromPairs([...new Set(mutableAddressIDs)].map(address => [address, addressData])),
    assetIDs: [...new Set(mutableAssetIDs)],
    coinChanges
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/reduceInputOutputResultAddressIDs.ts
const EMPTY_ADDRESS_IDS = {};
const reduceInputOutputResultAddressIDs = addressIDs => addressIDs.reduce((acc, result) => Object.entries(acc).concat(Object.entries(result)).reduce((innerAcc, [addressID, addressData]) => {
  const address = innerAcc[addressID];

  if (address === undefined || address.startTransactionIndex > addressData.startTransactionIndex) {
    // tslint:disable-next-line no-object-mutation
    innerAcc[addressID] = addressData;
  }

  return innerAcc;
}, {}), EMPTY_ADDRESS_IDS);
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/reduceInputOutputResults.ts


const EMPTY_INPUT_OUTPUT_RESULT = {
  assetIDs: [],
  addressIDs: {}
};
const reduceInputOutputResults = results => results.reduce((acc, result) => ({
  assetIDs: acc.assetIDs.concat(result.assetIDs),
  addressIDs: reduceInputOutputResultAddressIDs([acc.addressIDs, result.addressIDs]),
  coinChanges: reduceCoinChanges(acc.coinChanges, result.coinChanges)
}), EMPTY_INPUT_OUTPUT_RESULT);
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getInputOutputResultForClient.ts




function getInputOutputResultForClient({
  transaction,
  transactionIndex,
  inputs,
  claims,
  actionDatas
}) {
  const transactionID = transaction.receipt.globalIndex.toString();
  const transactionHash = transaction.hash;
  const addressData = {
    startTransactionID: transactionID,
    startTransactionIndex: transactionIndex,
    startTransactionHash: transactionHash
  };
  const inputsResult = {
    addressIDs: external_lodash_default.a.fromPairs(inputs.map(input => [input.address_id, addressData])),
    assetIDs: inputs.map(input => input.asset_id),
    coinChanges: inputs.map(input => ({
      address: input.address_id,
      asset: input.asset_id,
      value: new external_bignumber_js_default.a(input.value).negated()
    }))
  };
  const outputsResult = {
    addressIDs: external_lodash_default.a.fromPairs(transaction.outputs.map(output => [output.address, addressData])),
    assetIDs: transaction.outputs.map(output => output.asset),
    coinChanges: transaction.outputs.map(output => ({
      address: output.address,
      asset: output.asset,
      value: new external_bignumber_js_default.a(output.value)
    }))
  };
  const claimsResult = {
    addressIDs: external_lodash_default.a.fromPairs(claims.map(claim => [claim.address_id, addressData])),
    assetIDs: claims.map(claim => claim.asset_id)
  };
  const invocationResult = getActionDataInputOutputResult({
    actionDatas,
    transactionID,
    transactionHash,
    transactionIndex
  });
  let assetsResult = EMPTY_INPUT_OUTPUT_RESULT;

  if (transaction.type === 'RegisterTransaction') {
    assetsResult = {
      addressIDs: external_lodash_default.a.fromPairs([[transaction.asset.admin, addressData]]),
      assetIDs: [transaction.hash]
    };
  } else if (transaction.type === 'InvocationTransaction' && transaction.invocationData.asset !== undefined) {
    assetsResult = {
      addressIDs: external_lodash_default.a.fromPairs([[transaction.invocationData.asset.admin, addressData]]),
      assetIDs: [transaction.hash]
    };
  }

  return reduceInputOutputResults([inputsResult, outputsResult, claimsResult, invocationResult, assetsResult]);
}
// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/constants.ts
var constants = __webpack_require__(365);

// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getSubtype.ts




const ZERO = new external_bignumber_js_default.a('0');
const getIssuedOutputs = (references, transaction) => {
  const mutableValues = {};
  references.forEach(input => {
    if (mutableValues[input.asset_id] === undefined) {
      mutableValues[input.asset_id] = new external_bignumber_js_default.a('0');
    }

    mutableValues[input.asset_id] = mutableValues[input.asset_id].plus(new external_bignumber_js_default.a(input.value));
  });

  if (mutableValues[constants["a" /* GAS_ASSET_HASH */]] === undefined) {
    mutableValues[constants["a" /* GAS_ASSET_HASH */]] = new external_bignumber_js_default.a('0');
  }

  mutableValues[constants["a" /* GAS_ASSET_HASH */]] = mutableValues[constants["a" /* GAS_ASSET_HASH */]].minus(transaction.systemFee).minus(transaction.networkFee);
  transaction.outputs.forEach(otherOutput => {
    if (mutableValues[otherOutput.asset] === undefined) {
      mutableValues[otherOutput.asset] = new external_bignumber_js_default.a('0');
    }

    mutableValues[otherOutput.asset] = mutableValues[otherOutput.asset].minus(new external_bignumber_js_default.a(otherOutput.value));
  });
  return external_lodash_default.a.pickBy(mutableValues, value => !value.isEqualTo(ZERO));
};
function getSubtype(issuedOutputs, transaction, assetID, outputIndex) {
  if (transaction.type === 'EnrollmentTransaction' && outputIndex === 0) {
    return models_common["n" /* SUBTYPE_ENROLLMENT */];
  }

  if (issuedOutputs[assetID] !== undefined) {
    return models_common["o" /* SUBTYPE_ISSUE */];
  }

  if (transaction.type === 'ClaimTransaction') {
    return models_common["m" /* SUBTYPE_CLAIM */];
  }

  if (transaction.type === 'MinerTransaction') {
    return models_common["q" /* SUBTYPE_REWARD */];
  }

  return models_common["p" /* SUBTYPE_NONE */];
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getTransactionDataForClient.ts






function calculateTransactionData({
  context,
  transaction,
  transactionIndex,
  blockIndex,
  claims,
  inputs
}) {
  const transactionID = transaction.receipt.globalIndex.toString();
  const transactionHash = transaction.hash;
  const actionDatas = transaction.type === 'InvocationTransaction' && transaction.invocationData.result.state === 'HALT' ? transaction.invocationData.actions.map(action => getActionDataForClient({
    context,
    action
  })) : [];
  const result = getInputOutputResultForClient({
    transaction,
    transactionIndex,
    inputs,
    claims,
    actionDatas
  });
  const issuedOutputs = getIssuedOutputs(inputs, transaction);
  return Object.assign({}, result, {
    transaction,
    transactionID,
    transactionHash,
    transactionIndex,
    claims,
    inputs,
    outputs: transaction.outputs.map((output, idx) => ({
      id: TransactionInputOutput["TransactionInputOutput"].makeID({
        outputTransactionHash: transaction.hash,
        outputTransactionIndex: idx,
        type: models_common["s" /* TYPE_INPUT */]
      }),
      type: models_common["s" /* TYPE_INPUT */],
      subtype: getSubtype(issuedOutputs, transaction, output.asset, idx),
      output_transaction_id: transactionID,
      output_transaction_hash: transaction.hash,
      output_transaction_index: idx,
      output_block_id: blockIndex,
      asset_id: output.asset,
      value: output.value.toString(),
      address_id: output.address
    })),
    actionDatas
  });
}

function mapReferences(referencesMap, inputs) {
  return inputs.map(input => {
    const inputOutputs = referencesMap[input.hash];

    if (inputOutputs === undefined) {
      throw new Error('Not found');
    }

    const inputOutput = inputOutputs[input.index];

    if (inputOutput === undefined) {
      throw new Error('Not found');
    }

    return inputOutput;
  });
}

async function getTransactionDataForClient({
  monitor,
  context,
  blockIndex,
  transactions
}) {
  const ids = [...new Set(external_lodash_default.a.flatMap(transactions, ({
    transaction
  }) => {
    let inputs = transaction.inputs;

    if (transaction.type === 'ClaimTransaction') {
      inputs = inputs.concat(transaction.claims);
    }

    return inputs.map(input => TransactionInputOutput["TransactionInputOutput"].makeID({
      type: models_common["s" /* TYPE_INPUT */],
      outputTransactionHash: input.hash,
      outputTransactionIndex: input.index
    }));
  }))];

  if (ids.length === 0) {
    return transactions.map(({
      transactionIndex,
      transaction
    }) => calculateTransactionData({
      context,
      transaction,
      transactionIndex,
      blockIndex,
      claims: [],
      inputs: []
    }));
  }

  const references = await TransactionInputOutput["TransactionInputOutput"].query(context.db).context(context.makeQueryContext(monitor)).whereIn('id', ids);
  const referencesMap = references.reduce((acc, reference) => {
    let inputOutputs = acc[reference.output_transaction_hash];

    if (inputOutputs === undefined) {
      // tslint:disable-next-line no-object-mutation
      acc[reference.output_transaction_hash] = inputOutputs = {};
    } // tslint:disable-next-line no-object-mutation


    inputOutputs[reference.output_transaction_index] = reference;
    return acc;
  }, {});
  return transactions.map(({
    transactionIndex,
    transaction
  }) => {
    const inputs = mapReferences(referencesMap, transaction.inputs);
    const claims = mapReferences(referencesMap, transaction.type === 'ClaimTransaction' ? transaction.claims : []);
    return calculateTransactionData({
      context,
      transaction,
      transactionIndex,
      blockIndex,
      claims,
      inputs
    });
  });
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAddressesForClient.ts

const getAddressesForClient = ({
  transactions,
  blockIndex,
  blockTime
}) => Object.entries(reduceInputOutputResultAddressIDs(transactions.map(({
  addressIDs
}) => addressIDs))).map(([hash, {
  startTransactionID,
  startTransactionHash
}]) => ({
  id: hash,
  transaction_id: startTransactionID,
  transaction_hash: startTransactionHash,
  block_id: blockIndex,
  block_time: blockTime,
  transaction_count: '0',
  transfer_count: '0',
  aggregate_block_id: -1
}));
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getEdgeCount.ts

const getEdgeCount = data => external_lodash_default.a.mapValues(external_lodash_default.a.groupBy(data, ({
  id1
}) => id1), values => values.length);
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getValue.ts
const getValue = (asset, values, defaultValue) => {
  const value = values[asset];
  return value === undefined ? defaultValue : value;
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAddressesData.ts




const getAddressesData = transactions => {
  const addressTransactionCounts = getEdgeCount(external_lodash_default.a.flatMap(transactions, ({
    addressIDs,
    transactionID
  }) => [...new Set(Object.keys(addressIDs))].map(addressID => ({
    id1: addressID,
    id2: transactionID
  }))));
  const addressTransferCounts = getEdgeCount(external_lodash_default.a.flatMap(external_lodash_default.a.flatMap(transactions, ({
    actionDatas
  }) => actionDatas.map(({
    transfer
  }) => transfer).filter(utils["a" /* utils */].notNull).map(({
    result: {
      fromAddressID,
      toAddressID,
      transferID
    }
  }) => ({
    addressIDs: [fromAddressID, toAddressID].filter(utils["a" /* utils */].notNull),
    transferID
  }))), ({
    addressIDs,
    transferID
  }) => [...new Set(addressIDs)].map(addressID => ({
    id1: addressID,
    id2: transferID
  }))));
  const seen = new Set();

  const data = external_lodash_default.a.flatMap(external_lodash_default.a.sortBy(transactions, ({
    transactionIndex
  }) => -transactionIndex), ({
    addressIDs,
    transactionID,
    transactionHash
  }) => {
    const filtered = Object.keys(addressIDs).filter(addressID => !seen.has(addressID));
    filtered.forEach(addressID => {
      seen.add(addressID);
    });
    return filtered.map(addressID => [addressID, {
      transactionCount: getValue(addressID, addressTransactionCounts, 0),
      transferCount: getValue(addressID, addressTransferCounts, 0),
      transactionID,
      transactionHash
    }]);
  });

  return external_lodash_default.a.fromPairs(data);
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/types.ts
function isCoinModelCreate(change) {
  return change.type === 'create';
}
function isCoinModelDelete(change) {
  return change.type === 'delete';
}
function isCoinModelCreateOrDelete(change) {
  return isCoinModelCreate(change) || isCoinModelDelete(change);
}
function isCoinModelPatch(change) {
  return change.type === 'patch';
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAssetsData.ts








const getAssetsData_ZERO = new external_bignumber_js_default.a('0');

const getCoinData = transactions => {
  const coinChanges = transactions.reduce((acc, {
    coinChanges: coinChangesIn
  }) => reduceCoinChanges(acc, coinChangesIn), undefined);

  if (coinChanges === undefined) {
    return [];
  }

  const groupedValues = Object.entries(external_lodash_default.a.groupBy(coinChanges, ({
    address
  }) => address));
  return external_lodash_default.a.flatMap(groupedValues, ([addressHash, values]) => {
    const reducedValues = external_lodash_default.a.mapValues(external_lodash_default.a.groupBy(values, ({
      asset
    }) => asset), assetValues => assetValues.reduce((acc, {
      value
    }) => acc.plus(value), getAssetsData_ZERO));

    return Object.entries(reducedValues).map(([assetHash, value]) => ({
      addressHash,
      assetHash,
      value
    })).filter(({
      value
    }) => !value.isEqualTo(getAssetsData_ZERO));
  });
};

const getAssetOutputIssued = outputs => {
  const assetAndIssued = external_lodash_default.a.groupBy(outputs.filter(output => output.subtype === models_common["o" /* SUBTYPE_ISSUE */] || output.subtype === models_common["m" /* SUBTYPE_CLAIM */] || output.subtype === models_common["q" /* SUBTYPE_REWARD */]), ({
    asset_id
  }) => asset_id);

  return external_lodash_default.a.mapValues(assetAndIssued, values => values.reduce((acc, {
    value
  }) => acc.plus(new external_bignumber_js_default.a(value)), new external_bignumber_js_default.a('0')));
};

const getAssetsData = async ({
  monitor,
  context,
  transactions,
  blockIndex,
  fees,
  negated = false
}) => {
  const assetTransactionCounts = getEdgeCount(external_lodash_default.a.flatMap(transactions, ({
    assetIDs,
    transactionID
  }) => [...new Set(assetIDs)].map(assetID => ({
    id1: assetID,
    id2: transactionID
  }))));
  const assetTransferCounts = getEdgeCount(external_lodash_default.a.flatMap(transactions, ({
    actionDatas
  }) => actionDatas.map(({
    transfer
  }) => transfer).filter(utils["a" /* utils */].notNull).map(({
    result: {
      assetID,
      transferID
    }
  }) => ({
    id1: assetID,
    id2: transferID
  }))));
  const coinData = getCoinData(transactions);
  const coinModels = await Promise.all(external_lodash_default.a.chunk(coinData, context.chunkSize).map(async chunk => Coin["Coin"].query(context.db).context(context.makeQueryContext(monitor)).whereIn('id', chunk.map(({
    addressHash,
    assetHash
  }) => Coin["Coin"].makeID({
    addressHash,
    assetHash
  }))))).then(result => external_lodash_default.a.flatMap(result));
  const idToCoinModel = coinModels.reduce((acc, coinModel) => Object.assign({}, acc, {
    [coinModel.id]: coinModel
  }), {});
  const coinModelChanges = coinData.map(({
    addressHash,
    assetHash,
    value
  }) => {
    const id = Coin["Coin"].makeID({
      addressHash,
      assetHash
    });
    const coinModel = idToCoinModel[id];
    const updatedBlockIndex = negated ? blockIndex - 1 : blockIndex;

    if (coinModel === undefined) {
      const val = negated ? value.negated() : value;

      if (val.gt(getAssetsData_ZERO)) {
        return {
          type: 'create',
          assetHash,
          value: {
            id,
            address_id: addressHash,
            asset_id: assetHash,
            value: val.toString(),
            block_id: updatedBlockIndex
          }
        };
      }

      return undefined;
    }

    if (negated && blockIndex === coinModel.block_id || !negated && blockIndex > coinModel.block_id) {
      const newValue = negated ? new external_bignumber_js_default.a(coinModel.value).minus(value) : new external_bignumber_js_default.a(coinModel.value).plus(value);

      if (newValue.isEqualTo(0)) {
        return {
          type: 'delete',
          id,
          assetHash
        };
      }

      return {
        type: 'patch',
        value: coinModel,
        patch: {
          value: newValue.toString(),
          block_id: updatedBlockIndex
        }
      };
    }

    return undefined;
  }).filter(utils["a" /* utils */].notNull);

  const assetAddressCount = external_lodash_default.a.mapValues(external_lodash_default.a.groupBy(coinModelChanges.filter(isCoinModelCreateOrDelete), ({
    assetHash
  }) => assetHash), assetCoinModelChanges => assetCoinModelChanges.reduce((acc, {
    type
  }) => type === 'create' ? acc + 1 : acc - 1, 0));

  const assetTransferIssued = external_lodash_default.a.mapValues(external_lodash_default.a.groupBy(external_lodash_default.a.flatMap(transactions, ({
    actionDatas
  }) => actionDatas.map(({
    transfer
  }) => transfer).filter(utils["a" /* utils */].notNull).map(({
    result: {
      assetID,
      fromAddressID,
      toAddressID
    },
    value
  }) => {
    if (fromAddressID === undefined) {
      return {
        assetID,
        value
      };
    }

    if (toAddressID === undefined) {
      return {
        assetID,
        value: value.negated()
      };
    }

    return undefined;
  }).filter(utils["a" /* utils */].notNull)), ({
    assetID
  }) => assetID), values => values.reduce((acc, {
    value
  }) => acc.plus(value), getAssetsData_ZERO));

  const assetOutputIssued = getAssetOutputIssued(external_lodash_default.a.flatMap(transactions.map(({
    outputs
  }) => outputs)));
  const gasIssued = fees.negated();
  const allAssetIDs = [...new Set([assetTransactionCounts, assetTransferCounts, assetAddressCount, assetTransferIssued, assetOutputIssued].reduce((acc, value) => acc.concat(Object.keys(value)), []).concat(gasIssued.isEqualTo(0) ? [] : [constants["b" /* GAS_ASSET_ID */]]))];

  const assets = external_lodash_default.a.fromPairs(allAssetIDs.map(asset => [asset, {
    issued: getValue(asset, assetOutputIssued, getAssetsData_ZERO).plus(getValue(asset, assetTransferIssued, getAssetsData_ZERO)).plus(asset === constants["b" /* GAS_ASSET_ID */] ? gasIssued : getAssetsData_ZERO),
    addressCount: getValue(asset, assetAddressCount, 0),
    transactionCount: getValue(asset, assetTransactionCounts, 0),
    transferCount: getValue(asset, assetTransferCounts, 0)
  }]));

  return {
    assets,
    coinModelChanges
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAssetsDataForClient.ts


const getAssetsDataForClient_ZERO = new external_bignumber_js_default.a('0');
const getAssetsDataForClient = async ({
  monitor,
  context,
  transactions,
  blockIndex
}) => getAssetsData({
  monitor,
  context,
  transactions,
  fees: transactions.reduce((acc, {
    transaction
  }) => acc.plus(transaction.networkFee).plus(transaction.systemFee), getAssetsDataForClient_ZERO),
  blockIndex
});
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getActionDataForModel.ts


async function getActionDataForModel({
  context,
  monitor,
  actionModel
}) {
  const transferModel = await actionModel.$relatedQuery('transfer', context.db).context(context.makeQueryContext(monitor)).first();

  if (transferModel === undefined) {
    return {
      action: actionModel
    };
  }

  const value = new external_bignumber_js_default.a(transferModel.value);
  const result = {
    fromAddressID: transferModel.from_address_id == undefined ? undefined : transferModel.from_address_id,
    toAddressID: transferModel.to_address_id == undefined ? undefined : transferModel.to_address_id,
    assetID: transferModel.asset_id,
    transferID: transferModel.id,
    coinChanges: [transferModel.from_address_id == undefined ? undefined : {
      address: transferModel.from_address_id,
      asset: transferModel.asset_id,
      value: value.negated()
    }, transferModel.to_address_id == undefined ? undefined : {
      address: transferModel.to_address_id,
      asset: transferModel.asset_id,
      value
    }].filter(utils["a" /* utils */].notNull)
  };
  return {
    action: actionModel,
    transfer: {
      value,
      result
    }
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getInputOutputResultForModel.ts




async function getInputOutputResultForModel({
  context,
  monitor,
  transactionModel,
  inputs,
  outputs,
  claims,
  actionDatas
}) {
  const transactionIndex = transactionModel.index;
  const transactionID = transactionModel.id;
  const transactionHash = transactionModel.hash;
  const addressData = {
    startTransactionID: transactionID,
    startTransactionIndex: transactionIndex,
    startTransactionHash: transactionHash
  };
  const inputsResult = {
    addressIDs: external_lodash_default.a.fromPairs(inputs.map(input => [input.address_id, addressData])),
    assetIDs: inputs.map(input => input.asset_id),
    coinChanges: inputs.map(input => ({
      address: input.address_id,
      asset: input.asset_id,
      value: new external_bignumber_js_default.a(input.value).negated()
    }))
  };
  const outputsResult = {
    addressIDs: external_lodash_default.a.fromPairs(outputs.map(output => [output.address_id, addressData])),
    assetIDs: outputs.map(output => output.asset_id),
    coinChanges: outputs.map(output => ({
      address: output.address_id,
      asset: output.asset_id,
      value: new external_bignumber_js_default.a(output.value)
    }))
  };
  const claimsResult = {
    addressIDs: external_lodash_default.a.fromPairs(claims.map(claim => [claim.address_id, addressData])),
    assetIDs: claims.map(claim => claim.asset_id)
  };
  const invocationResult = getActionDataInputOutputResult({
    actionDatas,
    transactionID: transactionModel.id,
    transactionHash: transactionModel.hash,
    transactionIndex: transactionModel.index
  });
  let assetsResult = EMPTY_INPUT_OUTPUT_RESULT;

  if (transactionModel.type === 'RegisterTransaction' || transactionModel.type === 'InvocationTransaction') {
    const asset = await transactionModel.$relatedQuery('asset', context.db).context(context.makeQueryContext(monitor)).first();

    if (asset !== undefined) {
      assetsResult = {
        addressIDs: external_lodash_default.a.fromPairs([[asset.admin_address_id, addressData]]),
        assetIDs: [transactionModel.hash]
      };
    }
  }

  return reduceInputOutputResults([inputsResult, outputsResult, claimsResult, invocationResult, assetsResult]);
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getTransactionDataForModel.ts


async function getTransactionDataForModel({
  monitor,
  context,
  blockModel
}) {
  const transactions = await blockModel.$relatedQuery('transactions', context.db).context(context.makeQueryContext(monitor));
  return Promise.all(transactions.map(async transactionModel => {
    const [inputs, outputs, claims, actions, contracts] = await Promise.all([transactionModel.$relatedQuery('inputs', context.db).context(context.makeQueryContext(monitor)), transactionModel.$relatedQuery('outputs', context.db).context(context.makeQueryContext(monitor)), transactionModel.$relatedQuery('claims', context.db).context(context.makeQueryContext(monitor)), transactionModel.$relatedQuery('actions', context.db).context(context.makeQueryContext(monitor)), transactionModel.$relatedQuery('contracts', context.db).context(context.makeQueryContext(monitor))]);
    const actionDatas = await Promise.all(actions.map(async actionModel => getActionDataForModel({
      context,
      monitor,
      actionModel
    })));
    const result = await getInputOutputResultForModel({
      context,
      monitor,
      transactionModel,
      inputs,
      outputs,
      claims,
      actionDatas
    });
    return Object.assign({}, result, {
      inputs,
      outputs,
      claims,
      transactionModel,
      transactionID: transactionModel.id,
      transactionHash: transactionModel.hash,
      transactionIndex: transactionModel.index,
      actionDatas,
      contracts
    });
  }));
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/getAssetsDataForModel.ts


const getAssetsDataForModel_ZERO = new external_bignumber_js_default.a('0');
const getAssetsDataForModel = async ({
  monitor,
  context,
  transactions,
  blockIndex
}) => getAssetsData({
  monitor,
  context,
  transactions,
  blockIndex,
  fees: transactions.reduce((acc, {
    transactionModel
  }) => acc.plus(new external_bignumber_js_default.a(transactionModel.network_fee)).plus(new external_bignumber_js_default.a(transactionModel.system_fee)), getAssetsDataForModel_ZERO),
  negated: true
});
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/ActionsUpdater.ts





class ActionsUpdater_ActionsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    actions
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(external_lodash_default.a.chunk(actions, context.chunkSize).map(async chunk => Action["Action"].insertAll(context.db, context.makeQueryContext(span), chunk.map(({
        action,
        transactionID,
        transactionHash
      }) => ({
        id: action.globalIndex.toString(),
        type: action.type,
        block_id: action.blockIndex,
        transaction_id: transactionID,
        transaction_hash: transactionHash,
        transaction_index: action.transactionIndex,
        index: action.index,
        script_hash: strip0x(Object(client_["addressToScriptHash"])(action.address)),
        // tslint:disable no-any no-null-keyword
        message: action.message === undefined ? null : encodeURIComponent(action.message),
        args_raw: action.args === undefined ? null : JSON.stringify(action.args)
      })))));
    }, {
      name: 'neotracker_scrape_save_actions',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transactionIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transactionIDs, context.chunkSize).map(async chunk => Action["Action"].query(context.db).context(context.makeQueryContext(span)).whereIn('transaction_id', chunk).delete()));
    }, {
      name: 'neotracker_scrape_revert_actions'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AddressesDataUpdater.ts



class AddressesDataUpdater_AddressesDataUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    addresses,
    blockIndex,
    blockTime
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(Object.entries(addresses).map(async ([address, {
        transactionCount,
        transferCount,
        transactionID,
        transactionHash
      }]) => {
        await Address["Address"].query(context.db).context(context.makeQueryContext(span)).where('id', address).where('aggregate_block_id', '<', blockIndex).patch({
          // tslint:disable no-any
          transaction_count: Object(external_objection_["raw"])(`transaction_count + ${transactionCount}`),
          transfer_count: Object(external_objection_["raw"])(`transfer_count + ${transferCount}`),
          // tslint:enable no-any
          last_transaction_id: transactionID,
          last_transaction_hash: transactionHash,
          last_transaction_time: blockTime,
          aggregate_block_id: blockIndex
        });
      }));
    }, {
      name: 'neotracker_scrape_save_addresses_data',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    addresses,
    transactionIDs,
    blockIndex
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(Object.entries(addresses).map(async ([address, {
        transactionCount,
        transferCount
      }]) => {
        await Address["Address"].query(context.db).context(context.makeQueryContext(span)).where('id', address).where('aggregate_block_id', '>=', blockIndex).patch({
          // tslint:disable no-any
          transaction_count: Object(external_objection_["raw"])(`transaction_count - ${transactionCount}`),
          transfer_count: Object(external_objection_["raw"])(`transfer_count - ${transferCount}`),
          // tslint:enable no-any
          aggregate_block_id: blockIndex - 1
        });
      }));
      const addressIDsSet = Object.keys(addresses);

      if (addressIDsSet.length > 0) {
        if (Object(knexUtils["a" /* isPostgres */])(context.db)) {
          await context.db.raw(`
              WITH cte AS (
                SELECT a.id AS address_id, b.transaction_id, b.hash, b.block_time
                FROM address a
                LEFT OUTER JOIN (
                  SELECT address_id, transaction_id, hash, block_time
                  FROM (
                    SELECT id1 AS address_id, MAX(id2) AS transaction_id
                    FROM address_to_transaction
                    WHERE
                      id1 IN (${addressIDsSet.map(id => `'${id}'`).join(', ')}) AND
                      id2 NOT IN (${transactionIDs.map(id => `'${id}'`).join(', ')})
                    GROUP BY address_to_transaction.id1
                  ) a
                  JOIN transaction b ON
                    a.transaction_id = b.id
                ) b ON
                  a.id = b.address_id
                WHERE
                  a.id IN (${addressIDsSet.map(id => `'${id}'`).join(', ')})
              )
              UPDATE address SET
                last_transaction_id=cte.transaction_id,
                last_transaction_hash=cte.hash,
                last_transaction_time=cte.block_time
              FROM cte
              WHERE
                id = cte.address_id
              `).queryContext(context.makeQueryContext(span));
        } else {
          await context.db.raw(`
              WITH cte AS (
                SELECT a.address_id, transaction_id, hash, block_time
                FROM (
                  SELECT id1 AS address_id, MAX(id2) AS transaction_id
                  FROM address_to_transaction
                  WHERE
                    id1 IN (${addressIDsSet.map(id => `'${id}'`).join(', ')}) AND
                    id2 NOT IN (${transactionIDs.map(id => `'${id}'`).join(', ')})
                  GROUP BY id1
                ) a
                JOIN 'transaction' b ON
                  a.transaction_id = b.id
              )
              UPDATE address SET
                last_transaction_id=(select cte.transaction_id from cte where address_id = address.id),
                last_transaction_hash=(select cte.hash from cte where address_id = address.id),
                last_transaction_time=(select cte.block_time from cte where address_id = address.id)
              WHERE
                id IN (${addressIDsSet.map(id => `'${id}'`).join(', ')})
                `).queryContext(context.makeQueryContext(span));
        }
      }
    }, {
      name: 'neotracker_scrape_revert_addresses_data'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AddressToTransactionUpdater.ts



class AddressToTransactionUpdater_AddressToTransactionUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactions
  }) {
    return monitor.captureSpanLog(async span => {
      const data = external_lodash_default.a.flatMap(transactions, ({
        addressIDs,
        transactionID
      }) => [...new Set(addressIDs)].map(addressID => ({
        id1: addressID,
        id2: transactionID
      })));

      await Promise.all(external_lodash_default.a.chunk(data, context.chunkSize).map(async chunk => {
        await AddressToTransaction["AddressToTransaction"].insertAll(context.db, context.makeQueryContext(span), chunk);
      }));
    }, {
      name: 'neotracker_scrape_save_address_to_transaction',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transactionIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transactionIDs, context.chunkSize).map(chunk => AddressToTransaction["AddressToTransaction"].query(context.db).context(context.makeQueryContext(span)).delete().whereIn('id2', chunk)));
    }, {
      name: 'neotracker_scrape_revert_address_to_transaction'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AddressToTransferUpdater.ts



class AddressToTransferUpdater_AddressToTransferUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transfers
  }) {
    return monitor.captureSpanLog(async span => {
      const data = external_lodash_default.a.flatMap(transfers, ({
        addressIDs,
        transferID
      }) => [...new Set(addressIDs)].map(addressID => ({
        id1: addressID,
        id2: transferID
      })));

      await Promise.all(external_lodash_default.a.chunk(data, context.chunkSize).map(async chunk => {
        await AddressToTransfer["AddressToTransfer"].insertAll(context.db, context.makeQueryContext(span), chunk);
      }));
    }, {
      name: 'neotracker_scrape_save_address_to_transfer',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transferIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transferIDs, context.chunkSize).map(async chunk => {
        await AddressToTransfer["AddressToTransfer"].query(context.db).context(context.makeQueryContext(span)).delete().whereIn('id2', chunk);
      }));
    }, {
      name: 'neotracker_scrape_revert_address_to_transfer'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AssetsDataUpdater.ts



class AssetsDataUpdater_AssetsDataUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    assets,
    blockIndex
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(Object.entries(assets).map(async ([asset, {
        issued,
        transactionCount,
        addressCount,
        transferCount
      }]) => {
        await Asset["Asset"].query(context.db).context(context.makeQueryContext(span)).where('id', asset).where('aggregate_block_id', '<', blockIndex).patch({
          // tslint:disable no-any
          issued: Object(external_objection_["raw"])(`issued + (${issued.toString()})`),
          transaction_count: Object(external_objection_["raw"])(`transaction_count + ${transactionCount}`),
          address_count: Object(external_objection_["raw"])(`address_count + ${addressCount}`),
          transfer_count: Object(external_objection_["raw"])(`transfer_count + ${transferCount}`),
          // tslint:enable no-any
          aggregate_block_id: blockIndex
        });
      }));
    }, {
      name: 'neotracker_scrape_save_assets',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    assets,
    blockIndex
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(Object.entries(assets).map(async ([asset, {
        issued,
        transactionCount,
        addressCount,
        transferCount
      }]) => {
        await Asset["Asset"].query(context.db).context(context.makeQueryContext(span)).where('id', asset).where('aggregate_block_id', '>=', blockIndex).patch({
          // tslint:disable no-any
          issued: Object(external_objection_["raw"])(`issued - (${issued.toString()})`),
          transaction_count: Object(external_objection_["raw"])(`transaction_count - ${transactionCount}`),
          address_count: Object(external_objection_["raw"])(`address_count - ${addressCount}`),
          transfer_count: Object(external_objection_["raw"])(`transfer_count - ${transferCount}`),
          // tslint:enable no-any
          aggregate_block_id: blockIndex - 1
        });
      }));
    }, {
      name: 'neotracker_scrape_revert_assets'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AssetsUpdater.ts



class AssetsUpdater_AssetsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    assets
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(external_lodash_default.a.chunk(assets, context.chunkSize).map(async chunk => Asset["Asset"].insertAll(context.db, context.makeQueryContext(span), chunk)));
    }, {
      name: 'neotracker_scrape_save_assets',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transactionIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transactionIDs, context.chunkSize).map(async chunk => Asset["Asset"].query(context.db).context(context.makeQueryContext(span)).whereIn('transaction_id', chunk).delete()));
    }, {
      name: 'neotracker_scrape_revert_assets'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/AssetToTransactionUpdater.ts



class AssetToTransactionUpdater_AssetToTransactionUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactions
  }) {
    return monitor.captureSpanLog(async span => {
      const data = external_lodash_default.a.flatMap(transactions, ({
        assetIDs,
        transactionID
      }) => [...new Set(assetIDs)].map(assetID => ({
        id1: assetID,
        id2: transactionID
      })));

      await Promise.all(external_lodash_default.a.chunk(data, context.chunkSize).map(async chunk => {
        await AssetToTransaction["AssetToTransaction"].insertAll(context.db, context.makeQueryContext(span), chunk);
      }));
    }, {
      name: 'neotracker_scrape_save_asset_to_transaction',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transactionIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transactionIDs, context.chunkSize).map(chunk => AssetToTransaction["AssetToTransaction"].query(context.db).context(context.makeQueryContext(span)).delete().whereIn('id2', chunk)));
    }, {
      name: 'neotracker_scrape_revert_asset_to_transaction'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/ClaimsUpdater.ts



class ClaimsUpdater_ClaimsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactions
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(transactions.map(async ({
        claims,
        transactionID,
        transactionHash
      }) => {
        await this.updateClaims(context, span, claims, transactionID, transactionHash);
      }));
    }, {
      name: 'neotracker_scrape_save_claims',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    claims
  }) {
    return monitor.captureSpan(async span => {
      await this.updateClaims(context, span, claims);
    }, {
      name: 'neotracker_scrape_revert_claims'
    });
  }

  async updateClaims(context, monitor, claims, transactionID, transactionHash) {
    await Promise.all(external_lodash_default.a.chunk(claims, context.chunkSize).map(async chunk => {
      await TransactionInputOutput["TransactionInputOutput"].query(context.db).context(context.makeQueryContext(monitor)).whereIn('id', chunk.map(claim => claim.id)).patch({
        // tslint:disable-next-line no-null-keyword
        claim_transaction_id: transactionID === undefined ? null : transactionID,
        // tslint:disable-next-line no-null-keyword
        claim_transaction_hash: transactionHash === undefined ? null : transactionHash
      });
    }));
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/CoinsUpdater.ts




class CoinsUpdater_CoinsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    coinModelChanges
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all([Promise.all(external_lodash_default.a.chunk(coinModelChanges.filter(isCoinModelCreate), context.chunkSize).map(async chunk => Coin["Coin"].insertAll(context.db, context.makeQueryContext(span), chunk.map(({
        value
      }) => value)))), Promise.all(external_lodash_default.a.chunk(coinModelChanges.filter(isCoinModelDelete), context.chunkSize).map(async chunk => Coin["Coin"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk.map(({
        id
      }) => id)).delete())), Promise.all(coinModelChanges.filter(isCoinModelPatch).map(async ({
        value,
        patch
      }) => value.$query(context.db).context(context.makeQueryContext(span)).patch(patch)))]);
    }, {
      name: 'neotracker_scrape_save_coins',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, options) {
    return monitor.captureSpan(async span => {
      await this.save(context, span, options);
    }, {
      name: 'neotracker_scrape_revert_coins'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/ContractsUpdater.ts



class ContractsUpdater_ContractsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    contracts
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(external_lodash_default.a.chunk(contracts, context.chunkSize).map(async chunk => Contract["Contract"].insertAll(context.db, context.makeQueryContext(span), chunk)));
    }, {
      name: 'neotracker_scrape_save_contracts',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    contractIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(contractIDs, context.chunkSize).map(async chunk => Contract["Contract"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk).delete()));
    }, {
      name: 'neotracker_scrape_revert_contracts'
    });
  }

}
// EXTERNAL MODULE: ./packages/neotracker-server-db/src/utils/calculateClaimValueBase.ts
var calculateClaimValueBase = __webpack_require__(102);

// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/calculateClaimAmount.ts


const calculateClaimAmount_ZERO = new external_bignumber_js_default.a('0');
async function calculateClaimAmount(context, monitor, value, startHeight, endHeight) {
  return monitor.captureSpan(async span => {
    if (value.isEqualTo(calculateClaimAmount_ZERO)) {
      return Promise.resolve(calculateClaimAmount_ZERO.toFixed(8));
    }

    return Object(calculateClaimValueBase["a" /* calculateClaimValueBase */])({
      getSystemFee: async index => context.systemFee.getThrows(index, span).then(val => new external_bignumber_js_default.a(val)),
      coins: [{
        value,
        startHeight,
        endHeight
      }]
    }).then(result => result.toFixed(8));
  }, {
    name: 'neotracker_scrape_run_calculate_claim_amount'
  });
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/InputUpdater.ts




class InputUpdater_InputUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactionID,
    transactionHash,
    reference,
    blockIndex
  }) {
    return monitor.captureSpanLog(async span => {
      let claimValue = '0';

      if (reference.asset_id === `${constants["f" /* NEO_ASSET_ID */]}`) {
        claimValue = await calculateClaimAmount(context, span, new external_bignumber_js_default.a(reference.value), reference.output_block_id, blockIndex);
      }

      await reference.$query(context.db).context(context.makeQueryContext(span)).patch({
        input_transaction_id: transactionID,
        input_transaction_hash: transactionHash,
        claim_value: claimValue
      });
    }, {
      name: 'neotracker_scrape_save_input',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    reference
  }) {
    return monitor.captureSpan(async span => {
      await reference.$query(context.db).context(context.makeQueryContext(span)).patch({
        // tslint:disable no-null-keyword
        input_transaction_id: null,
        input_transaction_hash: null,
        claim_value: null
      });
    }, {
      name: 'neotracker_scrape_revert_input'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/InputsUpdater.ts



class InputsUpdater_InputsUpdater extends SameContextDBUpdater {
  constructor(updaters = {
    input: new InputUpdater_InputUpdater()
  }) {
    super();
    this.updaters = updaters;
  }

  async save(context, monitor, {
    transactions,
    blockIndex
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(external_lodash_default.a.flatMap(transactions, ({
        inputs,
        transactionID,
        transactionHash
      }) => inputs.map(async reference => this.updaters.input.save(context, span, {
        reference,
        transactionID,
        transactionHash,
        blockIndex
      }))));
    }, {
      name: 'neotracker_scrape_save_inputs',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    references
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(references.map(async reference => this.updaters.input.revert(context, span, {
        reference
      })));
    }, {
      name: 'neotracker_scrape_revert_inputs'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/OutputsUpdater.ts



class OutputsUpdater_OutputsUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactions
  }) {
    return monitor.captureSpanLog(async span => {
      const allOutputs = external_lodash_default.a.flatMap(transactions.map(({
        outputs
      }) => outputs));

      await Promise.all(external_lodash_default.a.chunk(allOutputs, context.chunkSize).map(async chunk => {
        await TransactionInputOutput["TransactionInputOutput"].insertAll(context.db, context.makeQueryContext(span), chunk);
      }));
    }, {
      name: 'neotracker_scrape_save_outputs',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    outputIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(outputIDs, context.chunkSize).map(async chunk => {
        await TransactionInputOutput["TransactionInputOutput"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk).delete();
      }));
    }, {
      name: 'neotracker_scrape_revert_outputs'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/TransfersUpdater.ts





class TransfersUpdater_TransfersUpdater extends SameContextDBUpdater {
  async save(context, monitor, {
    transactions,
    blockIndex,
    blockTime
  }) {
    return monitor.captureSpanLog(async span => {
      await Promise.all(external_lodash_default.a.chunk(transactions, context.chunkSize).map(async chunk => {
        await Transfer["Transfer"].insertAll(context.db, context.makeQueryContext(span), chunk.map(({
          transferData: {
            result,
            value
          },
          transactionID,
          transactionHash,
          transactionIndex,
          action
        }) => ({
          id: result.transferID,
          transaction_id: transactionID,
          transaction_hash: transactionHash,
          asset_id: strip0x(Object(client_["addressToScriptHash"])(action.address)),
          contract_id: strip0x(Object(client_["addressToScriptHash"])(action.address)),
          value: value.toString(),
          from_address_id: result.fromAddressID,
          to_address_id: result.toAddressID,
          block_id: blockIndex,
          transaction_index: transactionIndex,
          action_index: action.index,
          block_time: blockTime
        })));
      }));
    }, {
      name: 'neotracker_scrape_save_transfers',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    transferIDs
  }) {
    return monitor.captureSpan(async span => {
      await Promise.all(external_lodash_default.a.chunk(transferIDs, context.chunkSize).map(async chunk => {
        await Transfer["Transfer"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk).delete();
      }));
    }, {
      name: 'neotracker_scrape_revert_transfers'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/TransactionsUpdater.ts



















class TransactionsUpdater_TransactionsUpdater extends DBUpdater {
  constructor(updaters = {
    actions: new ActionsUpdater_ActionsUpdater(),
    addresses: new AddressesUpdater_AddressesUpdater(),
    addressesData: new AddressesDataUpdater_AddressesDataUpdater(),
    addressToTransaction: new AddressToTransactionUpdater_AddressToTransactionUpdater(),
    addressToTransfer: new AddressToTransferUpdater_AddressToTransferUpdater(),
    assets: new AssetsUpdater_AssetsUpdater(),
    assetsData: new AssetsDataUpdater_AssetsDataUpdater(),
    assetToTransaction: new AssetToTransactionUpdater_AssetToTransactionUpdater(),
    claims: new ClaimsUpdater_ClaimsUpdater(),
    coins: new CoinsUpdater_CoinsUpdater(),
    contracts: new ContractsUpdater_ContractsUpdater(),
    inputs: new InputsUpdater_InputsUpdater(),
    outputs: new OutputsUpdater_OutputsUpdater(),
    transfers: new TransfersUpdater_TransfersUpdater()
  }) {
    super();
    this.updaters = updaters;
  }

  async save(contextIn, monitor, {
    block
  }) {
    return monitor.captureSpanLog(async span => {
      const transactionsIn = [...block.transactions.entries()].map(([transactionIndex, transaction]) => ({
        transactionIndex,
        transaction
      }));
      const {
        assets,
        contracts,
        context
      } = await getAssetsAndContractsForClient({
        monitor: span,
        context: contextIn,
        transactions: transactionsIn,
        blockIndex: block.index,
        blockTime: block.time
      });
      const transactions = await getTransactionDataForClient({
        monitor: span,
        context,
        blockIndex: block.index,
        transactions: transactionsIn
      });
      const addresses = getAddressesForClient({
        transactions,
        blockIndex: block.index,
        blockTime: block.time
      });
      const addressesData = getAddressesData(transactions);
      const [{
        assets: assetsData,
        coinModelChanges
      }] = await Promise.all([getAssetsDataForClient({
        monitor: span,
        context,
        transactions,
        blockIndex: block.index
      }), this.updaters.addresses.save(context, span, {
        addresses
      }), this.updaters.assets.save(context, span, {
        assets
      })]);
      await Promise.all([this.insertTransactions(context, span, block.index, block.time, transactions), this.updaters.actions.save(context, span, {
        actions: external_lodash_default.a.flatMap(transactions, ({
          actionDatas,
          transactionID,
          transactionHash
        }) => actionDatas.map(({
          action
        }) => ({
          action,
          transactionID,
          transactionHash
        })))
      }), this.updaters.addressesData.save(context, span, {
        addresses: addressesData,
        blockTime: block.time,
        blockIndex: block.index
      }), this.updaters.addressToTransaction.save(context, span, {
        transactions: transactions.map(({
          addressIDs,
          transactionID
        }) => ({
          addressIDs: Object.keys(addressIDs),
          transactionID
        }))
      }), this.updaters.addressToTransfer.save(context, span, {
        transfers: external_lodash_default.a.flatMap(transactions, ({
          actionDatas
        }) => actionDatas.map(({
          transfer
        }) => transfer).filter(utils["a" /* utils */].notNull).map(({
          result: {
            fromAddressID,
            toAddressID,
            transferID
          }
        }) => ({
          addressIDs: [fromAddressID, toAddressID].filter(utils["a" /* utils */].notNull),
          transferID
        })))
      }), this.updaters.assetsData.save(context, span, {
        assets: assetsData,
        blockIndex: block.index
      }), this.updaters.assetToTransaction.save(context, span, {
        transactions
      }), this.updaters.claims.save(context, span, {
        transactions
      }), this.updaters.coins.save(context, span, {
        coinModelChanges
      }), this.updaters.contracts.save(context, span, {
        contracts
      }), this.updaters.inputs.save(context, span, {
        transactions,
        blockIndex: block.index
      }), this.updaters.outputs.save(context, span, {
        transactions
      }), this.updaters.transfers.save(context, span, {
        transactions: external_lodash_default.a.flatMap(transactions, ({
          actionDatas,
          transactionID,
          transactionHash,
          transactionIndex
        }) => actionDatas.map(({
          action,
          transfer
        }) => transfer === undefined ? undefined : {
          action,
          transferData: transfer,
          transactionID,
          transactionHash,
          transactionIndex
        }).filter(utils["a" /* utils */].notNull)),
        blockIndex: block.index,
        blockTime: block.time
      })]);
      return context;
    }, {
      name: 'neotracker_scrape_save_transactions',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, {
    blockModel
  }) {
    return monitor.captureSpan(async span => {
      const transactions = await getTransactionDataForModel({
        monitor: span,
        context,
        blockModel
      });
      const addressesData = getAddressesData(transactions);
      const {
        assets: assetsData,
        coinModelChanges
      } = await getAssetsDataForModel({
        monitor: span,
        context,
        transactions,
        blockIndex: blockModel.id
      });
      const transactionIDs = transactions.map(({
        transactionModel
      }) => transactionModel.id);

      const contractIDs = external_lodash_default.a.flatMap(transactions, ({
        contracts
      }) => contracts.map(({
        id
      }) => id));

      await Promise.all([this.updaters.actions.revert(context, span, {
        transactionIDs
      }), this.updaters.addressesData.revert(context, span, {
        addresses: addressesData,
        transactionIDs,
        blockIndex: blockModel.id
      }), this.updaters.addressToTransaction.revert(context, span, {
        transactionIDs
      }), this.updaters.addressToTransfer.revert(context, span, {
        transferIDs: external_lodash_default.a.flatMap(transactions, ({
          actionDatas
        }) => actionDatas.map(({
          transfer
        }) => transfer).filter(utils["a" /* utils */].notNull).map(({
          result: {
            transferID
          }
        }) => transferID))
      }), this.updaters.assetsData.revert(context, span, {
        assets: assetsData,
        blockIndex: blockModel.id
      }), this.updaters.assetToTransaction.revert(context, span, {
        transactionIDs
      }), this.updaters.claims.revert(context, span, {
        claims: external_lodash_default.a.flatMap(transactions.map(({
          claims
        }) => claims))
      }), this.updaters.coins.revert(context, span, {
        coinModelChanges
      }), this.updaters.contracts.revert(context, span, {
        contractIDs
      }), this.updaters.inputs.revert(context, span, {
        references: external_lodash_default.a.flatMap(transactions.map(({
          inputs
        }) => inputs))
      }), this.updaters.outputs.revert(context, span, {
        outputIDs: transactions.reduce((acc, transaction) => acc.concat(transaction.outputs.map(output => output.id)), [])
      }), this.updaters.transfers.revert(context, span, {
        transferIDs: external_lodash_default.a.flatMap(transactions, ({
          actionDatas
        }) => actionDatas.map(({
          action,
          transfer
        }) => transfer === undefined ? undefined : action.id).filter(utils["a" /* utils */].notNull))
      })]);
      await Promise.all([this.updaters.addresses.revert(context, span, {
        addresses: external_lodash_default.a.flatMap(transactions, ({
          addressIDs
        }) => Object.entries(addressIDs).map(([addressID, {
          startTransactionID
        }]) => ({
          id: addressID,
          transactionID: startTransactionID
        }))),
        blockIndex: blockModel.id
      }), this.updaters.assets.revert(context, span, {
        transactionIDs
      })]);
      await Promise.all(external_lodash_default.a.chunk(transactions, context.chunkSize).map(chunk => Transaction["Transaction"].query(context.db).context(context.makeQueryContext(span)).whereIn('id', chunk.map(({
        transactionModel
      }) => transactionModel.id)).delete()));
      const contractIDsSet = new Set(contractIDs);
      return Object.assign({}, context, {
        nep5Contracts: Object.entries(context.nep5Contracts).reduce((acc, [contractID, nep5Contract]) => contractIDsSet.has(contractID) ? acc : Object.assign({}, acc, {
          [contractID]: nep5Contract
        }), {})
      });
    }, {
      name: 'neotracker_scrape_revert_transactions'
    });
  }

  async insertTransactions(context, monitor, blockIndex, blockTime, transactions) {
    await Promise.all(external_lodash_default.a.chunk(transactions, context.chunkSize).map(async chunk => {
      await Transaction["Transaction"].insertAll(context.db, context.makeQueryContext(monitor), chunk.map(({
        transaction,
        transactionIndex
      }) => ({
        id: transaction.receipt.globalIndex.toString(),
        hash: transaction.hash,
        type: transaction.type,
        size: transaction.size,
        version: transaction.version,
        attributes_raw: JSON.stringify(transaction.attributes),
        system_fee: transaction.systemFee.toFixed(8),
        network_fee: transaction.networkFee.toFixed(8),
        // tslint:disable-next-line no-any
        nonce: transaction.nonce === undefined ? undefined : `${transaction.nonce}`,
        // tslint:disable-next-line no-any
        pubkey: transaction.publicKey === undefined ? undefined : transaction.publicKey,
        block_id: blockIndex,
        block_time: blockTime,
        index: transactionIndex,
        scripts_raw: JSON.stringify(transaction.scripts.map(script => ({
          invocation_script: script.invocation,
          verification_script: script.verification
        }))),
        // tslint:disable-next-line no-any
        script: transaction.script === undefined ? undefined : transaction.script,
        // tslint:disable-next-line no-any
        gas: transaction.gas === undefined ? undefined : transaction.gas.toFixed(8),
        result_raw: // tslint:disable-next-line no-any
        transaction.invocationData === undefined || // tslint:disable-next-line no-any
        transaction.invocationData.result === undefined ? undefined : // tslint:disable-next-line no-any
        JSON.stringify(transaction.invocationData.result)
      })));
    }));
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/utils/getCurrentHeight.ts


async function getCurrentHeightWorker(context, monitor) {
  return monitor.captureSpanLog(async span => ProcessedIndex_ProcessedIndex.query(context.db).context(context.makeQueryContext(span)).max('index').first().then(result => {
    // Handle sqlite return
    // tslint:disable-next-line no-any
    if (result !== undefined && result['max(`index`)'] != undefined) {
      // tslint:disable-next-line no-any
      return result['max(`index`)'];
    } // tslint:disable-next-line no-any


    return result === undefined || result.max == undefined ? -1 : result.max;
  }).then(Number), {
    name: 'neotracker_scrape_run_get_current_height',
    level: 'verbose',
    error: {}
  });
}

async function getCurrentHeight(context, monitor) {
  if (context.currentHeight !== undefined) {
    return Promise.resolve(context.currentHeight);
  }

  return getCurrentHeightWorker(context, monitor);
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/utils/getPreviousBlockData.ts

async function getPreviousBlockData(context, monitor, index) {
  return monitor.captureSpanLog(async span => {
    const prevBlockData = context.prevBlockData;

    if (prevBlockData !== undefined && prevBlockData.previous_block_id + 1 === index) {
      return prevBlockData;
    }

    const blockModel = await Block["Block"].query(context.db).context(context.makeQueryContext(span)).where('id', index - 1).first();

    if (blockModel === undefined) {
      return undefined;
    }

    return {
      previous_block_id: blockModel.id,
      previous_block_hash: blockModel.hash,
      validator_address_id: blockModel.next_validator_address_id,
      aggregated_system_fee: blockModel.aggregated_system_fee
    };
  }, {
    name: 'neotracker_scrape_get_previous_block_model',
    level: 'verbose',
    error: {}
  });
}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/db/BlockUpdater.ts








const BlockUpdater_ZERO = new external_bignumber_js_default.a(0);
class BlockUpdater_BlockUpdater extends DBUpdater {
  constructor(updaters = {
    address: new AddressesUpdater_AddressesUpdater(),
    processedIndex: new ProcessedIndexUpdater_ProcessedIndexUpdater(),
    prevBlock: new PrevBlockUpdater_PrevBlockUpdater(),
    transactions: new TransactionsUpdater_TransactionsUpdater()
  }) {
    super();
    this.updaters = updaters;
  }

  async save(context, monitor, block) {
    return monitor.captureSpanLog(async span => {
      const [height, prevBlockData] = await Promise.all([getCurrentHeight(context, span), getPreviousBlockData(context, span, block.index)]);

      if (block.index === height + 1) {
        if (prevBlockData === undefined || block.previousBlockHash === prevBlockData.previous_block_hash) {
          const systemFee = block.transactions.reduce((sysFee, transaction) => sysFee.plus(new external_bignumber_js_default.a(transaction.systemFee)), BlockUpdater_ZERO);
          const aggregatedSystemFee = prevBlockData === undefined ? systemFee : new external_bignumber_js_default.a(prevBlockData.aggregated_system_fee).plus(systemFee);
          const [innerNextContext] = await Promise.all([this.updaters.transactions.save(context, span, {
            block
          }), Block["Block"].insertAndReturn(context.db, context.makeQueryContext(span), Object.assign({}, prevBlockData, {
            id: block.index,
            hash: block.hash,
            size: block.size,
            version: block.version,
            merkle_root: block.merkleRoot,
            time: block.time,
            nonce: block.nonce,
            next_validator_address_id: block.nextConsensus,
            invocation_script: block.script.invocation,
            verification_script: block.script.verification,
            transaction_count: block.transactions.length,
            system_fee: systemFee.toFixed(8),
            network_fee: block.transactions.reduce((networkFee, transaction) => networkFee.plus(new external_bignumber_js_default.a(transaction.networkFee)), new external_bignumber_js_default.a('0')).toFixed(8),
            aggregated_system_fee: aggregatedSystemFee.toFixed(8)
          })).catch(error => {
            if (Object(knexUtils["c" /* isUniqueError */])(context.db, error)) {
              return Block["Block"].query(context.db).context(context.makeQueryContext(span)).where('id', block.index).first().throwIfNotFound();
            }

            throw error;
          }), this.updaters.address.save(context, span, {
            addresses: [{
              id: block.nextConsensus,
              // tslint:disable no-null-keyword
              transaction_id: null,
              transaction_hash: null,
              // tslint:enable no-null-keyword
              block_id: block.index,
              block_time: block.time,
              transaction_count: '0',
              transfer_count: '0',
              aggregate_block_id: -1
            }]
          }), context.systemFee.save({
            index: block.index,
            value: aggregatedSystemFee.toFixed(8)
          }, span), this.updaters.prevBlock.save(context, span, {
            block
          })]);
          await this.updaters.processedIndex.save(innerNextContext, span, block.index);
          return Object.assign({}, innerNextContext, {
            prevBlockData: {
              previous_block_id: block.index,
              previous_block_hash: block.hash,
              validator_address_id: block.nextConsensus,
              aggregated_system_fee: aggregatedSystemFee.toFixed(8)
            },
            currentHeight: block.index
          });
        }

        const prevBlockModel = await Block["Block"].query(context.db).context(context.makeQueryContext(span)).where('id', block.index - 1).first().throwIfNotFound();
        const [prevBlock, nextContext] = await Promise.all([context.client.getBlock(height), this.revert(context, span, prevBlockModel)]);
        return this.save(nextContext, span, prevBlock);
      }

      if (block.index === height) {
        const blockModel = await Block["Block"].query(context.db).context(context.makeQueryContext(span)).findById(block.index).throwIfNotFound();

        if (block.hash !== blockModel.hash) {
          const nextContext = await this.revert(context, span, blockModel);
          return this.save(nextContext, span, block);
        }
      }

      return context;
    }, {
      name: 'neotracker_scrape_save_block',
      level: 'verbose',
      error: {}
    });
  }

  async revert(context, monitor, blockModel) {
    return monitor.captureSpan(async span => {
      await Promise.all([this.updaters.address.revert(context, span, {
        addresses: [{
          id: blockModel.next_validator_address_id
        }],
        blockIndex: blockModel.id
      }), this.updaters.transactions.revert(context, span, {
        blockModel
      }), context.systemFee.revert(blockModel.id, span), this.updaters.prevBlock.revert(context, span, {
        blockIndex: blockModel.id
      })]);
      await blockModel.$query(context.db).context(context.makeQueryContext(span)).delete();
      await this.updaters.processedIndex.revert(context, span, blockModel.id);
      const prevBlockData = await getPreviousBlockData(context, monitor, blockModel.id - 1);
      return Object.assign({}, context, {
        prevBlockData,
        currentHeight: prevBlockData === undefined ? -1 : prevBlockData.previous_block_id
      });
    }, {
      name: 'neotracker_scrape_revert_block'
    });
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/migrations/index.ts
// tslint:disable-next-line export-name
const migrations = [];
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/MigrationHandler.ts


class MigrationHandler_MigrationHandler {
  constructor({
    enabled,
    db,
    makeQueryContext,
    monitor
  }) {
    this.enabled = enabled;
    this.db = db;
    this.makeQueryContext = makeQueryContext;
    this.monitor = monitor;
    this.mutableTableCreated = false;
  }

  async shouldExecute(name) {
    if (!this.enabled) {
      return false;
    }

    if (!this.mutableTableCreated) {
      const schema = this.db.schema;
      const {
        modelSchema
      } = Migration_Migration;
      const exists = await schema.queryContext(Object(QueryContext["a" /* makeAllPowerfulQueryContext */])(this.monitor)).hasTable(modelSchema.tableName);

      if (!exists) {
        await createTables(this.db, this.monitor);
      }

      const initMigration = await this.getMigration('initialization');

      if (initMigration === undefined || !initMigration.complete) {
        await Promise.all(migrations.map(async ([migrationName]) => this.onComplete(migrationName)));
        await this.onComplete('initialization');
      }

      this.mutableTableCreated = true;
    }

    const migration = await this.getMigration(name);
    return migration === undefined ? true : !migration.complete;
  }

  async onComplete(name) {
    const migration = await this.getMigration(name);

    if (migration === undefined) {
      await Migration_Migration.query(this.db).context(this.makeQueryContext(this.monitor)).insert({
        name,
        complete: true
      });
    } else {
      await migration.$query(this.db).context(this.makeQueryContext(this.monitor)).patch({
        complete: true
      });
    }
  }

  async checkpoint(name, data, monitor) {
    const migration = await this.getMigration(name, monitor);

    if (migration === undefined) {
      await Migration_Migration.query(this.db).context(this.makeQueryContext(monitor)).insert({
        name,
        complete: false,
        data
      });
    } else {
      await migration.$query(this.db).context(this.makeQueryContext(monitor)).patch({
        data
      });
    }
  }

  async getCheckpoint(name, monitor) {
    const migration = await this.getMigration(name, monitor);
    return migration === undefined ? undefined : migration.data;
  }

  async getMigration(name, monitor = this.monitor) {
    return Migration_Migration.query(this.db).context(this.makeQueryContext(monitor)).where('name', name).first();
  }

}
// EXTERNAL MODULE: external "ix/asynciterable/asynciterablex"
var asynciterablex_ = __webpack_require__(309);

// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/normalizeBlock.ts

const normalizeHash = hash => {
  if (hash.startsWith('0x')) {
    return hash.substring(2);
  }

  return hash;
};

const normalizeInput = input => ({
  hash: normalizeHash(input.hash),
  index: input.index
});

const normalizeOutput = output => ({
  asset: normalizeHash(output.asset),
  value: output.value,
  address: output.address
});

const normalizeAttribute = attribute => ({
  // tslint:disable-next-line no-any
  usage: attribute.usage,
  data: normalizeHash(attribute.data)
});

const normalizeContract = contract => ({
  version: contract.version,
  address: contract.address,
  script: contract.script,
  parameters: contract.parameters,
  returnType: contract.returnType,
  name: contract.name,
  codeVersion: contract.codeVersion,
  author: contract.author,
  email: contract.email,
  description: contract.description,
  storage: contract.storage,
  dynamicInvoke: contract.dynamicInvoke,
  payable: contract.payable
});

const normalizeContractParameter = contractParameter => {
  switch (contractParameter.type) {
    case 'Signature':
      return {
        type: 'Signature',
        value: contractParameter.value
      };

    case 'Boolean':
      return {
        type: 'Boolean',
        value: contractParameter.value
      };

    case 'Integer':
      return {
        type: 'Integer',
        value: contractParameter.value
      };

    case 'Address':
      return {
        type: 'Address',
        value: contractParameter.value
      };

    case 'Hash256':
      return {
        type: 'Hash256',
        value: normalizeHash(contractParameter.value)
      };

    case 'Buffer':
      return {
        type: 'Buffer',
        value: contractParameter.value
      };

    case 'PublicKey':
      return {
        type: 'PublicKey',
        value: contractParameter.value
      };

    case 'String':
      return {
        type: 'String',
        value: contractParameter.value
      };

    case 'Array':
      return {
        type: 'Array',
        value: contractParameter.value
      };

    case 'InteropInterface':
      return {
        type: 'InteropInterface'
      };

    case 'Void':
      return {
        type: 'Void'
      };

    default:
      utils["a" /* utils */].assertNever(contractParameter);
      throw new Error('For TS');
  }
};

const normalizeAction = action => {
  switch (action.type) {
    case 'Log':
      return {
        type: 'Log',
        version: action.version,
        blockIndex: action.blockIndex,
        blockHash: normalizeHash(action.blockHash),
        transactionIndex: action.transactionIndex,
        transactionHash: normalizeHash(action.transactionHash),
        index: action.index,
        globalIndex: action.globalIndex,
        address: action.address,
        message: action.message
      };

    case 'Notification':
      return {
        type: 'Notification',
        version: action.version,
        blockIndex: action.blockIndex,
        blockHash: normalizeHash(action.blockHash),
        transactionIndex: action.transactionIndex,
        transactionHash: normalizeHash(action.transactionHash),
        index: action.index,
        globalIndex: action.globalIndex,
        address: action.address,
        args: action.args.map(normalizeContractParameter)
      };

    default:
      utils["a" /* utils */].assertNever(action);
      throw new Error('Unknown action type');
  }
};

const normalizeInvocationResult = result => {
  switch (result.state) {
    case 'HALT':
      return {
        state: 'HALT',
        gasCost: result.gasCost,
        gasConsumed: result.gasConsumed,
        stack: result.stack.map(normalizeContractParameter)
      };

    case 'FAULT':
      return {
        state: 'FAULT',
        gasCost: result.gasCost,
        gasConsumed: result.gasConsumed,
        stack: result.stack.map(normalizeContractParameter),
        message: result.message
      };

    default:
      utils["a" /* utils */].assertNever(result);
      throw new Error('Unknown InvocationResult type');
  }
};

const normalizeAssetType = asset => {
  switch (asset) {
    case 'Credit':
      return 'CreditFlag';

    case 'Duty':
      return 'DutyFlag';

    case 'Governing':
      return 'GoverningToken';

    case 'Utility':
      return 'UtilityToken';

    case 'Currency':
      return 'Currency';

    case 'Share':
      return 'Share';

    case 'Invoice':
      return 'Invoice';

    case 'Token':
      return 'Token';

    default:
      utils["a" /* utils */].assertNever(asset);
      throw new Error('Unknown AssetType');
  }
};

const normalizeAsset = asset => ({
  hash: normalizeHash(asset.hash),
  // tslint:disable-next-line no-any
  type: normalizeAssetType(asset.type),
  name: asset.name,
  amount: asset.amount,
  available: asset.available,
  precision: asset.precision,
  owner: asset.owner,
  admin: asset.admin,
  issuer: asset.issuer,
  expiration: asset.expiration,
  frozen: asset.frozen
});

const normalizeInvocationData = data => ({
  result: normalizeInvocationResult(data.result),
  asset: data.asset === undefined ? data.asset : normalizeAsset(data.asset),
  contracts: data.contracts.map(normalizeContract),
  deletedContractAddresses: data.deletedContractAddresses,
  migratedContractAddresses: data.migratedContractAddresses,
  actions: data.actions.map(normalizeAction)
});

const normalizeTransaction = transaction => {
  const transactionBase = {
    hash: normalizeHash(transaction.hash),
    size: transaction.size,
    version: transaction.version,
    attributes: transaction.attributes.map(normalizeAttribute),
    inputs: transaction.inputs.map(normalizeInput),
    outputs: transaction.outputs.map(normalizeOutput),
    scripts: transaction.scripts,
    systemFee: transaction.systemFee,
    networkFee: transaction.networkFee,
    receipt: Object.assign({}, transaction.receipt, {
      blockHash: normalizeHash(transaction.receipt.blockHash)
    })
  };

  switch (transaction.type) {
    case 'MinerTransaction':
      return Object.assign({}, transactionBase, {
        type: 'MinerTransaction',
        nonce: transaction.nonce
      });

    case 'IssueTransaction':
      return Object.assign({}, transactionBase, {
        type: 'IssueTransaction'
      });

    case 'ClaimTransaction':
      return Object.assign({}, transactionBase, {
        type: 'ClaimTransaction',
        claims: transaction.claims.map(normalizeInput)
      });

    case 'EnrollmentTransaction':
      return Object.assign({}, transactionBase, {
        type: 'EnrollmentTransaction',
        publicKey: transaction.publicKey
      });

    case 'RegisterTransaction':
      return Object.assign({}, transactionBase, {
        type: 'RegisterTransaction',
        asset: Object.assign({}, transaction.asset, {
          // tslint:disable-next-line no-any
          type: normalizeAssetType(transaction.asset.type)
        })
      });

    case 'ContractTransaction':
      return Object.assign({}, transactionBase, {
        type: 'ContractTransaction'
      });

    case 'PublishTransaction':
      return Object.assign({}, transactionBase, {
        type: 'PublishTransaction',
        contract: normalizeContract(transaction.contract)
      });

    case 'InvocationTransaction':
      return Object.assign({}, transactionBase, {
        type: 'InvocationTransaction',
        script: transaction.script,
        gas: transaction.gas,
        invocationData: normalizeInvocationData(transaction.invocationData)
      });

    case 'StateTransaction':
      return Object.assign({}, transactionBase, {
        type: 'StateTransaction'
      });

    default:
      utils["a" /* utils */].assertNever(transaction);
      throw new Error('Unknown transaction type');
  }
};

const normalizeBlock = block => ({
  hash: normalizeHash(block.hash),
  size: block.size,
  version: block.version,
  previousBlockHash: normalizeHash(block.previousBlockHash),
  merkleRoot: normalizeHash(block.merkleRoot),
  time: block.time,
  index: block.index,
  nonce: block.nonce,
  nextConsensus: block.nextConsensus,
  script: block.script,
  transactions: block.transactions.map(normalizeTransaction)
});
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/repairNEP5.ts




const NEOTRACKER_NEGATIVE_COIN_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_scrape_negative_coin_total'
});

const fetchNegativeCoins = async (context, monitor) => Coin["Coin"].query(context.db).context(context.makeQueryContext(monitor)).where('value', '<', 0);

const updateCoin = async (context, monitor, contract, coin) => {
  NEOTRACKER_NEGATIVE_COIN_TOTAL.inc();
  const balance = await contract.balanceOf(Object(client_["addressToScriptHash"])(coin.address_id), monitor);
  await coin.$query(context.db).context(context.makeQueryContext(monitor)).patch({
    value: balance.toString()
  });
};

const repairAssetSupply = async (context, monitor, assetHash, contract) => {
  let issued;

  try {
    issued = await contract.totalSupply(monitor);
  } catch (error) {
    if (error.message.includes('Expected one of ["Integer","ByteArray"] ContractParameterTypes')) {
      return;
    }

    throw error;
  }

  await Asset["Asset"].query(context.db).context(context.makeQueryContext(monitor)).patch({
    issued: issued.toString()
  }).where('id', assetHash);
};

const updateCoins = async (context, monitor, assetHash, coins) => {
  const contract = context.nep5Contracts[assetHash];

  if (contract !== undefined) {
    monitor.withData({
      [src_labels["a" /* labels */].SCRAPE_REPAIR_NEP5_COINS]: coins.length,
      [src_labels["a" /* labels */].SCRAPE_REPAIR_NEP5_ASSET]: assetHash
    }).log({
      name: 'neotracker_scrape_repair_nep5_coins',
      level: 'verbose'
    });

    if (coins.length > 0) {
      await repairAssetSupply(context, monitor, assetHash, contract);
    }

    await Promise.all(coins.map(async coin => updateCoin(context, monitor, contract, coin)));
  }
};

const repairCoins = async (context, monitor) => {
  const coins = await fetchNegativeCoins(context, monitor); // tslint:disable-next-line readonly-array

  const assetToCoins = coins.reduce((mutableAcc, coin) => {
    let mutableAssetCoins = mutableAcc[coin.asset_id];

    if (mutableAssetCoins === undefined) {
      mutableAcc[coin.asset_id] = mutableAssetCoins = [];
    }

    mutableAssetCoins.push(coin);
    return mutableAcc;
  }, {});
  await Promise.all(Object.entries(assetToCoins).map(async ([asset, assetCoins]) => updateCoins(context, monitor, asset, assetCoins)));
};

const repair = async (context, monitor) => {
  await repairCoins(context, monitor);
};

const repairNEP5 = async (context, monitorIn) => {
  const monitor = monitorIn.at('repair_nep5');

  try {
    await monitor.captureSpanLog(async span => repair(context, span), {
      name: 'neotracker_scrape_repair_nep5',
      level: {
        log: 'verbose',
        span: 'info'
      },
      error: {}
    });
  } catch (_a) {// do nothing
  }
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/run$.ts







const NEOTRACKER_PERSIST_BLOCK_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'neotracker_scrape_persist_block_duration_seconds'
});
const NEOTRACKER_PERSIST_BLOCK_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_scrape_persist_block_failures_total'
});
const NEOTRACKER_SCRAPE_BLOCK_INDEX_GAUGE = monitor_["metrics"].createGauge({
  name: 'neotracker_scrape_block_index',
  help: 'The current block index'
});
const NEOTRACKER_SCRAPE_PERSISTING_BLOCK_INDEX_GAUGE = monitor_["metrics"].createGauge({
  name: 'neotracker_scrape_persisting_block_index',
  help: 'The current in progress persist index'
});
const NEOTRACKER_PERSIST_BLOCK_LATENCY_SECONDS = monitor_["metrics"].createHistogram({
  name: 'neotracker_scrape_persist_block_latency_seconds',
  help: 'The latency from block timestamp to persist',
  buckets: [1, 2, 5, 7.5, 10, 12.5, 15, 17.5, 20]
});

class ExitError extends Error {}

const run$_getMonitor = monitor => monitor.at('scrape_run');

const deleteNEP5 = async (monitor, db, makeQueryContext, contract) => monitor.captureSpan(async span => {
  const asset = await Asset["Asset"].query(db).context(makeQueryContext(span)).where('id', contract.id).first();

  if (asset !== undefined) {
    await Promise.all([AddressToTransfer["AddressToTransfer"].query(db).context(makeQueryContext(span)).delete().from(db.raw('address_to_transfer USING transfer')).where(db.raw('address_to_transfer.id2 = transfer.id')).where('transfer.asset_id', asset.id), Coin["Coin"].query(db).context(makeQueryContext(span)).delete().where('asset_id', asset.id), AssetToTransaction["AssetToTransaction"].query(db).context(makeQueryContext(span)).delete().where('id1', asset.id)]);
    await Transfer["Transfer"].query(db).context(makeQueryContext(span)).delete().where('asset_id', asset.id);
    await asset.$query(db).context(makeQueryContext(span)).delete();
  }

  await contract.$query(db).context(makeQueryContext(span)).patch({
    type: models_common["j" /* NEP5_BLACKLIST_CONTRACT_TYPE */]
  });
}, {
  name: 'neotracker_scrape_contract_delete_nep5'
});

const cleanBlacklist = async ({
  context,
  monitor
}) => {
  const contractModels = await Contract["Contract"].query(context.db).context(context.makeQueryContext(monitor)).where('type', models_common["k" /* NEP5_CONTRACT_TYPE */]).whereIn('id', [...context.blacklistNEP5Hashes]);
  await Promise.all(contractModels.map(async contractModel => deleteNEP5(monitor, context.db, context.makeQueryContext, contractModel)));
};

function doRun$({
  context: contextIn,
  monitor,
  blockUpdater
}) {
  return external_rxjs_["Observable"].create(observer => {
    const signal = {
      running: true
    };
    let context = contextIn;

    async function _run() {
      const height = await getCurrentHeight(context, monitor);
      const blocks = context.client.iterBlocks({
        indexStart: height + 1,
        monitor
      });
      await asynciterablex_["AsyncIterableX"].from(blocks).forEach(async blockJSON => {
        if (!signal.running) {
          throw new ExitError();
        }

        const block = normalizeBlock(blockJSON);
        NEOTRACKER_SCRAPE_PERSISTING_BLOCK_INDEX_GAUGE.set(block.index);
        context = await monitor.captureSpanLog(async span => blockUpdater.save(context, span, block), {
          name: 'neotracker_persist_block',
          metric: {
            total: NEOTRACKER_PERSIST_BLOCK_DURATION_SECONDS,
            error: NEOTRACKER_PERSIST_BLOCK_FAILURES_TOTAL
          },
          level: 'debug',
          error: {},
          trace: true
        });
        NEOTRACKER_SCRAPE_BLOCK_INDEX_GAUGE.set(block.index);
        const latency = monitor.nowSeconds() - block.time;
        NEOTRACKER_PERSIST_BLOCK_LATENCY_SECONDS.observe(latency);

        if (block.index % context.repairNEP5BlockFrequency === 0 && latency <= context.repairNEP5LatencySeconds) {
          await repairNEP5(context, monitor);
        }
      });
    }

    _run().then(() => observer.complete()).catch(error => {
      if (!(error instanceof ExitError)) {
        observer.error(error);
      }
    });

    return {
      unsubscribe: () => {
        // tslint:disable-next-line no-object-mutation
        signal.running = false;
      }
    };
  });
} // tslint:disable-next-line export-name


const run$ = (context, monitorIn, blockUpdater) => {
  const monitor = run$_getMonitor(monitorIn);
  return Object(external_rxjs_["concat"])(Object(external_rxjs_["defer"])(async () => cleanBlacklist({
    context,
    monitor
  })), doRun$({
    context,
    monitor,
    blockUpdater
  }));
};
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/utils/add0x.ts
const add0x = hash => hash.startsWith('0x') ? hash : `0x${hash}`;
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/WriteCache.ts



class WriteCache_WriteCache {
  constructor({
    db,
    fetch,
    create,
    getKey,
    getKeyFromSave,
    getKeyFromRevert,
    revert,
    size
  }) {
    this.cache = external_lru_cache_default()(size === undefined ? 10000 : size);
    this.mutableSaveCache = {};
    this.db = db;
    this.fetch = fetch;
    this.create = create;
    this.revertInternal = revert;
    this.getKey = getKey;
    this.getKeyFromSave = getKeyFromSave;
    this.getKeyFromRevert = getKeyFromRevert;
  }

  async get(keyIn, monitor) {
    const key = this.getKey(keyIn);
    let result = this.mutableSaveCache[key];

    if (result === undefined) {
      result = this.cache.get(key);

      if (result === undefined) {
        result = this.fetch(keyIn, monitor);
        this.cache.set(key, result);
      }
    }

    return result;
  }

  async getThrows(key, monitor) {
    return this.get(key, monitor).then(utils["a" /* utils */].nullthrows);
  }

  async save(save, monitor) {
    const keyIn = this.getKeyFromSave(save);
    const key = this.getKey(keyIn);
    return this.get(keyIn, monitor).then(result => {
      if (result === undefined) {
        let saveResult = this.mutableSaveCache[key];

        if (saveResult === undefined) {
          saveResult = this.create(save, monitor).then(returningResult => {
            this.cache.set(key, Promise.resolve(returningResult)); // tslint:disable-next-line no-dynamic-delete

            delete this.mutableSaveCache[key];
            return returningResult;
          }).catch(async error => {
            // tslint:disable-next-line no-dynamic-delete
            delete this.mutableSaveCache[key];

            if (Object(knexUtils["c" /* isUniqueError */])(this.db, error)) {
              return this.getThrows(keyIn, monitor);
            }

            throw error;
          });
          this.mutableSaveCache[key] = saveResult;
        }

        return saveResult;
      }

      return result;
    });
  }

  async revert(options, monitor, db) {
    this.cache.del(this.getKey(this.getKeyFromRevert(options)));
    await this.revertInternal(options, monitor, db);
  }

  refresh(key, monitor) {
    const result = this.fetch(key, monitor);
    this.cache.set(this.getKey(key), result);
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-scrape/src/createScraper$.ts













const createScraper$ = ({
  monitor: monitorIn,
  environment,
  options$
}) => {
  const rootMonitor = monitorIn.at('scrape');
  const rootLoader$ = createRootLoader$({
    db$: createFromEnvironment$({
      monitor: rootMonitor,
      environment: environment.db,
      options$: options$.pipe(Object(operators_["map"])(options => options.db), Object(operators_["distinctUntilChanged"])())
    }),
    options$: options$.pipe(Object(operators_["map"])(options => options.rootLoader), Object(operators_["distinctUntilChanged"])()),
    monitor: rootMonitor
  }).pipe(Object(operators_["publishReplay"])(1), Object(operators_["refCount"])());
  const client$ = options$.pipe(Object(operators_["map"])(options => options.rpcURL), Object(operators_["distinctUntilChanged"])(), Object(operators_["map"])(rpcURL => new client_["ReadClient"](new client_["NEOONEDataProvider"]({
    network: environment.network,
    rpcURL
  }))), Object(operators_["publishReplay"])(1), Object(operators_["refCount"])());
  const processedIndexPubSub$ = options$.pipe(Object(operators_["map"])(options => options.pubSub), Object(operators_["distinctUntilChanged"])(), // tslint:disable-next-line no-unnecessary-type-annotation
  mergeScanLatest(async (prev, pubSubOptions) => {
    if (prev !== undefined) {
      prev.close();
    }

    return createProcessedNextIndexPubSub({
      options: pubSubOptions,
      environment: environment.pubSub,
      monitor: rootMonitor
    });
  }));
  const scrape$ = Object(external_rxjs_["combineLatest"])(client$, rootLoader$, options$.pipe(Object(operators_["map"])(options => options.migrationEnabled), Object(operators_["distinctUntilChanged"])()), options$.pipe(Object(operators_["map"])(options => options.repairNEP5BlockFrequency), Object(operators_["distinctUntilChanged"])()), options$.pipe(Object(operators_["map"])(options => options.repairNEP5LatencySeconds), Object(operators_["distinctUntilChanged"])()), Object(external_rxjs_["combineLatest"])(options$.pipe(Object(operators_["map"])(options => options.chunkSize), Object(operators_["distinctUntilChanged"])()), processedIndexPubSub$, options$.pipe(Object(operators_["map"])(options => options.blacklistNEP5Hashes), Object(operators_["distinctUntilChanged"])()))).pipe(Object(operators_["map"])(([client, rootLoader, migrationEnabled, repairNEP5BlockFrequency, repairNEP5LatencySeconds, [chunkSize = 1000, processedIndexPubSub, blacklistNEP5Hashes]]) => {
    const makeQueryContext = rootLoader.makeAllPowerfulQueryContext;
    const {
      db
    } = rootLoader;
    return {
      db,
      makeQueryContext,
      client,
      prevBlockData: undefined,
      currentHeight: undefined,
      systemFee: new WriteCache_WriteCache({
        db,
        fetch: async (index, monitor) => Block["Block"].query(rootLoader.db).context(makeQueryContext(monitor)).where('id', index).first().then(result => result === undefined ? undefined : new external_bignumber_js_default.a(result.aggregated_system_fee)),
        create: async ({
          value
        }) => Promise.resolve(new external_bignumber_js_default.a(value)),
        revert: async (_index, _monitor) => {// do nothing
        },
        getKey: index => `${index}`,
        getKeyFromSave: ({
          index
        }) => index,
        getKeyFromRevert: index => index
      }),
      nep5Contracts: {},
      migrationHandler: new MigrationHandler_MigrationHandler({
        enabled: migrationEnabled,
        db,
        monitor: rootMonitor,
        makeQueryContext
      }),
      blacklistNEP5Hashes: new Set(blacklistNEP5Hashes),
      repairNEP5BlockFrequency,
      repairNEP5LatencySeconds,
      chunkSize,
      processedIndexPubSub
    };
  }), mergeScanLatest(async (_acc, context) => {
    const contractModels = await Contract["Contract"].query(context.db).context(context.makeQueryContext(rootMonitor)).where('type', models_common["k" /* NEP5_CONTRACT_TYPE */]);
    const nep5ContractPairs = await Promise.all(contractModels.filter(contractModel => !context.blacklistNEP5Hashes.has(contractModel.id)).map(async contractModel => {
      const decimals = await client_["nep5"].getDecimals(context.client, add0x(contractModel.id));
      const contract = client_["nep5"].createNEP5ReadSmartContract(context.client, add0x(contractModel.id), decimals);
      return [contractModel.id, contract];
    }));
    return Object.assign({}, context, {
      nep5Contracts: external_lodash_default.a.fromPairs(nep5ContractPairs)
    });
  }), mergeScanLatest(async (_acc, context) => {
    // tslint:disable-next-line no-loop-statement
    for (const [name, migration] of migrations) {
      const execute = await context.migrationHandler.shouldExecute(name);

      if (execute) {
        await migration(context, rootMonitor, name);
        await context.migrationHandler.onComplete(name);
      }
    }

    return context;
  }), Object(operators_["switchMap"])(context => run$(context, rootMonitor, new BlockUpdater_BlockUpdater())));
  return Object(external_rxjs_["combineLatest"])(rootLoader$, Object(external_rxjs_["concat"])(Object(external_rxjs_["of"])(undefined), scrape$)).pipe(Object(operators_["switchMap"])(([rootLoader]) => Object(external_rxjs_["timer"])(0, 5000).pipe(Object(operators_["switchMap"])(async () => isHealthyDB(rootLoader.db, rootMonitor)))));
};
// EXTERNAL MODULE: ./packages/neotracker-server-utils/src/errors/CodedError.ts
var CodedError = __webpack_require__(101);

// EXTERNAL MODULE: ./packages/neotracker-shared-utils/src/errors/ClientError.ts + 1 modules
var ClientError = __webpack_require__(336);

// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/tryParseInt.ts
 // tslint:disable-next-line no-null-keyword

const DEFAULT = Object.create(null);
const tryParseInt = ({
  value,
  // $FlowFixMe
  default: defaultValue = DEFAULT
}) => {
  const result = Number(value);

  if (Number.isNaN(result) || !Number.isInteger(result)) {
    if (defaultValue === DEFAULT) {
      throw new ClientError["b" /* ClientError */](ClientError["c" /* SOMETHING_WENT_WRONG */]);
    }

    return defaultValue;
  }

  return result;
};
// EXTERNAL MODULE: external "fs-extra"
var external_fs_extra_ = __webpack_require__(41);

// EXTERNAL MODULE: external "graphql"
var external_graphql_ = __webpack_require__(70);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/QueryMap.ts






const queryCache = {};
class QueryMap_QueryMap {
  constructor({
    next,
    queriesPath,
    nextQueriesDir
  }) {
    this.next = next;
    this.queriesPath = queriesPath;
    this.nextQueriesDir = nextQueriesDir;
  }

  async get(id) {
    let queriesPromise = this.mutableQueries;

    if (queriesPromise === undefined) {
      this.mutableQueries = queriesPromise = this.loadQueries();
    }

    let queriesNextPromise = this.mutableQueriesNext;

    if (queriesNextPromise === undefined) {
      this.mutableQueriesNext = queriesNextPromise = this.loadQueriesNext();
    }

    const [queries, queriesNext] = await Promise.all([queriesPromise, queriesNextPromise]);
    const doc = queryCache[id];

    if (doc === undefined) {
      let query;

      if (this.next) {
        query = queriesNext[id];
      } else {
        const idParsed = tryParseInt({
          value: id,
          default: undefined
        });

        if (idParsed == undefined) {
          throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
        } // tslint:disable-next-line no-any


        query = queries[idParsed];
      }

      if (query === undefined) {
        throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].GRAPHQL_QUERY_NOT_FOUND_ERROR);
      }

      const document = Object(external_graphql_["parse"])(query); // tslint:disable-next-line no-object-mutation

      queryCache[id] = document;
      return document;
    }

    return doc;
  }

  async loadQueries() {
    const exists = await external_fs_extra_["pathExists"](this.queriesPath);

    if (exists) {
      const queries = await external_fs_extra_["readFile"](this.queriesPath, 'utf8');
      return JSON.parse(queries);
    }

    return [];
  }

  async loadQueriesNext() {
    const exists = await external_fs_extra_["pathExists"](this.nextQueriesDir);

    if (exists) {
      const files = await external_fs_extra_["readdir"](this.nextQueriesDir);
      const hashAndContents = await Promise.all(files.map(async fileName => {
        const queryID = fileName.slice(0, -'.graphql'.length);
        const content = await external_fs_extra_["readFile"](external_path_["resolve"](this.nextQueriesDir, fileName), 'utf8');
        return [queryID, content];
      }));
      return external_lodash_default.a.fromPairs(hashAndContents);
    }

    return {};
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/lib/RootCall.ts

 // tslint:disable-next-line no-unnecessary-class

class RootCall_RootCall {
  // tslint:disable-next-line no-any
  static makeResolver() {
    throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
  }

  static initialize$(_options$) {
    return external_rxjs_["EMPTY"];
  }

}
// EXTERNAL MODULE: external "safe-stable-stringify"
var external_safe_stable_stringify_ = __webpack_require__(62);
var external_safe_stable_stringify_default = /*#__PURE__*/__webpack_require__.n(external_safe_stable_stringify_);

// CONCATENATED MODULE: ./packages/neotracker-shared-graphql/src/QueryDeduplicator.ts




const GRAPHQL_EXECUTE_QUERIES_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'graphql_execute_queries_duration_seconds'
});
const GRAPHQL_EXECUTE_QUERIES_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'graphql_execute_queries_failures_total'
}); // tslint:disable-next-line no-let

let resolvedPromise;
class QueryDeduplicator_QueryDeduplicator {
  constructor(executeQueries, monitor) {
    this.consumeQueue = () => {
      const mutableQueue = this.mutableQueue;
      this.mutableQueue = [];
      this.mutableInflight = {};

      if (mutableQueue.length > 0) {
        const {
          monitor = this.monitor
        } = mutableQueue[0];
        monitor.at('query_deduplicator').withData({
          [src_labels["a" /* labels */].QUEUE_SIZE]: mutableQueue.length
        }).captureSpanLog(async span => this.executeQueries(mutableQueue.map(obj => ({
          id: obj.id,
          variables: obj.variables
        })), span), {
          name: 'graphql_execute_queries',
          references: mutableQueue.slice(1).map(value => monitor.childOf(value.monitor)),
          level: {
            log: 'verbose',
            span: 'info'
          },
          metric: {
            total: GRAPHQL_EXECUTE_QUERIES_DURATION_SECONDS,
            error: GRAPHQL_EXECUTE_QUERIES_FAILURES_TOTAL
          },
          trace: true
        }).then(results => {
          results.forEach((result, idx) => mutableQueue[idx].resolve(result));
        }).catch(error => {
          mutableQueue.forEach(({
            reject
          }) => reject(error));
        });
      }
    };

    this.executeQueries = executeQueries;
    this.mutableInflight = {};
    this.mutableQueue = [];
    this.monitor = monitor;
  }

  async execute({
    id,
    variables,
    monitor
  }) {
    const cacheKey = external_safe_stable_stringify_default()({
      id,
      variables
    });

    if (this.mutableInflight[cacheKey] === undefined) {
      this.mutableInflight[cacheKey] = this.enmutableQueueQuery(cacheKey, id, variables, monitor);
    }

    return this.mutableInflight[cacheKey];
  }

  async enmutableQueueQuery(cacheKey, id, variables, monitor) {
    if (external_lodash_default.a.isEmpty(this.mutableInflight)) {
      // tslint:disable-next-line strict-type-predicates
      if (process !== undefined) {
        if (resolvedPromise === undefined) {
          resolvedPromise = Promise.resolve();
        } // tslint:disable-next-line no-floating-promises


        resolvedPromise.then(() => process.nextTick(this.consumeQueue));
      } else {
        setTimeout(this.consumeQueue, 0);
      }
    } // tslint:disable-next-line promise-must-complete


    return new Promise((resolve, reject) => this.mutableQueue.push({
      cacheKey,
      id,
      variables,
      resolve,
      reject,
      monitor
    }));
  }

}
// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/errors/sanitizeError.ts

const sanitizeErrorNullable = error => {
  if (error instanceof ClientError["b" /* ClientError */]) {
    return error;
  }

  const clientError = ClientError["b" /* ClientError */].getClientError(error);

  if (clientError !== undefined) {
    return clientError;
  }

  return undefined;
};
const sanitizeError = error => {
  const sanitizedError = sanitizeErrorNullable(error);
  return sanitizedError === undefined ? new ClientError["b" /* ClientError */](ClientError["c" /* SOMETHING_WENT_WRONG */]) : sanitizedError;
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/lib/Input.ts
// tslint:disable-next-line no-unnecessary-class
class Input {
  static get typeDef() {
    return `
      input ${this.inputName} {
        ${Object.entries(this.definition).map(([fieldName, typeName]) => `${fieldName}: ${typeName}`).join('\n          ')}
      }
    `;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/stripColumn.ts
const stripColumn = colName => {
  const parts = colName.split('.');

  if (parts.length === 1) {
    return undefined;
  }

  return parts[0];
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/getRelationExpressionForColumns.ts


const getRelationExpressionForColumns = (model, values = []) => values.reduce((relationExpression, value) => {
  const table = stripColumn(value);
  let thisRelationExpression;

  if (table !== undefined) {
    thisRelationExpression = table.replace(/:/g, '.');
  }

  if (thisRelationExpression === model.modelSchema.tableName) {
    thisRelationExpression = undefined;
  } else if (thisRelationExpression !== undefined) {
    // @ts-ignore
    thisRelationExpression = external_objection_["RelationExpression"].create(thisRelationExpression);
  }

  if (relationExpression === undefined) {
    return thisRelationExpression;
  } // @ts-ignore


  return relationExpression.merge(thisRelationExpression);
}, undefined);
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/inputs/FilterInput.ts


const OPERATORS = ['=', '!=', 'in', 'is_null', 'is_not_null'];
class FilterInput_FilterInput extends Input {
  static modifyQuery( // tslint:disable-next-line no-any
  query, _model, filters) {
    filters.forEach(filter => {
      if (filter.operator === 'is_null') {
        query.whereNull(filter.name);
      } else if (filter.operator === 'is_not_null') {
        query.whereNotNull(filter.name);
      } else {
        query.where(filter.name, filter.operator, filter.value);
      }
    });
  }

  static getJoinRelation(model, filters) {
    return getRelationExpressionForColumns(model, filters.map(filter => filter.name));
  }

}
FilterInput_FilterInput.inputName = 'FilterInput';
FilterInput_FilterInput.definition = {
  name: 'String!',
  operator: 'String!',
  value: 'String!'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/inputs/OrderByInput.ts


class OrderByInput_OrderByInput extends Input {
  static modifyQuery( // tslint:disable-next-line no-any
  query, _model, orderBys) {
    orderBys.forEach(orderBy => query.orderBy(orderBy.name, orderBy.direction));
  }

  static getJoinRelation(model, orderBys) {
    return getRelationExpressionForColumns(model, orderBys.filter(orderBy => orderBy.type !== 'literal').map(orderBy => orderBy.name));
  }

}
OrderByInput_OrderByInput.inputName = 'OrderByInput';
OrderByInput_OrderByInput.definition = {
  name: 'String!',
  direction: 'String!',
  type: 'String'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/inputs/inputs.ts

 // tslint:disable-next-line export-name

const inputs_inputs = () => [FilterInput_FilterInput, OrderByInput_OrderByInput];
// EXTERNAL MODULE: external "graphql-tools"
var external_graphql_tools_ = __webpack_require__(232);

// CONCATENATED MODULE: ./packages/neotracker-shared-graphql/src/ids.ts
const toGlobalID = (type, id) => [type, id].join(':');
const fromGlobalID = globalID => {
  const delimiterPos = globalID.indexOf(':');
  return {
    type: globalID.substring(0, delimiterPos),
    id: parseInt(globalID.substring(delimiterPos + 1), 10)
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/filterForFilterOrderBy.ts

const filterForFilterOrderBy = ({
  query,
  model,
  filters,
  orderBy
}) => {
  if (filters !== undefined) {
    FilterInput_FilterInput.modifyQuery(query, model, filters);
  }

  if (orderBy !== undefined) {
    OrderByInput_OrderByInput.modifyQuery(query, model, orderBy);
  }
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/parseFieldsFromInfo.ts
// tslint:disable prefer-switch no-object-mutation


const isFieldNode = node => node.kind === 'Field';

const isFragmentSpreadNode = node => node.kind === 'FragmentSpread';

const isInlineFragmentNode = node => node.kind === 'InlineFragment'; // tslint:disable-next-line no-any


function parseFields(nodes, fragments, treeIn = {}) {
  return nodes.reduce((tree, node) => {
    if (isFieldNode(node)) {
      if (node.selectionSet) {
        // eslint-disable-next-line no-param-reassign
        tree[node.name.value] = tree[node.name.value] === undefined ? {} : tree[node.name.value];
        parseFields(node.selectionSet.selections, fragments, tree[node.name.value]);
      } else {
        // eslint-disable-next-line no-param-reassign
        tree[node.name.value] = true;
      }
    } else if (isFragmentSpreadNode(node)) {
      const fragment = fragments[node.name.value];

      if (fragment === undefined) {
        throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
      }

      parseFields(fragment.selectionSet.selections, fragments, tree);
    } else if (isInlineFragmentNode(node)) {
      parseFields(node.selectionSet.selections, fragments, tree);
    }

    return tree;
  }, treeIn);
}

const parseFieldsFromInfo = info => parseFields(info.fieldNodes, info.fragments);
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/buildEager.ts
 // tslint:disable-next-line no-any

function buildEagerWorker(fields, model) {
  let numExpressions = 0;
  let expression = '';
  Object.entries(fields).forEach(([fieldName, fieldValue]) => {
    const edge = (model.modelSchema.edges === undefined ? {} : model.modelSchema.edges)[fieldName]; // tslint:disable-next-line no-any

    const relation = model.getRelations()[fieldName];

    if (relation !== undefined && edge !== undefined && edge.exposeGraphQL && !edge.computed && (relation.constructor === external_objection_["Model"].HasOneRelation || relation.constructor === external_objection_["Model"].BelongsToOneRelation)) {
      let relExpr = fieldName;
      const subExpr = buildEagerWorker(fieldValue, relation.relatedModelClass);

      if (subExpr !== undefined && subExpr.length > 0) {
        relExpr += `.${subExpr}`;
      }

      if (expression.length) {
        expression += ', ';
      }

      expression += relExpr;
      numExpressions += 1;
    }
  });

  if (numExpressions > 1) {
    expression = `[${expression}]`;
  }

  return expression;
} // tslint:disable-next-line no-any


const buildEager = (fields, model) => {
  const eager = buildEagerWorker(fields, model); // @ts-ignore

  return eager === undefined ? undefined : external_objection_["RelationExpression"].parse(eager);
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/getFilterOrderByRelationExpression.ts

const getFilterOrderByRelationExpression = ({
  model,
  filters,
  orderBy
}) => {
  const filterRelationExpression = filters === undefined ? undefined : FilterInput_FilterInput.getJoinRelation(model, filters);
  const orderByRelationExpression = orderBy === undefined ? undefined : OrderByInput_OrderByInput.getJoinRelation(model, orderBy);

  if (filterRelationExpression === undefined) {
    return orderByRelationExpression;
  } // @ts-ignore


  return filterRelationExpression.merge(orderByRelationExpression);
};
// CONCATENATED MODULE: ./packages/neotracker-shared-graphql/src/types.ts
// tslint:disable
const isPagingFirst = paging => paging.first !== undefined;
const isPagingLast = paging => paging.last !== undefined; // eslint-disable-next-line

const types_OPERATORS = ['=', '!=', 'in', 'is_null', 'is_not_null'];
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/applyPagingArguments.ts


const getPagingArguments = paging => {
  if (isPagingFirst(paging)) {
    return {
      forward: true,
      offset: paging.after === undefined ? undefined : parseInt(paging.after, 10),
      limit: paging.first
    };
  }

  if (isPagingLast(paging)) {
    return {
      forward: false,
      offset: paging.before === undefined ? undefined : parseInt(paging.before, 10),
      limit: paging.last
    };
  }

  return undefined;
};

const applyPagingArguments = async ({
  builder,
  paging
}) => {
  const pagingArguments = getPagingArguments(paging);
  let pageInfo;

  if (pagingArguments) {
    const {
      forward,
      offset,
      limit
    } = pagingArguments;

    if (forward) {
      const newOffset = offset === undefined ? 0 : offset + 1; // tslint:disable-next-line no-any

      const pagingForwardResults = await builder.offset(newOffset).limit(limit + 1);
      const edges = pagingForwardResults.slice(0, limit);
      return {
        edges: edges.map((result, idx) => ({
          cursor: `${newOffset + idx}`,
          node: result
        })),
        pageInfo: {
          hasPreviousPage: false,
          hasNextPage: pagingForwardResults.length === limit + 1,
          endCursor: `${newOffset + (edges.length - 1)}`
        }
      };
    }

    const start = offset === undefined ? 0 : offset - limit - 1;
    const actualStart = Math.max(start, 0);
    pageInfo = {
      hasPreviousPage: start > 0,
      hasNextPage: false,
      startCursor: `${actualStart}`
    }; // tslint:disable-next-line no-any

    const pagingResults = await builder.offset(actualStart).limit(actualStart + limit);
    return {
      edges: pagingResults.map((result, idx) => ({
        cursor: `${actualStart + idx}`,
        node: result
      })),
      pageInfo
    };
  } // tslint:disable-next-line no-any


  const results = await builder;
  return {
    edges: results.map((result, idx) => ({
      cursor: `${idx}`,
      node: result
    })),
    pageInfo: {
      hasPreviousPage: false,
      hasNextPage: false
    }
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/getPagingArguments.ts
const getPagingArguments_getPagingArguments = ({
  first,
  after,
  last,
  before
}) => {
  if (first !== undefined) {
    return {
      first,
      after
    };
  }

  if (last !== undefined && before !== undefined) {
    return {
      last,
      before
    };
  }

  return {};
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/gen/namer.ts

const getRootEdgeName = ({
  model,
  plural
}) => Object(external_change_case_["snakeCase"])(plural ? model.modelSchema.pluralName : model.modelSchema.name);
const getTypeName = model => model.modelSchema.name;
const getInterfaceName = iface => iface.interfaceName;

const getEdgeOrConnectionName = (model, edgeName, suffix) => {
  if (model === undefined) {
    return `${Object(external_change_case_["pascalCase"])(edgeName)}${suffix}`;
  }

  const iface = model.modelSchema.interfaces.find(innerIface => innerIface.graphqlFields.includes(edgeName));

  if (iface === undefined) {
    return `${getTypeName(model)}To${Object(external_change_case_["pascalCase"])(edgeName)}${suffix}`;
  }

  return `${getInterfaceName(iface)}To${Object(external_change_case_["pascalCase"])(edgeName)}${suffix}`;
};

const getConnectionName = (model, edgeName) => getEdgeOrConnectionName(model, edgeName, 'Connection');
const getEdgeName = (model, edgeName) => getEdgeOrConnectionName(model, edgeName, 'Edge');
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/gen/ResolverBuilder.ts
// tslint:disable no-any no-object-mutation no-loop-statement











const GRAPHQL_EXECUTE_FIELD_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'graphql_execute_field_duration_seconds',
  labelNames: [src_labels["a" /* labels */].GRAPHQL_PATH]
});
const GRAPHQL_EXECUTE_FIELD_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'graphql_execute_field_failures_total',
  labelNames: [src_labels["a" /* labels */].GRAPHQL_PATH]
});

function wrapFieldResolver(_type, _field, resolver) {
  return async (...args) => {
    const context = args.length === 3 ? args[1] : args[2];
    const info = args.length === 3 ? args[2] : args[3];
    const span = context.getMonitor(info);
    return span.withLabels({
      [src_labels["a" /* labels */].GRAPHQL_PATH]: info.path.key
    }).captureSpanLog(currentSpan => {
      context.spans[String(info.path.key)] = currentSpan; // @ts-ignore

      return resolver(...args);
    }, {
      name: 'graphql_execute_field',
      level: {
        log: 'debug',
        span: 'info'
      },
      metric: {
        total: GRAPHQL_EXECUTE_FIELD_DURATION_SECONDS,
        error: GRAPHQL_EXECUTE_FIELD_FAILURES_TOTAL
      },
      error: {},
      trace: true
    });
  };
}

function wrapResolver(type, field, resolverIn) {
  const resolver = resolverIn;

  if (typeof resolver === 'function') {
    return wrapFieldResolver(type, field, resolver);
  }

  return {
    resolve: wrapFieldResolver(type, field, resolverIn.resolve),
    live: resolver.live
  };
}

const resolveNode = async (_obj, {
  id
}, context, info) => {
  const {
    type: typeName,
    id: modelID
  } = fromGlobalID(id);
  const modelLoaderName = Object(external_change_case_["camelCase"])(typeName);
  const loader = context.rootLoader.loaders[modelLoaderName];

  if (loader !== undefined) {
    return loader.load({
      id: modelID,
      monitor: context.getMonitor(info)
    });
  }

  throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].NOT_FOUND_ERROR);
};

const makeResolveModelLive = model => liveExecuteField((obj, args, context, info) => Object(external_rxjs_["concat"])(Object(external_rxjs_["of"])(undefined), model.observable$(obj, args, context, info)));

function isBaseModel(p) {
  return p.isModel;
}

class ResolverBuilder_ResolverBuilder {
  constructor(models, types, inputs, roots, mutations, doProfiling) {
    this.models = models;
    this.types = types;
    this.inputs = inputs;
    this.roots = roots;
    this.mutations = mutations;
    this.doProfiling = doProfiling;
  }

  build() {
    const resolvers = Object.assign({
      Query: {}
    }, this.getMutationResolvers());
    let typeResolvers = {};
    this.models.filter(isBaseModel).forEach(model => {
      if (model.modelSchema.exposeGraphQL) {
        resolvers.Query[getRootEdgeName({
          model,
          plural: true
        })] = this.makeResolveNodes(model);
        resolvers.Query[getRootEdgeName({
          model,
          plural: false
        })] = this.makeResolveNode(model);
      }

      const edgeResolvers = this.getEdgeResolvers(model);
      const fieldResolvers = this.getFieldResolvers(model);
      const typeName = getTypeName(model);
      typeResolvers[typeName] = Object.assign({}, edgeResolvers, fieldResolvers);
      model.modelSchema.interfaces.forEach(iface => {
        typeResolvers[getInterfaceName(iface)] = {
          __resolveType(obj) {
            return getTypeName(obj.constructor);
          }

        };
      });
    });
    typeResolvers = external_lodash_default.a.mapValues(typeResolvers, (fieldResolvers, typeName) => Object.assign({
      id: obj => toGlobalID(typeName, obj.id)
    }, fieldResolvers));
    resolvers.Query = Object.assign({}, resolvers.Query, this.roots.reduce((accum, rootCall) => Object.assign({}, accum, {
      [rootCall.fieldName]: rootCall.makeResolver()
    }), {}));
    const allResolvers = Object.assign({}, resolvers, typeResolvers);
    const wrappedResolvers = {};

    for (const [type, fieldResolvers] of Object.entries(allResolvers)) {
      wrappedResolvers[type] = {};

      for (const [field, fieldResolver] of Object.entries(fieldResolvers)) {
        wrappedResolvers[type][field] = wrapResolver(type, field, fieldResolver);
      }
    }

    return wrappedResolvers;
  }

  makeResolveNode(model) {
    return {
      resolve: resolveNode,
      live: makeResolveModelLive(model)
    };
  }

  makeResolveNodes(model) {
    return {
      resolve: this.makeResolver({
        model
      }),
      live: makeResolveModelLive(model)
    };
  }

  getMutationResolvers() {
    if (this.mutations.length === 0) {
      return {};
    }

    const resolvers = {
      Mutation: {}
    };
    this.mutations.forEach(mutation => {
      resolvers.Mutation = Object.assign({}, resolvers.Mutation, {
        [mutation.mutationName]: async (obj, args, context, info) => mutation.resolver(obj, args.input, context, info)
      });
    });
    return resolvers;
  }

  getEdgeResolvers(model) {
    const edgeResolvers = {};
    const relations = model.getRelations();
    const edges = model.modelSchema.edges === undefined ? {} : model.modelSchema.edges;
    Object.entries(edges).forEach(([edgeName, edge]) => {
      const relation = relations[edgeName];

      if (relation && edge.exposeGraphQL) {
        // @ts-ignore
        if (relation instanceof external_objection_["Model"].BelongsToOneRelation || relation instanceof external_objection_["Model"].HasOneRelation) {
          edgeResolvers[edgeName] = this.makeSingleEdgeResolver({
            edge: {
              name: edgeName,
              model: relation.relatedModelClass,
              makeGraphQLResolver: edge.makeGraphQLResolver
            }
          }); // @ts-ignore
        } else if (relation instanceof external_objection_["Model"].ManyToManyRelation || relation instanceof external_objection_["Model"].HasManyRelation) {
          edgeResolvers[edgeName] = this.makeResolver({
            model,
            edge: {
              name: edgeName,
              model: relation.relatedModelClass
            }
          });
        } else {
          throw new Error(`Relation type ${relation.name} is not supported.`);
        }
      }
    });
    return edgeResolvers;
  }

  getFieldResolvers(model) {
    return Object.entries(model.modelSchema.fields).reduce((acc, [fieldName, field]) => {
      if (field.graphqlResolver !== undefined) {
        acc[fieldName] = field.graphqlResolver;
      }

      return acc;
    }, {});
  }

  makeResolver({
    model,
    edge
  }) {
    return async (obj, argsIn, context, info) => {
      if (obj != undefined && edge !== undefined && obj.$relatedQuery == undefined) {
        return obj[edge.name];
      }

      const thisModel = edge === undefined ? model : edge.model;
      const builder = edge === undefined ? model.query(context.rootLoader.db) : obj.$relatedQuery(edge.name, context.rootLoader.db);
      builder.context(context.rootLoader.makeQueryContext(context.getMonitor(info)));
      const args = argsIn;
      const edgesBuilder = builder.clone();
      const countBuilder = builder.clone();
      filterForFilterOrderBy({
        query: countBuilder,
        model: thisModel,
        filters: args.filters
      });
      const fields = Object.values(parseFieldsFromInfo(info))[0];
      const [edgesResult, countResult] = await Promise.all([this.getEdges(obj, thisModel, context, edgesBuilder, args, fields, info, edge), this.getCount(thisModel, countBuilder, fields)]);
      return Object.assign({}, edgesResult, countResult);
    };
  }

  makeSingleEdgeResolver({
    edge
  }) {
    const resolveEdge = async (obj, _args, context, info) => {
      if (obj.constructor == undefined || obj[edge.name] != undefined) {
        return obj[edge.name];
      }

      const edgeSchema = obj.constructor.modelSchema.edges[edge.name];
      const {
        relation
      } = edgeSchema;
      const monitor = context.getMonitor(info);

      if (relation.relation === external_objection_["Model"].HasOneRelation || relation.relation === external_objection_["Model"].BelongsToOneRelation) {
        const fromFieldName = relation.join.from.split('.')[1];
        const field = obj[fromFieldName];

        if (field == undefined) {
          return undefined;
        }

        return obj.getLoaderByEdge(context.rootLoader.makeQueryContext(monitor), edge.name).load({
          id: field,
          monitor
        });
      }

      const builder = obj.$relatedQuery(edge.name, context.rootLoader.db).context(context.rootLoader.makeQueryContext(monitor));
      const fields = Object.values(parseFieldsFromInfo(info))[0];
      const eager = buildEager(fields, edge.model);

      if (eager) {
        builder.eager(eager);
      }

      return builder;
    };

    return edge.makeGraphQLResolver === undefined ? resolveEdge : edge.makeGraphQLResolver(resolveEdge);
  }

  async getEdges(obj, model, context, builder, args, fields, info, edge) {
    if (fields.edges == undefined) {
      return {};
    }

    const monitor = context.getMonitor(info);

    if (edge !== undefined && external_lodash_default.a.isEmpty(args)) {
      const edgeSchema = obj.constructor.modelSchema.edges[edge.name];
      const {
        relation
      } = edgeSchema;

      if (relation.relation === external_objection_["Model"].HasManyRelation) {
        const fromFieldName = relation.join.from.split('.')[1];
        const field = obj[fromFieldName];

        if (field == undefined) {
          return {};
        }

        const results = await obj.getLoaderByEdge(context.rootLoader.makeQueryContext(context.getMonitor(info)), edge.name).load({
          id: field,
          monitor
        });
        return {
          edges: results.map((result, idx) => ({
            cursor: `${idx}`,
            node: result
          })),
          pageInfo: {
            hasPreviousPage: false,
            hasNextPage: false
          }
        };
      }
    }

    filterForFilterOrderBy({
      query: builder,
      model,
      filters: args.filters,
      orderBy: args.orderBy
    });
    const relationExpression = getFilterOrderByRelationExpression({
      model,
      filters: args.filters,
      orderBy: args.orderBy
    });

    if (relationExpression) {
      builder.joinRelation(relationExpression);
    }

    return applyPagingArguments({
      builder,
      paging: getPagingArguments_getPagingArguments(args)
    });
  }

  async getCount(_model, builder, fields) {
    if (fields.count == undefined) {
      return {};
    }

    return builder.count('*').first();
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/utils/getGraphQLType.ts
function getGraphQLType(fieldType) {
  switch (fieldType.type) {
    case 'id':
      return 'ID';

    case 'foreignID':
      return 'ID';

    case 'boolean':
      return 'Boolean';

    case 'bigInteger':
      return 'Int';

    case 'integer':
      return 'Int';

    case 'decimal':
      return 'String';

    case 'number':
      return 'Float';

    case 'string':
      return 'String';

    case 'array':
      return `[${getGraphQLType(fieldType.items)}!]`;

    case 'model':
      return fieldType.modelType;

    default:
      throw new Error(`Type '${fieldType.type}' is not implemented`);
  }
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/gen/TypeDefsBuilder.ts





function TypeDefsBuilder_isBaseModel(p) {
  return p.isModel;
}

class TypeDefsBuilder_TypeDefsBuilder {
  constructor(models, types, inputs, roots, mutations) {
    this.models = models;
    this.types = types;
    this.inputs = inputs;
    this.roots = roots;
    this.mutations = mutations;
  }

  build() {
    let typeDefs = this.models.filter(model => model.modelSchema.exposeGraphQLType).reduce((typeDefsAcc, model) => Object.assign({}, typeDefsAcc, this.makeTypeDefs(model)), {});
    const queryFields = ['node(id: ID!): Node', 'nodes(ids: [ID!]!): [Node]!'];
    const rootCallFieldNames = new Set(this.roots.map(rootCall => rootCall.fieldName));
    this.models.filter(TypeDefsBuilder_isBaseModel).filter(model => !!model.modelSchema.exposeGraphQL).forEach(model => {
      const pluralEdge = this.makeEdgeType({
        edgeName: getRootEdgeName({
          model,
          plural: true
        }),
        model,
        required: false,
        plural: true
      });

      if (!rootCallFieldNames.has(pluralEdge.fieldName)) {
        if (pluralEdge.typeDefs) {
          typeDefs = Object.assign({}, typeDefs, pluralEdge.typeDefs);
        }

        queryFields.push(this.constructField(pluralEdge.name, pluralEdge.typeName));
      }

      const idEdge = this.makeEdgeType({
        edgeName: getRootEdgeName({
          model,
          plural: false
        }),
        model,
        required: false,
        plural: false,
        withID: true
      });

      if (!rootCallFieldNames.has(idEdge.fieldName)) {
        if (idEdge.typeDefs) {
          typeDefs = Object.assign({}, typeDefs, idEdge.typeDefs);
        }

        queryFields.push(this.constructField(idEdge.name, idEdge.typeName));
      }
    });
    const mutationTypeDefs = this.getMutationTypeDefs();
    const queryFieldsString = `
          ${queryFields.join('\n          ')}
          ${this.roots.map(rootCall => `${rootCall.fieldName}${this.makeArguments(rootCall.args)}: ` + `${rootCall.typeName}`).join('\n          ')}
    `;
    return [`
        schema {
          query: Query
          ${mutationTypeDefs.length === 0 ? '' : 'mutation: Mutation'}
        }
      `, `
        type Query {
          ${queryFieldsString}
        }
      `].concat(Object.values(typeDefs)).concat(this.types.map(type => type.typeDef)).concat(this.inputs.map(input => input.typeDef)).concat(mutationTypeDefs);
  }

  getMutationTypeDefs() {
    if (this.mutations.length === 0) {
      return [];
    }

    const typeDefs = [`
        type Mutation {
          ${this.mutations.map(mutation => mutation.field).join('\n      ')}
        }
      `];
    this.mutations.forEach(mutation => {
      typeDefs.push(mutation.type);
      typeDefs.push(mutation.inputType);
    });
    return typeDefs;
  }

  makeTypeDefs(model) {
    const {
      fields,
      typeDefs
    } = this.makeAllFields(model);
    const interfaceString = this.getImplementsInterfaceString(model);
    const graphqlFields = this.makeFieldsString(fields);

    if (graphqlFields.length) {
      typeDefs[getTypeName(model)] = `
        type ${getTypeName(model)} ${interfaceString}{
          ${graphqlFields}
        }
      `;
      model.modelSchema.interfaces.forEach(iface => {
        // tslint:disable-next-line strict-type-predicates
        if (typeDefs[getInterfaceName(iface)] === undefined) {
          const interfaceFields = {};
          iface.graphqlFields.forEach(field => {
            let fieldname = field;
            let typename = fields[field]; // tslint:disable-next-line strict-type-predicates

            if (typename === undefined) {
              const fieldWithArgs = `${field}(`;
              Object.entries(fields).forEach(([fieldName, typeName]) => {
                if (fieldName.startsWith(fieldWithArgs)) {
                  fieldname = fieldName;
                  typename = typeName;
                }
              });
            }

            if (field === 'id') {
              typename = 'ID!';
            } // tslint:disable-next-line strict-type-predicates


            if (typename === undefined) {
              throw new Error(`Could not find interface type for field ${field} on type ${model.modelSchema.name}`);
            }

            interfaceFields[fieldname] = typename;
          });
          const interfaceGraphqlFields = this.makeFieldsString(interfaceFields);

          if (interfaceGraphqlFields.length) {
            typeDefs[getInterfaceName(iface)] = `
              interface ${getInterfaceName(iface)} {
                ${interfaceGraphqlFields}
              }
            `;
          }
        }
      });
    }

    return typeDefs;
  }

  makeFieldsString(fields) {
    return Object.entries(fields).map(([fieldName, typeName]) => `${fieldName}: ${typeName}`).join('\n          ');
  }

  getImplementsInterfaceString(model) {
    const interfaces = model.modelSchema.interfaces.map(getInterfaceName);
    let interfaceString = '';

    if (interfaces.length) {
      interfaceString = interfaces.length === 1 ? interfaces[0] : `${interfaces.join(', ')}`;
    }

    if (interfaceString.length) {
      interfaceString = `implements ${interfaceString}`;
    }

    return interfaceString;
  }

  makeAllFields(model) {
    const [fields, fieldsTypeDefs] = this.makeFields(model);
    const edges = this.makeEdges(model);
    const typeDefs = Object.assign({}, fieldsTypeDefs);
    edges.forEach(edge => {
      if (edge.typeDefs) {
        Object.entries(edge.typeDefs).forEach(([typeName, typeDef]) => {
          typeDefs[typeName] = typeDef;
        });
      } // tslint:disable-next-line strict-type-predicates


      if (fields[edge.name] !== undefined) {
        throw new Error(`Conflicting edge and/or field name ${edge.name}`);
      }

      fields[edge.name] = edge.typeName;
    });
    return {
      fields,
      typeDefs
    };
  }

  makeEdgeType({
    sourceModel,
    edgeName,
    model,
    required,
    plural,
    withID = false
  }) {
    if (plural) {
      const connectionTypeName = getConnectionName(sourceModel, edgeName);
      const edgeTypeName = getEdgeName(sourceModel, edgeName);
      const connectionTypeDef = `
        type ${connectionTypeName} {
          count: Int!
          edges: [${edgeTypeName}!]!
          pageInfo: PageInfo!
        }
      `;
      const edgeTypeDef = `
        type ${edgeTypeName} {
          cursor: String!
          node: ${getTypeName(model)}!
        }
      `;
      const args = {
        filters: '[FilterInput!]',
        orderBy: '[OrderByInput!]',
        first: 'Int',
        last: 'Int',
        before: 'String',
        after: 'String'
      };
      let pluralArgsString = Object.entries(args).map(([argName, pluralTypeName]) => this.constructField(argName, pluralTypeName)).join(', ');

      if (pluralArgsString.length) {
        pluralArgsString = `(${pluralArgsString})`;
      }

      return {
        name: `${edgeName}${pluralArgsString}`,
        typeName: `${connectionTypeName}!`,
        typeDefs: {
          [connectionTypeName]: connectionTypeDef,
          [edgeTypeName]: edgeTypeDef
        },
        fieldName: edgeName
      };
    }

    let argsString = '';

    if (withID) {
      argsString = '(id: ID!)';
    }

    let typeName = getTypeName(model);

    if (required) {
      typeName = `${typeName}!`;
    }

    return {
      name: `${edgeName}${argsString}`,
      typeName,
      fieldName: edgeName
    };
  }

  makeFields(model) {
    let typeDefs = {};
    const graphqlFields = Object.entries(model.modelSchema.fields) // tslint:disable-next-line no-unused
    .filter(([__, field]) => field.exposeGraphQL).reduce((fields, [fieldName, field]) => {
      const [fieldType, fieldTypeDefs] = this.getFieldType(field);
      typeDefs = Object.assign({}, typeDefs, fieldTypeDefs);
      fields[fieldName] = fieldName === 'id' ? 'ID!' : fieldType;
      return fields;
    }, {});
    return [graphqlFields, typeDefs];
  }

  getFieldType(field) {
    if (field.type.type === 'custom') {
      return [field.type.graphqlType, field.type.typeDefs === undefined ? {} : field.type.typeDefs];
    }

    let graphqlType = getGraphQLType(field.type);

    if (field.type.plural) {
      graphqlType = `[${graphqlType}!]`;
    }

    if (field.required || field.type.type === 'id') {
      graphqlType = `${graphqlType}!`;
    }

    return [graphqlType, {}];
  }

  makeEdges(model) {
    const {
      edges
    } = model.modelSchema;

    if (edges === undefined) {
      return [];
    }

    const relations = model.getRelations();
    return (// tslint:disable-next-line no-map-without-usage
      Object.entries(edges) // tslint:disable-next-line no-unused
      .filter(([__, edge]) => edge.exposeGraphQL).map(([edgeName, edge]) => this.makeEdge(model, edgeName, edge.required || false, relations[edgeName]))
    );
  }

  makeEdge(sourceModel, edgeName, required, relation) {
    const model = relation.relatedModelClass; // @ts-ignore

    if (relation instanceof external_objection_["Model"].HasOneRelation || relation instanceof external_objection_["Model"].BelongsToOneRelation) {
      return this.makeEdgeType({
        sourceModel,
        edgeName,
        model,
        required,
        plural: false
      });
    } // @ts-ignore


    if (relation instanceof external_objection_["Model"].HasManyRelation || relation instanceof external_objection_["Model"].ManyToManyRelation) {
      return this.makeEdgeType({
        sourceModel,
        edgeName,
        model,
        required,
        plural: true
      });
    }

    throw new Error(`Relation type ${relation.name} is not supported.`);
  }

  constructField(fieldName, typeName) {
    return `${fieldName}: ${typeName}`;
  }

  makeArguments(args) {
    if (external_lodash_default.a.isEmpty(args)) {
      return '';
    }

    return `(${Object.entries(args).map(([fieldName, typeName]) => this.constructField(fieldName, typeName)).join(', ')})`;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/gen/SchemaBuilder.ts


class SchemaBuilder_SchemaBuilder {
  constructor(models, types, inputs, roots, mutations, doProfiling) {
    this.models = models;
    this.types = types;
    this.inputs = inputs;
    this.roots = roots;
    this.mutations = mutations;
    this.doProfiling = doProfiling;
  } // tslint:disable-next-line no-any


  build() {
    return {
      typeDefs: new TypeDefsBuilder_TypeDefsBuilder(this.models, this.types, this.inputs, this.roots, this.mutations).build(),
      resolvers: new ResolverBuilder_ResolverBuilder(this.models, this.types, this.inputs, this.roots, this.mutations, this.doProfiling).build()
    };
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/makeSchema.ts


function makeSchema({
  models,
  types = [],
  inputs = [],
  roots = [],
  mutations = [],
  doProfiling = true
}) {
  const builder = new SchemaBuilder_SchemaBuilder(models, types, inputs, roots, mutations, doProfiling);
  const {
    typeDefs,
    resolvers
  } = builder.build();
  return Object(external_graphql_tools_["makeExecutableSchema"])({
    typeDefs: [...typeDefs],
    resolvers
  });
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/lib/Type.ts
// tslint:disable-next-line no-unnecessary-class
class Type {
  static get typeDef() {
    const implementsNode = this.definition.id === undefined ? '' : 'implements Node ';
    return `
      type ${this.typeName} ${implementsNode}{
        ${Object.entries(this.definition).map(([fieldName, typeName]) => `${fieldName}: ${typeName}`).join('\n          ')}
      }
    `;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/CurrentPrice.ts

class CurrentPrice_CurrentPrice extends Type {}
CurrentPrice_CurrentPrice.typeName = 'CurrentPrice';
CurrentPrice_CurrentPrice.definition = {
  id: 'ID!',
  sym: 'String!',
  price_usd: 'Float!',
  percent_change_24h: 'Float!',
  volume_usd_24h: 'Float!',
  market_cap_usd: 'Float!',
  last_updated: 'Int!'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/Filter.ts

class Filter_Filter extends Type {}
Filter_Filter.typeName = 'Filter';
Filter_Filter.definition = {
  name: 'String!',
  operator: 'String!',
  value: 'String!'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/OrderBy.ts

class OrderBy_OrderBy extends Type {}
OrderBy_OrderBy.typeName = 'OrderBy';
OrderBy_OrderBy.definition = {
  name: 'String!',
  direction: 'String!'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/PageInfo.ts

class PageInfo_PageInfo extends Type {}
PageInfo_PageInfo.typeName = 'PageInfo';
PageInfo_PageInfo.definition = {
  hasNextPage: 'Boolean!',
  hasPreviousPage: 'Boolean!',
  startCursor: 'String',
  endCursor: 'String'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/Script.ts

class Script_Script extends Type {}
Script_Script.typeName = 'Script';
Script_Script.definition = {
  invocation_script: 'String!',
  verification_script: 'String!'
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/types/types.ts





const types_types = () => [CurrentPrice_CurrentPrice, Filter_Filter, OrderBy_OrderBy, PageInfo_PageInfo, Script_Script];
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/schema.ts




 // tslint:disable-next-line no-let

let schemaCache;
const schema_schema = (forceNew = false) => {
  if (!forceNew && schemaCache !== undefined) {
    return schemaCache;
  }

  schemaCache = makeSchema({
    models: models_models(),
    roots: roots_roots(),
    inputs: inputs_inputs(),
    types: types_types()
  });
  return schemaCache;
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/makeContext.ts

function makeContext(rootLoader, monitorIn, query, queryID, getSpan) {
  const monitor = monitorIn.at('graphql');

  const getMonitor = () => {
    if (getSpan === undefined) {
      return monitor;
    }

    const span = getSpan();
    return span === undefined ? monitor : span.at('graphql');
  };

  const spans = {};
  return {
    rootLoader,
    query,
    queryID,
    schema: schema_schema(),
    spans,
    getMonitor: info => {
      if (info === undefined) {
        return getMonitor();
      }

      const {
        prev
      } = info.path;
      let span = prev === undefined ? undefined : spans[prev.key];

      if (span === undefined) {
        span = getMonitor();
      }

      return span;
    }
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/createQueryDeduplicator.ts





function createQueryDeduplicator_logError(monitor, name, error) {
  monitor.logError({
    name,
    error
  });
}

function formatError(monitor, name, graphQLError) {
  // tslint:disable-next-line no-any
  const error = graphQLError.originalError;

  if (error != undefined) {
    createQueryDeduplicator_logError(monitor, name, error);
    const sanitized = sanitizeErrorNullable(error);

    if (sanitized !== undefined) {
      return {
        message: sanitized.message
      };
    }
  } else {
    createQueryDeduplicator_logError(monitor, name, graphQLError);
  }

  return {
    message: sanitizeError(graphQLError).message
  };
}
function convertExecutionResult(result, monitor) {
  if (result.errors !== undefined && result.errors.length > 0) {
    return {
      errors: result.errors.map(error => formatError(monitor, 'graphql_execute_error', error))
    };
  }

  return {
    data: result.data
  };
}
async function doExecuteForDocument({
  schema,
  context,
  doc,
  variables,
  rootValue
}) {
  try {
    const response = await Object(external_graphql_["execute"])(schema, doc, rootValue, context, variables);
    return convertExecutionResult(response, context.getMonitor());
  } catch (error) {
    context.getMonitor().logError({
      name: 'graphql_top_level_execute_error',
      error
    });
    return {
      errors: [{
        message: sanitizeError(error).message
      }]
    };
  }
}
async function getDocument({
  queryMap,
  monitor,
  id
}) {
  try {
    const doc = await queryMap.get(id);
    return {
      type: 'doc',
      doc
    };
  } catch (error) {
    monitor.logError({
      name: 'graphql_get_query',
      error
    });
    return {
      type: 'error',
      errors: [{
        message: sanitizeError(error).message
      }]
    };
  }
}

async function doExecute(schema, queryMap, id, // tslint:disable-next-line no-any
variables, rootLoader, monitor) {
  return monitor.withLabels({
    [src_labels["a" /* labels */].GRAPHQL_QUERY]: id
  }).withData({
    [src_labels["a" /* labels */].GRAPHQL_VARIABLES]: JSON.stringify(variables)
  }).at('graphql_server').captureSpanLog(async span => {
    const docResult = await getDocument({
      queryMap,
      monitor: span,
      id
    });

    if (docResult.type === 'error' || docResult.doc === undefined) {
      return {
        errors: docResult.errors
      };
    }

    const context = makeContext(rootLoader, span, docResult.doc, id);
    return doExecuteForDocument({
      schema,
      context,
      doc: docResult.doc,
      variables
    });
  }, {
    name: 'graphql_execute',
    level: {
      log: 'verbose',
      span: 'info'
    }
  });
}

function createQueryDeduplicator(monitorIn, schema, queryMap, rootLoader) {
  return new QueryDeduplicator_QueryDeduplicator(async (queries, monitor) => Promise.all(queries.map(async query => doExecute(schema, queryMap, query.id, query.variables, rootLoader, monitor))), monitorIn);
}
// EXTERNAL MODULE: external "graphql/execution/values"
var values_ = __webpack_require__(227);

// EXTERNAL MODULE: external "graphql/language"
var language_ = __webpack_require__(117);

// EXTERNAL MODULE: external "graphql/type/definition"
var definition_ = __webpack_require__(53);

// EXTERNAL MODULE: external "graphql/utilities"
var utilities_ = __webpack_require__(228);

// EXTERNAL MODULE: external "graphql/error"
var error_ = __webpack_require__(105);

// EXTERNAL MODULE: external "graphql/execution/execute"
var execute_ = __webpack_require__(25);

// EXTERNAL MODULE: external "graphql/jsutils/invariant"
var invariant_ = __webpack_require__(106);
var invariant_default = /*#__PURE__*/__webpack_require__.n(invariant_);

// EXTERNAL MODULE: external "graphql/jsutils/isInvalid"
var isInvalid_ = __webpack_require__(229);
var isInvalid_default = /*#__PURE__*/__webpack_require__.n(isInvalid_);

// EXTERNAL MODULE: external "graphql/jsutils/isNullish"
var isNullish_ = __webpack_require__(230);
var isNullish_default = /*#__PURE__*/__webpack_require__.n(isNullish_);

// EXTERNAL MODULE: external "graphql/jsutils/isPromise"
var isPromise_ = __webpack_require__(54);
var isPromise_default = /*#__PURE__*/__webpack_require__.n(isPromise_);

// EXTERNAL MODULE: external "graphql/jsutils/memoize3"
var memoize3_ = __webpack_require__(231);
var memoize3_default = /*#__PURE__*/__webpack_require__.n(memoize3_);

// EXTERNAL MODULE: external "iterall"
var external_iterall_ = __webpack_require__(118);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/utils.ts
// tslint:disable

 // @ts-ignore

 // @ts-ignore

 // @ts-ignore

 // @ts-ignore

 // @ts-ignore




/**
 * This function transforms a JS object `ObjMap<Promise<T>>` into
 * a `Promise<ObjMap<T>>`
 *
 * This is akin to bluebird's `Promise.props`, but implemented only using
 * `Promise.all` so it will work with any implementation of ES6 promises.
 */

function promiseForObject(object) {
  const keys = Object.keys(object);
  const valuesAndPromises = keys.map(name => object[name]);
  return Promise.all(valuesAndPromises).then(values => values.reduce((resolvedObject, value, i) => {
    resolvedObject[keys[i]] = value;
    return resolvedObject;
  }, Object.create(null)));
}
/**
 * Resolves the field on the given source object. In particular, this
 * figures out the value that the field returns by calling its resolve function,
 * then calls completeValue to complete promises, serialize scalars, or execute
 * the sub-selection-set for objects.
 */


function resolveField(exeContext, parentType, source, fieldNodes, path) {
  const fieldNode = fieldNodes[0];
  const fieldName = fieldNode.name.value;
  const fieldDef = Object(execute_["getFieldDef"])(exeContext.schema, parentType, fieldName);

  if (!fieldDef) {
    return undefined;
  }

  const resolveFn = fieldDef.resolve || exeContext.fieldResolver;
  const info = Object(execute_["buildResolveInfo"])(exeContext, fieldDef, fieldNodes, parentType, path); // Get the resolve function, regardless of if its result is normal
  // or abrupt (error).

  const result = Object(execute_["resolveFieldValueOrError"])(exeContext, fieldDef, fieldNodes, resolveFn, source, info);
  return completeValueCatchingError(exeContext, fieldDef.type, fieldNodes, info, path, result);
}
/**
 * Implements the "Evaluating selection sets" section of the spec
 * for "read" mode.
 */

function executeFields(exeContext, parentType, sourceValue, path, fields) {
  let containsPromise = false;
  const finalResults = Object.keys(fields).reduce((results, responseName) => {
    const fieldNodes = fields[responseName];
    const fieldPath = Object(execute_["addPath"])(path, responseName);
    const result = resolveField(exeContext, parentType, sourceValue, fieldNodes, fieldPath);

    if (result === undefined) {
      return results;
    }

    results[responseName] = result;

    if (!containsPromise && isPromise_default()(result)) {
      containsPromise = true;
    }

    return results;
  }, Object.create(null)); // If there are no promises, we can just return the object

  if (!containsPromise) {
    return finalResults;
  } // Otherwise, results is a map from field name to the result
  // of resolving that field, which is possibly a promise. Return
  // a promise that will return this same map, but with any
  // promises replaced with the values they resolved to.


  return promiseForObject(finalResults);
}
/**
 * Implements the logic to compute the key of a given field's entry
 */


function getFieldEntryKey(node) {
  return node.alias ? node.alias.value : node.name.value;
} // This is a small wrapper around completeValue which annotates errors with
// location information.

function completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result) {
  try {
    const completed = completeValue(exeContext, returnType, fieldNodes, info, path, result);

    if (isPromise_default()(completed)) {
      return completed.then(null, error => Promise.reject(Object(error_["locatedError"])(asErrorInstance(error), fieldNodes, Object(execute_["responsePathAsArray"])(path))));
    }

    return completed;
  } catch (error) {
    throw Object(error_["locatedError"])(asErrorInstance(error), fieldNodes, Object(execute_["responsePathAsArray"])(path));
  }
} // This is a small wrapper around completeValue which detects and logs errors
// in the execution context.


function completeValueCatchingError(exeContext, returnType, fieldNodes, info, path, result) {
  // If the field type is non-nullable, then it is resolved without any
  // protection from errors, however it still properly locates the error.
  if (Object(definition_["isNonNullType"])(returnType)) {
    return completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);
  } // Otherwise, error protection is applied, logging the error and resolving
  // a null value for this field if one is encountered.


  try {
    const completed = completeValueWithLocatedError(exeContext, returnType, fieldNodes, info, path, result);

    if (isPromise_default()(completed)) {
      // If `completeValueWithLocatedError` returned a rejected promise, log
      // the rejection error and resolve to null.
      // Note: we don't rely on a `catch` method, but we do expect "thenable"
      // to take a second callback for the error case.
      return completed.then(null, error => {
        exeContext.errors.push(error);
        return Promise.resolve(null);
      });
    }

    return completed;
  } catch (error) {
    // If `completeValueWithLocatedError` returned abruptly (threw an error),
    // log the error and return null.
    exeContext.errors.push(error);
    return null;
  }
}
/**
 * Implements the instructions for completeValue as defined in the
 * "Field entries" section of the spec.
 *
 * If the field type is Non-Null, then this recursively completes the value
 * for the inner type. It throws a field error if that completion returns null,
 * as per the "Nullability" section of the spec.
 *
 * If the field type is a List, then this recursively completes the value
 * for the inner type on each item in the list.
 *
 * If the field type is a Scalar or Enum, ensures the completed value is a legal
 * value of the type by calling the `serialize` method of GraphQL type
 * definition.
 *
 * If the field is an abstract type, determine the runtime type of the value
 * and then complete based on that type
 *
 * Otherwise, the field type expects a sub-selection set, and will complete the
 * value by evaluating all sub-selections.
 */


function completeValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If result is a Promise, apply-lift over completeValue.
  if (isPromise_default()(result)) {
    return result.then(resolved => completeValue(exeContext, returnType, fieldNodes, info, path, resolved));
  } // If result is an Error, throw a located error.


  if (result instanceof Error) {
    throw result;
  } // If field type is NonNull, complete for inner type, and throw field error
  // if result is null.


  if (Object(definition_["isNonNullType"])(returnType)) {
    const completed = completeValue(exeContext, returnType.ofType, fieldNodes, info, path, result);

    if (completed === null) {
      throw new Error(`Cannot return null for non-nullable field ${info.parentType.name}.${info.fieldName}.`);
    }

    return completed;
  } // If result value is null-ish (null, null, or NaN) then return null.


  if (isNullish_default()(result)) {
    return null;
  } // If field type is List, complete each item in the list with the inner type


  if (Object(definition_["isListType"])(returnType)) {
    return completeListValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is a leaf type, Scalar or Enum, serialize to a valid value,
  // returning null if serialization is not possible.


  if (Object(definition_["isLeafType"])(returnType)) {
    return completeLeafValue(returnType, result);
  } // If field type is an abstract type, Interface or Union, determine the
  // runtime Object type and complete for that type.


  if (Object(definition_["isAbstractType"])(returnType)) {
    return completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result);
  } // If field type is Object, execute and complete all sub-selections.


  if (Object(definition_["isObjectType"])(returnType)) {
    return completeObjectValue(exeContext, returnType, fieldNodes, info, path, result);
  } // Not reachable. All possible output types have been considered.

  /* istanbul ignore next */


  throw new Error(`Cannot complete value of unexpected type "${String(returnType)}".`);
}
/**
 * Complete a list value by completing each item in the list with the
 * inner type
 */


function completeListValue(exeContext, returnType, fieldNodes, info, path, result) {
  invariant_default()(Object(external_iterall_["isCollection"])(result), `Expected Iterable, but did not find one for field ${info.parentType.name}.${info.fieldName}.`); // This is specified as a simple map, however we're optimizing the path
  // where the list contains no Promises by avoiding creating another Promise.

  const itemType = returnType.ofType;
  let containsPromise = false;
  const completedResults = [];
  Object(external_iterall_["forEach"])(result, (item, index) => {
    // No need to modify the info object containing the path,
    // since from here on it is not ever accessed by resolver functions.
    const fieldPath = Object(execute_["addPath"])(path, index);
    const completedItem = completeValueCatchingError(exeContext, itemType, fieldNodes, info, fieldPath, item);

    if (!containsPromise && isPromise_default()(completedItem)) {
      containsPromise = true;
    }

    completedResults.push(completedItem);
  });
  return containsPromise ? Promise.all(completedResults) : completedResults;
}
/**
 * Complete a Scalar or Enum by serializing to a valid value, returning
 * null if serialization is not possible.
 */


function completeLeafValue(returnType, result) {
  invariant_default()(returnType.serialize, 'Missing serialize method on type');
  const serializedResult = returnType.serialize(result);

  if (isInvalid_default()(serializedResult)) {
    throw new Error(`Expected a value of type "${String(returnType)}" but ` + `received: ${String(result)}`);
  }

  return serializedResult;
}
/**
 * Complete a value of an abstract type by determining the runtime object type
 * of that value, then complete the value for that type.
 */


function completeAbstractValue(exeContext, returnType, fieldNodes, info, path, result) {
  const runtimeType = returnType.resolveType ? returnType.resolveType(result, exeContext.contextValue, info) : defaultResolveTypeFn(result, exeContext.contextValue, info, returnType);

  if (isPromise_default()(runtimeType)) {
    return runtimeType.then(resolvedRuntimeType => completeObjectValue(exeContext, ensureValidRuntimeType(resolvedRuntimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result));
  }

  return completeObjectValue(exeContext, ensureValidRuntimeType(runtimeType, exeContext, returnType, fieldNodes, info, result), fieldNodes, info, path, result);
}

function ensureValidRuntimeType(runtimeTypeOrName, exeContext, returnType, fieldNodes, info, result) {
  const runtimeType = typeof runtimeTypeOrName === 'string' ? exeContext.schema.getType(runtimeTypeOrName) : runtimeTypeOrName;

  if (!Object(definition_["isObjectType"])(runtimeType)) {
    throw new error_["GraphQLError"](`Abstract type ${returnType.name} must resolve to an Object type at ` + `runtime for field ${info.parentType.name}.${info.fieldName} with ` + `value "${String(result)}", received "${String(runtimeType)}". ` + `Either the ${returnType.name} type should provide a "resolveType" ` + 'function or each possible types should provide an ' + '"isTypeOf" function.', fieldNodes);
  }

  if (!exeContext.schema.isPossibleType(returnType, runtimeType)) {
    throw new error_["GraphQLError"](`Runtime Object type "${runtimeType.name}" is not a possible type ` + `for "${returnType.name}".`, fieldNodes);
  }

  return runtimeType;
}
/**
 * Complete an Object value by executing all sub-selections.
 */


function completeObjectValue(exeContext, returnType, fieldNodes, info, path, result) {
  // If there is an isTypeOf predicate function, call it with the
  // current result. If isTypeOf returns false, then raise an error rather
  // than continuing execution.
  if (returnType.isTypeOf) {
    const isTypeOf = returnType.isTypeOf(result, exeContext.contextValue, info);

    if (isPromise_default()(isTypeOf)) {
      return isTypeOf.then(isTypeOfResult => {
        if (!isTypeOfResult) {
          throw invalidReturnTypeError(returnType, result, fieldNodes);
        }

        return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
      });
    }

    if (!isTypeOf) {
      throw invalidReturnTypeError(returnType, result, fieldNodes);
    }
  }

  return collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result);
}

function invalidReturnTypeError(returnType, result, fieldNodes) {
  return new error_["GraphQLError"](`Expected value of type "${returnType.name}" but got: ${String(result)}.`, fieldNodes);
}

function collectAndExecuteSubfields(exeContext, returnType, fieldNodes, info, path, result) {
  // Collect sub-fields to execute to complete this value.
  const subFieldNodes = collectSubfields(exeContext, returnType, fieldNodes);
  return executeFields(exeContext, returnType, result, path, subFieldNodes);
}

const collectSubfields = memoize3_default()(_collectSubfields);

function _collectSubfields(exeContext, returnType, fieldNodes) {
  let subFieldNodes = Object.create(null);
  const visitedFragmentNames = Object.create(null);

  for (let i = 0; i < fieldNodes.length; i += 1) {
    const selectionSet = fieldNodes[i].selectionSet;

    if (selectionSet) {
      subFieldNodes = Object(execute_["collectFields"])(exeContext, returnType, selectionSet, subFieldNodes, visitedFragmentNames);
    }
  }

  return subFieldNodes;
}

function defaultResolveTypeFn(value, context, info, abstractType) {
  // First, look for `__typename`.
  if (value !== null && typeof value === 'object' && typeof value.__typename === 'string') {
    return value.__typename;
  } // Otherwise, test each possible type.


  const possibleTypes = info.schema.getPossibleTypes(abstractType);
  const promisedIsTypeOfResults = [];

  for (let i = 0; i < possibleTypes.length; i += 1) {
    const type = possibleTypes[i];

    if (type.isTypeOf) {
      const isTypeOfResult = type.isTypeOf(value, context, info);

      if (isPromise_default()(isTypeOfResult)) {
        promisedIsTypeOfResults[i] = isTypeOfResult;
      } else if (isTypeOfResult) {
        return type;
      }
    }
  }

  if (promisedIsTypeOfResults.length) {
    return Promise.all(promisedIsTypeOfResults).then(isTypeOfResults => {
      for (let i = 0; i < isTypeOfResults.length; i += 1) {
        if (isTypeOfResults[i]) {
          return possibleTypes[i];
        }
      }

      return undefined;
    });
  }

  return undefined;
}

function asErrorInstance(error) {
  return error instanceof Error ? error : new Error(error == null ? null : error);
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/collectArgumentValues.ts






const collectArgumentValues = (schema, parentType, field, // tslint:disable-next-line no-any
variableValues) => {
  const typeInfo = new utilities_["TypeInfo"](schema); // tslint:disable-next-line no-any

  typeInfo._typeStack.push(parentType); // tslint:disable-next-line no-any


  typeInfo._parentTypeStack.push(Object(definition_["getNamedType"])(parentType));

  let allArgs = {};
  Object(language_["visit"])(field, Object(language_["visitWithTypeInfo"])(typeInfo, {
    Field(node) {
      const fieldDef = typeInfo.getFieldDef(); // tslint:disable-next-line strict-boolean-expressions

      if (fieldDef) {
        const args = Object(values_["getArgumentValues"])(fieldDef, node, variableValues);

        if (!external_lodash_default.a.isEmpty(args)) {
          allArgs = Object.assign({}, allArgs, {
            [getFieldEntryKey(node)]: args
          });
        }
      }
    }

  }));
  return allArgs;
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/liveMemoized.ts





 // tslint:disable-next-line readonly-keyword

const mutableMemoized$ = {};
function liveMemoized(observable$) {
  return (rootValue, // tslint:disable-next-line no-any
  args, context, info) => {
    if (mutableMemoized$[context.queryID] === undefined) {
      mutableMemoized$[context.queryID] = {};
    }

    const node = info.fieldNodes[0];
    const argumentValues = collectArgumentValues(info.schema, info.parentType, node, info.variableValues);
    const key = external_safe_stable_stringify_default()(argumentValues);

    if (mutableMemoized$[context.queryID][key] === undefined) {
      mutableMemoized$[context.queryID][key] = {};
    }

    const responseName = getFieldEntryKey(node); // tslint:disable-next-line no-any

    if (mutableMemoized$[context.queryID][key][responseName] === undefined) {
      mutableMemoized$[context.queryID][key][responseName] = observable$(rootValue, args, context, info).pipe(Object(operators_["catchError"])(error => Object(external_rxjs_["of"])({
        errors: [formatError(context.getMonitor(info), 'graphql_live_memoized_error', error)]
      })), Object(operators_["finalize"])(() => {
        // tslint:disable-next-line no-dynamic-delete
        delete mutableMemoized$[context.queryID][key][responseName];
      }), Object(operators_["publishReplay"])(1), Object(operators_["refCount"])());
    }

    return mutableMemoized$[context.queryID][key][responseName];
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/liveExecuteField.ts





function liveExecuteField(observable) {
  // tslint:disable-next-line no-any
  return liveMemoized((rootValue, args, context, info) => observable(rootValue, args, context, info).pipe(Object(operators_["switchMap"])(async payload => {
    const executionContext = {
      schema: info.schema,
      fragments: info.fragments,
      rootValue: info.rootValue,
      operation: info.operation,
      variableValues: info.variableValues,
      contextValue: context,
      fieldResolver: external_graphql_["defaultFieldResolver"],
      errors: []
    };
    let response = {};

    try {
      const result = await resolveField(executionContext, info.parentType, payload, info.fieldNodes, info.path);
      response = {
        data: {
          [getFieldEntryKey(info.fieldNodes[0])]: result
        }
      };
    } catch (error) {
      // tslint:disable-next-line no-array-mutation
      executionContext.errors.push(error);
    }

    response = Object.assign({}, response, {
      errors: executionContext.errors
    });
    return convertExecutionResult(response, context.getMonitor(info));
  })));
}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/BlockchainRootCall.ts





class BlockchainRootCall_BlockchainRootCall extends RootCall_RootCall {
  // tslint:disable no-any
  static async resolver(_obj, _args, _context, _info) {
    throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
  } // tslint:enable no-any
  // tslint:disable-next-line no-any


  static makeResolver() {
    return {
      resolve: this.resolver,
      live: liveExecuteField(() => Object(external_rxjs_["concat"])(Object(external_rxjs_["of"])(undefined), src_pubsub["a" /* pubsub */].observable$(createPubSub["a" /* PROCESSED_NEXT_INDEX */])))
    };
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/AddressRootCall.ts

class AddressRootCall_AddressRootCall extends BlockchainRootCall_BlockchainRootCall {}
AddressRootCall_AddressRootCall.fieldName = 'address';
AddressRootCall_AddressRootCall.typeName = 'Address';
AddressRootCall_AddressRootCall.args = {
  hash: 'String!'
}; // tslint:disable no-any

AddressRootCall_AddressRootCall.resolver = async (_obj, {
  hash
}, context, info) => // tslint:enable no-any
context.rootLoader.loaders.address.load({
  id: hash,
  monitor: context.getMonitor(info)
});
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/AppOptionsRootCall.ts





class AppOptionsRootCall_AppOptionsRootCall extends RootCall_RootCall {
  // tslint:disable no-any
  static makeResolver() {
    return {
      resolve: async (_obj, _args, _context, _info) => {
        // tslint:enable no-any
        const appOptions$ = this.getAppOptions$();
        return appOptions$.pipe(Object(operators_["take"])(1)).toPromise();
      },
      live: liveExecuteField(() => this.getAppOptions$())
    };
  }

  static getAppOptions$() {
    if (this.mutableAppOptions$ === undefined) {
      throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
    }

    return this.mutableAppOptions$;
  } // tslint:disable-next-line no-any


  static initialize$(options$) {
    this.mutableAppOptions$ = options$.pipe(Object(operators_["map"])(options => options.appOptions), Object(operators_["distinctUntilChanged"])(), Object(operators_["map"])(appOptions => JSON.stringify(appOptions)));
    return external_rxjs_["EMPTY"];
  }

}
AppOptionsRootCall_AppOptionsRootCall.fieldName = 'app_options';
AppOptionsRootCall_AppOptionsRootCall.typeName = 'String!';
AppOptionsRootCall_AppOptionsRootCall.args = {};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/AssetRootCall.ts

class AssetRootCall_AssetRootCall extends BlockchainRootCall_BlockchainRootCall {}
AssetRootCall_AssetRootCall.fieldName = 'asset';
AssetRootCall_AssetRootCall.typeName = 'Asset';
AssetRootCall_AssetRootCall.args = {
  hash: 'String!'
}; // tslint:disable no-any

AssetRootCall_AssetRootCall.resolver = async (_obj, {
  hash
}, context, info) => // tslint:enable no-any
context.rootLoader.loaders.asset.load({
  id: hash,
  monitor: context.getMonitor(info)
});
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/BlockRootCall.ts


class BlockRootCall_BlockRootCall extends BlockchainRootCall_BlockchainRootCall {}
BlockRootCall_BlockRootCall.fieldName = 'block';
BlockRootCall_BlockRootCall.typeName = 'Block';
BlockRootCall_BlockRootCall.args = {
  hash: 'String',
  index: 'Int'
}; // tslint:disable no-any

BlockRootCall_BlockRootCall.resolver = async (_obj, {
  hash,
  index
}, context, info) => {
  // tslint:enable no-any
  if (hash == undefined && index == undefined) {
    throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
  }

  const monitor = context.getMonitor(info); // Important it's in this order for the Search page

  if (index != undefined) {
    return context.rootLoader.loaders.block.load({
      id: index,
      monitor
    });
  }

  return context.rootLoader.blockHashLoader.load({
    id: hash,
    monitor
  });
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/ContractRootCall.ts

class ContractRootCall_ContractRootCall extends BlockchainRootCall_BlockchainRootCall {}
ContractRootCall_ContractRootCall.fieldName = 'contract';
ContractRootCall_ContractRootCall.typeName = 'Contract';
ContractRootCall_ContractRootCall.args = {
  hash: 'String!'
}; // tslint:disable no-any

ContractRootCall_ContractRootCall.resolver = async (_obj, {
  hash
}, context, info) => // tslint:enable no-any
context.rootLoader.loaders.contract.load({
  id: hash,
  monitor: context.getMonitor(info)
});
// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/tryParseNumber.ts
 // tslint:disable-next-line no-null-keyword

const tryParseNumber_DEFAULT = Object.create(null);
const tryParseNumber = ({
  value,
  // $FlowFixMe
  default: defaultValue = tryParseNumber_DEFAULT
}) => {
  const result = Number(value);

  if (Number.isNaN(result)) {
    if (defaultValue === tryParseNumber_DEFAULT) {
      throw new ClientError["b" /* ClientError */](ClientError["c" /* SOMETHING_WENT_WRONG */]);
    }

    return defaultValue;
  }

  return result;
};
// EXTERNAL MODULE: external "cross-fetch"
var external_cross_fetch_ = __webpack_require__(71);
var external_cross_fetch_default = /*#__PURE__*/__webpack_require__.n(external_cross_fetch_);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/channels.ts
const CURRENT_PRICE = 'current_price';
const PRICES = 'prices';
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/CurrentPriceRootCall.ts











const THREE_MINUTES_IN_SECONDS = 3 * 60;
const GAS = 'gas';
const SYM_TO_COINMARKETCAP = {
  NEO: 'neo',
  GAS
};
class CurrentPriceRootCall_CurrentPriceRootCall extends RootCall_RootCall {
  // tslint:disable no-any
  static makeResolver() {
    const resolve = async (_obj, {
      sym
    }, _context, _info) => {
      // tslint:enable no-any
      const assetID = SYM_TO_COINMARKETCAP[sym];

      if (assetID === undefined) {
        throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
      }

      return CurrentPriceRootCall_CurrentPriceRootCall.mutableCurrentPrices[assetID];
    };

    return {
      resolve,
      live: liveExecuteField((rootValue, args, context, info) => Object(external_rxjs_["concat"])(resolve(rootValue, args, context, info), src_pubsub["a" /* pubsub */].observable$(CURRENT_PRICE).pipe(Object(operators_["filter"])(payload => payload.sym === args.sym))))
    };
  }

  static async refreshCurrentPrice(sym, monitor, rootLoader) {
    const assetID = SYM_TO_COINMARKETCAP[sym];

    if (assetID === undefined) {
      return;
    }

    if (this.mutableRefreshing[assetID]) {
      return;
    }

    this.mutableRefreshing[assetID] = true;
    const previousCurrentPrice = this.mutableCurrentPrices[assetID];
    this.mutableCurrentPrices[assetID] = await this.getCurrentPrice(sym, assetID, monitor, rootLoader);
    const currentPrice = this.mutableCurrentPrices[assetID];

    if (currentPrice != undefined && !external_lodash_default.a.isEqual(currentPrice, previousCurrentPrice)) {
      src_pubsub["a" /* pubsub */].publish(CURRENT_PRICE, currentPrice);
    }

    this.mutableRefreshing[assetID] = false;
  }

  static async getCurrentPrice(sym, assetID, monitor, rootLoader) {
    let tries = 1; // tslint:disable-next-line no-loop-statement

    while (tries >= 0) {
      try {
        // tslint:disable-next-line prefer-immediate-return
        const finalResult = await monitor.captureLog(async () => {
          const response = await external_cross_fetch_default()(`https://api.coinmarketcap.com/v1/ticker/${assetID}/`);
          const [result] = await response.json();
          const priceUSD = tryParseNumber({
            value: result.price_usd
          });
          let marketCapUSD = result.market_cap_usd;

          if (marketCapUSD == undefined && assetID === GAS) {
            const asset = await Asset["Asset"].query(rootLoader.db).context(rootLoader.makeAllPowerfulQueryContext(monitor)).where('id', constants["a" /* GAS_ASSET_HASH */]).first();

            if (asset !== undefined) {
              marketCapUSD = new external_bignumber_js_default.a(asset.issued).times(priceUSD).integerValue(external_bignumber_js_default.a.ROUND_FLOOR).toString();
            }
          }

          return {
            id: `${assetID}:${result.last_updated}`,
            sym,
            price_usd: Number(new external_bignumber_js_default.a(priceUSD).toFixed(2)),
            percent_change_24h: tryParseNumber({
              value: result.percent_change_24h
            }),
            volume_usd_24h: tryParseNumber({
              value: result['24h_volume_usd']
            }),
            market_cap_usd: marketCapUSD,
            last_updated: tryParseNumber({
              value: result.last_updated
            })
          };
        }, {
          name: 'coinmarketcap_fetch',
          level: 'verbose',
          error: {}
        }); // tslint:disable-next-line no-var-before-return

        return finalResult;
      } catch (_a) {
        tries -= 1;
      }
    }

    return this.mutableCurrentPrices[assetID];
  } // tslint:disable-next-line no-any


  static initialize$(options$) {
    return Object(external_rxjs_["combineLatest"])(options$.pipe(Object(operators_["map"])(({
      rootLoader,
      monitor
    }) => ({
      rootLoader,
      monitor
    })), Object(operators_["distinctUntilChanged"])((a, b) => a.monitor === b.monitor), Object(operators_["map"])(({
      rootLoader,
      monitor
    }) => ({
      rootLoader,
      monitor: monitor.at('current_price_root_call')
    }))), Object(external_rxjs_["timer"])(0, THREE_MINUTES_IN_SECONDS * 1000)).pipe(Object(operators_["switchMap"])(async ([{
      rootLoader,
      monitor
    }]) => {
      await Promise.all([this.refreshCurrentPrice('NEO', monitor, rootLoader), this.refreshCurrentPrice('GAS', monitor, rootLoader)]);
    }));
  }

}
CurrentPriceRootCall_CurrentPriceRootCall.fieldName = 'current_price';
CurrentPriceRootCall_CurrentPriceRootCall.typeName = 'CurrentPrice';
CurrentPriceRootCall_CurrentPriceRootCall.args = {
  sym: 'String!'
}; // tslint:disable-next-line no-any readonly-keyword

CurrentPriceRootCall_CurrentPriceRootCall.mutableCurrentPrices = {}; // tslint:disable-next-line readonly-keyword

CurrentPriceRootCall_CurrentPriceRootCall.mutableRefreshing = {};
// EXTERNAL MODULE: external "cryptocompare"
var external_cryptocompare_ = __webpack_require__(233);
var external_cryptocompare_default = /*#__PURE__*/__webpack_require__.n(external_cryptocompare_);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/PricesRootCall.ts
 // @ts-ignore








const FIVE_MINUTES_IN_SECONDS = 5 * 60;
class PricesRootCall_PricesRootCall extends RootCall_RootCall {
  static makeResolver() {
    const resolve = async (_obj, {
      from,
      to
    }, _context, _info) => {
      const key = PricesRootCall_PricesRootCall.getKey(from, to);

      if (PricesRootCall_PricesRootCall.mutableDataPoints[key] === undefined) {
        PricesRootCall_PricesRootCall.mutableDataPoints[key] = [];
      }

      return PricesRootCall_PricesRootCall.mutableDataPoints[key];
    };

    return {
      resolve,
      live: liveExecuteField((rootValue, args, context, info) => Object(external_rxjs_["concat"])(resolve(rootValue, args, context, info), src_pubsub["a" /* pubsub */].observable$(PRICES).pipe(Object(operators_["filter"])(payload => payload.from === args.from && payload.to === args.to), Object(operators_["map"])(payload => payload.prices))))
    };
  }

  static async refreshDataPoints(from, to, monitor) {
    const key = this.getKey(from, to);

    if (this.mutableRefreshing[key]) {
      return;
    }

    this.mutableRefreshing[key] = true;

    if (this.mutableDataPoints[key] == undefined) {
      this.mutableDataPoints[key] = [];
    }

    const previousDataPoints = this.mutableDataPoints[key];
    this.mutableDataPoints[key] = await this.getDataPoints(from, to, monitor);
    const mutableDataPoints = this.mutableDataPoints[key];

    if (mutableDataPoints.length > 0 && !external_lodash_default.a.isEqual(mutableDataPoints, previousDataPoints)) {
      src_pubsub["a" /* pubsub */].publish(PRICES, {
        prices: mutableDataPoints,
        from,
        to
      });
    }

    this.mutableRefreshing[key] = false;
  }

  static async getDataPoints(from, to, monitor) {
    const key = this.getKey(from, to);

    if (from === 'GAS' || to === 'GAS') {
      return [];
    }

    let tries = 1; // tslint:disable-next-line no-loop-statement

    while (tries >= 0) {
      try {
        // tslint:disable-next-line prefer-immediate-return
        const finalResult = await monitor.captureLog(async () => {
          const result = await external_cryptocompare_default.a.histoHour(from, to);
          return result.map(point => ({
            id: `${key}:${point.time}`,
            type: key,
            time: point.time,
            value: point.close
          }));
        }, {
          name: 'cryptocompare_fetch',
          level: 'verbose',
          error: {}
        }); // tslint:disable-next-line no-var-before-return

        return finalResult;
      } catch (_a) {
        tries -= 1;
      }
    }

    return this.mutableDataPoints[key];
  }

  static getKey(from, to) {
    return `${from}to${to}`;
  }

  static initialize$(options$) {
    return Object(external_rxjs_["combineLatest"])(options$.pipe(Object(operators_["map"])(({
      monitor
    }) => monitor), Object(operators_["distinctUntilChanged"])(), Object(operators_["map"])(monitor => monitor.at('prices_root_call'))), Object(external_rxjs_["timer"])(0, FIVE_MINUTES_IN_SECONDS * 1000)).pipe(Object(operators_["switchMap"])(async ([monitor]) => {
      await Promise.all([this.refreshDataPoints('NEO', 'BTC', monitor), this.refreshDataPoints('NEO', 'USD', monitor)]);
    }));
  }

}
PricesRootCall_PricesRootCall.fieldName = 'prices';
PricesRootCall_PricesRootCall.typeName = '[DataPoint!]!';
PricesRootCall_PricesRootCall.args = {
  from: 'String!',
  to: 'String!'
}; // tslint:disable-next-line readonly-keyword

PricesRootCall_PricesRootCall.mutableDataPoints = {}; // tslint:disable-next-line readonly-keyword

PricesRootCall_PricesRootCall.mutableRefreshing = {};

PricesRootCall_PricesRootCall.resolver = async (_obj, {
  from,
  to
}, _context, _info) => {
  const key = PricesRootCall_PricesRootCall.getKey(from, to);

  if (PricesRootCall_PricesRootCall.mutableDataPoints[key] == undefined) {
    PricesRootCall_PricesRootCall.mutableDataPoints[key] = [];
  }

  return PricesRootCall_PricesRootCall.mutableDataPoints[key];
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/TransactionRootCall.ts

class TransactionRootCall_TransactionRootCall extends BlockchainRootCall_BlockchainRootCall {}
TransactionRootCall_TransactionRootCall.fieldName = 'transaction';
TransactionRootCall_TransactionRootCall.typeName = 'Transaction';
TransactionRootCall_TransactionRootCall.args = {
  hash: 'String!'
}; // tslint:disable no-any

TransactionRootCall_TransactionRootCall.resolver = async (_obj, {
  hash
}, context, info) => // tslint:enable no-any
context.rootLoader.transactionHashLoader.load({
  id: hash,
  monitor: context.getMonitor(info)
});
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/roots.ts








const roots_roots = () => [AddressRootCall_AddressRootCall, AppOptionsRootCall_AppOptionsRootCall, AssetRootCall_AssetRootCall, BlockRootCall_BlockRootCall, ContractRootCall_ContractRootCall, CurrentPriceRootCall_CurrentPriceRootCall, PricesRootCall_PricesRootCall, TransactionRootCall_TransactionRootCall];
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/roots/start$.ts

 // tslint:disable-next-line no-any export-name

const start$ = options$ => Object(external_rxjs_["merge"])(...roots_roots().map(rootCall => rootCall.initialize$(options$)));
// EXTERNAL MODULE: external "ua-parser-js"
var external_ua_parser_js_ = __webpack_require__(303);
var external_ua_parser_js_default = /*#__PURE__*/__webpack_require__.n(external_ua_parser_js_);

// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/getUA.ts

const getUA = uaIn => {
  const nonNullUA = uaIn === undefined ? '' : uaIn;
  const ua = Array.isArray(nonNullUA) ? nonNullUA[0] : nonNullUA;
  let userAgent = {
    ua,
    browser: {
      name: '',
      version: '',
      major: ''
    },
    device: {
      model: '',
      type: '',
      vendor: ''
    },
    engine: {
      name: '',
      version: ''
    },
    os: {
      name: '',
      version: ''
    },
    cpu: {
      architecture: ''
    }
  };
  let error;

  try {
    userAgent = new external_ua_parser_js_default.a(ua).getResult();
  } catch (err) {
    error = err;
  }

  if (error != undefined) {
    return {
      type: 'error',
      userAgent,
      error
    };
  }

  return {
    type: 'valid',
    userAgent,
    error: undefined
  };
};
// CONCATENATED MODULE: ./packages/neotracker-shared-graphql/src/constants.ts

const GRAPHQL_WS = 'graphql-ws';
const SERVER_MESSAGE_TYPES = ['GQL_INVALID_MESSAGE_ERROR', 'GQL_SEND_ERROR', 'GQL_SOCKET_ERROR', 'GQL_CONNECTION_ACK', 'GQL_QUERY_MAP_ERROR', 'GQL_SUBSCRIBE_ERROR', 'GQL_DATA', 'GQL_DATA_ERROR'];
const parseAndValidateServerMessage = messageJSON => {
  const message = JSON.parse(messageJSON);

  if (typeof message !== 'object' || typeof message.type !== 'string') {
    throw new Error('Invalid message format.');
  }

  if (!SERVER_MESSAGE_TYPES.includes(message.type)) {
    throw new Error(`Unknown message type: ${message.type}`);
  }

  let valid;
  const type = message.type;

  switch (type) {
    case 'GQL_INVALID_MESSAGE_ERROR':
      valid = typeof message.message === 'string';
      break;

    case 'GQL_SEND_ERROR':
      valid = typeof message.message === 'string';
      break;

    case 'GQL_SOCKET_ERROR':
      valid = typeof message.message === 'string';
      break;

    case 'GQL_CONNECTION_ACK':
      valid = true;
      break;

    case 'GQL_QUERY_MAP_ERROR':
      valid = typeof message.message === 'string' && typeof message.id === 'string';
      break;

    case 'GQL_SUBSCRIBE_ERROR':
      valid = typeof message.id === 'string' && typeof message.message === 'string';
      break;

    case 'GQL_DATA':
      valid = typeof message.id === 'string' && typeof message.value === 'object' && (message.value.data == undefined || typeof message.value.data === 'object') && (message.value.errors == undefined || Array.isArray(message.value.errors) && message.value.errors.every( // tslint:disable-next-line no-any
      error => typeof error === 'object' && typeof error.message === 'string'));
      break;

    case 'GQL_DATA_ERROR':
      valid = typeof message.id === 'string' && typeof message.message === 'string';
      break;

    default:
      utils["a" /* utils */].assertNever(type);
      valid = false;
  }

  if (!valid) {
    throw new Error('Invalid message format.');
  }

  return message;
};
const CLIENT_MESSAGE_TYPES = ['GQL_CONNECTION_INIT', 'GQL_CONNECTION_TERMINATE', 'GQL_START', 'GQL_STOP'];
const parseAndValidateClientMessage = messageJSON => {
  const message = JSON.parse(messageJSON);

  if (typeof message !== 'object' || typeof message.type !== 'string') {
    throw new Error('Invalid message format.');
  }

  if (!CLIENT_MESSAGE_TYPES.includes(message.type)) {
    throw new Error(`Unknown message type: ${message.type}`);
  }

  let valid;
  const type = message.type;

  switch (type) {
    case 'GQL_CONNECTION_INIT':
      valid = true;
      break;

    case 'GQL_CONNECTION_TERMINATE':
      valid = true;
      break;

    case 'GQL_START':
      valid = typeof message.id === 'string' && typeof message.query === 'object' && typeof message.query.id === 'string' && typeof message.query.variables === 'object';
      break;

    case 'GQL_STOP':
      valid = typeof message.id === 'string';
      break;

    default:
      utils["a" /* utils */].assertNever(type);
      valid = false;
  }

  if (!valid) {
    throw new Error(`Invalid message format for type ${type}.`);
  }

  return message;
};
// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/ua.ts


const getVersionPrecision = version => version.split('.').length;

const getChunk = (version, precision) => {
  const delta = precision - getVersionPrecision(version); // 2) "9" -> "9.0" (for precision = 2)

  const newVersion = version + new Array(delta + 1).join('.0'); // 3) "9.0" -> ["000000000"", "000000009"]

  return newVersion.split('.').map(chunk => new Array(20 - chunk.length).join('0') + chunk).reverse();
};

const compareVersions = (a, b) => {
  // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
  let precision = Math.max(getVersionPrecision(a), getVersionPrecision(b));
  const chunkA = getChunk(a, precision);
  const chunkB = getChunk(b, precision); // iterate in reverse order by reversed chunks array
  // eslint-disable-next-line

  while (--precision >= 0) {
    // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
    if (chunkA[precision] > chunkB[precision]) {
      return 1;
    } else if (chunkA[precision] < chunkB[precision]) {
      return -1;
    }
  }

  return 0;
};

const checkVersion = (versionA, comparison, versionB) => {
  const result = compareVersions(versionA, versionB);

  switch (comparison) {
    case '>':
      return result > 0;

    case '<':
      return result < 0;

    case '>=':
      return result >= 0;

    case '<=':
      return result <= 0;

    case '=':
      return result === 0;
    // Should never hit this case

    default:
      return false;
  }
};

const convertLabels = ua => ({
  [src_labels["a" /* labels */].UA]: ua.ua,
  [src_labels["a" /* labels */].UA_BROWSER_NAME]: ua.browser.name,
  [src_labels["a" /* labels */].UA_BROWSER_VERSION]: ua.browser.version,
  [src_labels["a" /* labels */].UA_DEVICE_MODEL]: ua.device.model,
  [src_labels["a" /* labels */].UA_DEVICE_TYPE]: ua.device.type,
  [src_labels["a" /* labels */].UA_DEVICE_VENDOR]: ua.device.vendor,
  [src_labels["a" /* labels */].UA_ENGINE_NAME]: ua.engine.name,
  [src_labels["a" /* labels */].UA_ENGINE_VERSION]: ua.engine.version,
  [src_labels["a" /* labels */].UA_OS_NAME]: ua.os.name,
  [src_labels["a" /* labels */].UA_OS_VERSION]: ua.os.version,
  [src_labels["a" /* labels */].UA_CPU_ARCHITECTURE]: ua.cpu.architecture
});

const ua_ua = {
  checkVersion,
  convertLabels
};
// EXTERNAL MODULE: external "uuid/v4"
var v4_ = __webpack_require__(115);
var v4_default = /*#__PURE__*/__webpack_require__.n(v4_);

// EXTERNAL MODULE: external "ws"
var external_ws_ = __webpack_require__(124);

// EXTERNAL MODULE: external "graphql/error/locatedError"
var locatedError_ = __webpack_require__(308);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/getLiveQuery.ts

 // @ts-ignore


 // tslint:disable-next-line no-any

const isObservable = value => value != undefined && value.subscribe != undefined;

const getFieldLiveQuery = async ({
  exeContext,
  schema,
  type,
  responseName,
  fieldNodes,
  createObservable,
  rootValue
}) => new Promise((resolve, reject) => {
  invariant_default()(fieldNodes.length === 1, 'Expected a single field node.');
  const fieldNode = fieldNodes[0];
  const name = fieldNode.name.value;
  const fieldDef = Object(execute_["getFieldDef"])(schema, type, name);

  if (fieldDef == undefined) {
    throw new Error('This live query is not defined by the schema.');
  } // Call the `subscribe()` resolver or the default resolver to produce an
  // AsyncIterable yielding raw payloads.


  const resolveFn = // tslint:disable-next-line no-any
  fieldDef.live === undefined ? fieldDef.resolve === undefined ? exeContext.fieldResolver : fieldDef.resolve : // tslint:disable-next-line no-any
  fieldDef.live;
  const path = Object(execute_["addPath"])(undefined, responseName);
  const info = Object(execute_["buildResolveInfo"])(exeContext, fieldDef, fieldNodes, type, path); // resolveFieldValueOrError implements the "ResolveFieldEventStream"
  // algorithm from GraphQL specification. It differs from
  // "ResolveFieldValue" due to providing a different `resolveFn`.

  Promise.resolve(Object(execute_["resolveFieldValueOrError"])(exeContext, fieldDef, fieldNodes, resolveFn, rootValue, info)) // tslint:disable-next-line no-any
  .then(subscription => {
    // Reject with a located GraphQLError if subscription source fails
    // to resolve.
    if (subscription instanceof Error) {
      const error = Object(locatedError_["locatedError"])(subscription, fieldNodes, Object(execute_["responsePathAsArray"])(path));
      reject(error);
    }

    if (!isObservable(subscription)) {
      if (createObservable !== undefined) {
        const result = Object(execute_["execute"])(schema, createObservable.document, rootValue, createObservable.contextValue, createObservable.variableValues, createObservable.operationName, resolveFn);
        resolve(Object(external_rxjs_["of"])(result));
      } else {
        reject(new Error(`Subscription must return Async Iterable. Received: ` + `${String(subscription)}`));
      }
    }

    resolve(subscription);
  }).catch(reject);
}); // Adapted from graphql-js createSourceEventStream


const getLiveQuery = async ({
  schema,
  document,
  rootValue,
  contextValue,
  variableValues,
  operationName,
  fieldResolver,
  createObservable = false
}) => {
  // If arguments are missing or incorrectly typed, this is an internal
  // developer mistake which should throw an early error.
  Object(execute_["assertValidExecutionArguments"])(schema, document, variableValues);
  const exeContext = Object(execute_["buildExecutionContext"])(schema, document, rootValue, contextValue, variableValues, operationName, fieldResolver);

  if (Array.isArray(exeContext)) {
    throw exeContext[0];
  }

  const executionContext = exeContext;
  const type = Object(execute_["getOperationRootType"])(schema, executionContext.operation);
  const fields = Object(execute_["collectFields"])(executionContext, type, executionContext.operation.selectionSet, // tslint:disable-next-line:no-null-keyword
  Object.create(null), // tslint:disable-next-line:no-null-keyword
  Object.create(null));
  const responseNames = Object.keys(fields);
  const executeArgs = {
    document,
    contextValue,
    variableValues,
    operationName
  };
  return Promise.all(responseNames.map(async responseName => {
    const fieldLiveQuery$ = await getFieldLiveQuery({
      exeContext: executionContext,
      schema,
      type,
      responseName,
      fieldNodes: fields[responseName],
      createObservable: createObservable ? executeArgs : undefined,
      rootValue
    });
    return [responseName, fieldLiveQuery$];
  }));
};
// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/live/LiveServer.ts









const graphqlQuerylabelNames = [src_labels["a" /* labels */].GRAPHQL_QUERY];
const GRAPHQL_FIRST_RESPONSE_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'graphql_server_first_response_duration_seconds',
  labelNames: graphqlQuerylabelNames
});
const GRAPHQL_FIRST_RESPONSE_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'graphql_server_first_response_failures_total',
  labelNames: graphqlQuerylabelNames
});
const WEBSOCKET_SERVER_SOCKETS = monitor_["metrics"].createGauge({
  name: 'websocket_server_sockets'
});
class LiveServer_LiveServer {
  constructor({
    schema,
    rootLoader,
    rootLoader$,
    monitor,
    wsServer,
    queryMap
  }) {
    this.handleConnection = (socket, request) => {
      const monitor = this.monitor.forMessage(request).withLabels(ua_ua.convertLabels(getUA(request.headers['user-agent']).userAgent));
      monitor.log({
        name: 'websocket_server_connection',
        level: 'verbose'
      });
      const mutableOperations = {};
      const socketID = v4_default()();

      const unsubscribe = id => {
        const op = mutableOperations[id];

        if (op !== undefined) {
          op.subscriptions.forEach(subscription => {
            subscription.unsubscribe();
          }); // tslint:disable-next-line no-dynamic-delete

          delete mutableOperations[id];
        }
      };

      const unsubscribeAll = () => {
        Object.keys(mutableOperations).forEach(unsubscribe);
      };

      let tryClosed = false;
      let closed = false;

      const closeSocket = (exit, reason) => {
        if (!tryClosed && !closed) {
          monitor.withLabels({
            [src_labels["a" /* labels */].WEBSOCKET_CLOSE_CODE]: exit,
            [src_labels["a" /* labels */].WEBSOCKET_CLOSE_REASON]: reason
          }).captureLog(() => {
            socket.close(exit, reason);
            tryClosed = true;
          }, {
            name: 'websocket_server_close_socket',
            level: 'verbose',
            error: {}
          });
        }
      };

      const sendMessage = (message, isRetry) => {
        if (socket.readyState === external_ws_["OPEN"]) {
          try {
            monitor.withLabels({
              [src_labels["a" /* labels */].WEBSOCKET_MESSAGE_TYPE]: message.type
            }).captureLog(() => socket.send(JSON.stringify(message)), {
              name: 'websocket_server_socket_send',
              level: 'verbose',
              error: {}
            });
          } catch (_a) {
            if (!isRetry) {
              sendMessage(message, true);
            }
          }
        }
      };

      const onSocketError = error => {
        if (error.code !== 'EPIPE' && error.code !== 'ECONNRESET') {
          sendMessage({
            type: 'GQL_SOCKET_ERROR',
            message: sanitizeError(error).message
          });
          monitor.logError({
            name: 'websocket_server_socket_error',
            error
          });
        }

        closeSocket(1011);
      };

      const onSocketClosed = (exit, reason) => {
        monitor.withLabels({
          [src_labels["a" /* labels */].WEBSOCKET_CLOSE_CODE]: exit,
          [src_labels["a" /* labels */].WEBSOCKET_CLOSE_REASON]: reason
        }).log({
          name: 'websocket_server_socket_closed',
          level: 'verbose'
        });
        unsubscribeAll();
        closed = true;

        if (this.mutableSockets[socketID] !== undefined) {
          // tslint:disable-next-line no-dynamic-delete
          delete this.mutableSockets[socketID];
          WEBSOCKET_SERVER_SOCKETS.dec();
        }
      };

      const handleStart = async message => {
        const startMonitor = monitor.withLabels({
          [src_labels["a" /* labels */].GRAPHQL_QUERY]: message.query.id
        }).withData({
          [src_labels["a" /* labels */].GRAPHQL_VARIABLES]: JSON.stringify(message.query.variables)
        });
        let span = startMonitor.startSpan({
          name: 'graphql_server_first_response',
          // references: [
          //   monitor.childOf(monitor.extract(monitor.formats.HTTP, message.span)),
          // ],
          metric: {
            total: GRAPHQL_FIRST_RESPONSE_DURATION_SECONDS,
            error: GRAPHQL_FIRST_RESPONSE_FAILURES_TOTAL
          },
          trace: true
        });

        if (mutableOperations[message.id] !== undefined) {
          unsubscribe(message.id);
        }

        const {
          mutableRootLoader
        } = this;
        let query;

        try {
          query = await span.captureLog(async () => this.queryMap.get(message.query.id), {
            name: 'graphql_get_query',
            level: 'verbose',
            error: {}
          });
        } catch (error) {
          sendMessage({
            type: 'GQL_QUERY_MAP_ERROR',
            message: sanitizeError(error).message,
            id: message.id
          });
          return;
        }

        const graphQLContext = makeContext(mutableRootLoader, startMonitor, query, message.query.id, () => span);
        let liveQueries;

        try {
          liveQueries = await span.captureLog(async () => getLiveQuery({
            schema: this.schema,
            document: query,
            contextValue: graphQLContext,
            variableValues: message.query.variables
          }), {
            name: 'graphql_get_live_query',
            level: 'verbose',
            error: {}
          });
        } catch (error) {
          sendMessage({
            type: 'GQL_SUBSCRIBE_ERROR',
            message: sanitizeError(error).message,
            id: message.id
          });
          return;
        }

        const subscriptions = liveQueries.map(([name, liveQuery]) => {
          const queryMonitor = startMonitor.withLabels({
            [src_labels["a" /* labels */].GRAPHQL_LIVE_NAME]: name
          });
          return liveQuery.subscribe({
            next: value => {
              queryMonitor.log({
                name: 'graphql_subscription_result',
                level: 'verbose',
                error: {}
              });

              if (span !== undefined) {
                span.end();
                span = undefined;
              }

              sendMessage({
                type: 'GQL_DATA',
                value,
                id: message.id
              });
            },
            complete: () => {
              queryMonitor.log({
                name: 'graphql_subscription_complete',
                level: 'verbose'
              });

              if (span !== undefined) {
                span.end();
                span = undefined;
              }
            },
            error: error => {
              queryMonitor.log({
                name: 'graphql_subscription_result',
                level: 'verbose',
                error: {
                  error
                }
              });

              if (span !== undefined) {
                span.end(true);
                span = undefined;
              }

              sendMessage({
                type: 'GQL_DATA_ERROR',
                message: sanitizeError(error).message,
                id: message.id
              }); // tslint:disable-next-line no-floating-promises

              handleStart(message);
            }
          });
        });
        mutableOperations[message.id] = {
          subscriptions,
          restart: async () => {
            await handleStart(message);
          }
        };
      };

      const handleMessage = async message => {
        switch (message.type) {
          case 'GQL_CONNECTION_INIT':
            sendMessage({
              type: 'GQL_CONNECTION_ACK'
            });
            break;

          case 'GQL_CONNECTION_TERMINATE':
            closeSocket();
            break;

          case 'GQL_START':
            await handleStart(message);
            break;

          case 'GQL_STOP':
            unsubscribe(message.id);
            break;

          default:
            utils["a" /* utils */].assertNever(message);
        }
      }; // tslint:disable-next-line no-any


      const onMessage = messageJSON => {
        let message;

        try {
          message = parseAndValidateClientMessage(messageJSON);
        } catch (error) {
          monitor.withData({
            [src_labels["a" /* labels */].WEBSOCKET_MESSAGEJSON]: messageJSON
          }).logError({
            name: 'websocket_server_client_message_parse_error',
            error
          });
          sendMessage({
            type: 'GQL_INVALID_MESSAGE_ERROR',
            message: sanitizeError(error).message
          });
          return;
        }

        monitor.withLabels({
          [src_labels["a" /* labels */].WEBSOCKET_MESSAGE_TYPE]: message.type
        }).log({
          name: 'websocket_server_message_received',
          level: 'verbose'
        }); // tslint:disable-next-line no-floating-promises

        handleMessage(message);
      };

      const restartAll = async () => {
        await Promise.all(Object.values(mutableOperations).map(async config => {
          if (config !== undefined) {
            await config.restart();
          }
        }));
      };

      this.mutableSockets[socketID] = {
        closeSocket,
        restart: restartAll
      };
      WEBSOCKET_SERVER_SOCKETS.inc();
      socket.on('error', onSocketError);
      socket.on('close', onSocketClosed);
      socket.on('message', onMessage);
    };

    this.schema = schema;
    this.mutableRootLoader = rootLoader;
    this.rootLoader$ = rootLoader$;
    this.monitor = monitor.at('live_server');
    this.wsServer = wsServer;
    this.mutableSockets = {};
    this.queryMap = queryMap;
  }

  static async create({
    schema,
    rootLoader$,
    monitor: monitorIn,
    socketOptions = {},
    queryMap
  }) {
    const monitor = monitorIn.at('live_server').withLabels({
      [monitorIn.labels.SPAN_KIND]: 'server',
      [monitorIn.labels.PEER_SERVICE]: 'graphql'
    });

    const handleProtocols = protocols => {
      if (protocols.indexOf(GRAPHQL_WS) === -1) {
        monitor.withData({
          [src_labels["a" /* labels */].WEBSOCKET_PROTOCOLS]: JSON.stringify(protocols)
        }).logError({
          name: 'websocket_server_bad_protocol_error',
          error: new Error('Bad protocol')
        });
        return false;
      }

      return GRAPHQL_WS;
    };

    const wsServer = new external_ws_["Server"](Object.assign({
      handleProtocols
    }, socketOptions));
    const rootLoader = await rootLoader$.pipe(Object(operators_["take"])(1)).toPromise();
    return new LiveServer_LiveServer({
      schema,
      rootLoader,
      rootLoader$,
      monitor,
      wsServer,
      queryMap
    });
  }

  async start() {
    this.mutableSubscription = this.rootLoader$.pipe(mergeScanLatest(async (_prev, rootLoader) => {
      if (this.mutableRootLoader !== rootLoader) {
        this.mutableRootLoader = rootLoader;
        await this.restartAll();
      }

      return undefined;
    }, undefined)).subscribe();
    this.wsServer.on('connection', this.handleConnection);
  }

  async stop() {
    if (this.mutableSubscription !== undefined) {
      this.mutableSubscription.unsubscribe();
      this.mutableSubscription = undefined;
    }

    this.wsServer.removeListener('connection', this.handleConnection);
    await new Promise(resolve => this.wsServer.close(() => {
      resolve();
    }));
  }

  async restartAll() {
    await Promise.all(Object.values(this.mutableSockets).map(async config => {
      if (config !== undefined) {
        await config.restart();
      }
    }));
  }

}
// EXTERNAL MODULE: external "app-root-dir"
var external_app_root_dir_ = __webpack_require__(226);

// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/resolveRootPath.ts


const resolveRootPath = value => external_path_["isAbsolute"](value) ? value : external_path_["resolve"](external_app_root_dir_["get"](), value);
// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/handleServer.ts
async function handleServer({
  monitor,
  createServer,
  options,
  app,
  keepAliveTimeoutMS,
  prevResult = {
    app: undefined,
    listener: undefined,
    server: undefined
  }
}) {
  const {
    app: prevApp,
    listener: prevListener,
    server: prevServer
  } = prevResult;
  let server = prevServer;
  let listener = prevListener;

  if (options !== undefined) {
    const startServer = server === undefined;
    const safeServer = server === undefined ? createServer(options) : server;
    server = safeServer;

    if (app !== prevApp || prevListener === undefined) {
      if (prevListener !== undefined) {
        server.removeListener('request', prevListener);
      }

      listener = app.callback();
      server.on('request', listener);
    }

    if (keepAliveTimeoutMS !== undefined) {
      // tslint:disable-next-line no-object-mutation
      server.keepAliveTimeout = keepAliveTimeoutMS;
    }

    if (startServer) {
      const {
        host,
        port
      } = options;
      await new Promise(resolve => safeServer.listen(port, host, 511, resolve));
      monitor.withData({
        [monitor.labels.PEER_ADDRESS]: `${host}:${port}`,
        [monitor.labels.PEER_PORT]: port
      }).log({
        name: 'server_listening',
        message: `Server listening on ${host}:${port}`
      });
    }
  }

  return {
    server,
    listener,
    app
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/finalizeServer.ts
const finalizeServer = async result => {
  if (result !== undefined && result.server !== undefined) {
    const {
      server
    } = result;
    await new Promise(resolve => server.close(resolve));
  }
};
// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/errors/HTTPError.ts

class HTTPError_HTTPError extends CodedError["a" /* CodedError */] {
  constructor(statusCode, errorCode) {
    super(errorCode);
    this.expose = true;
    this.status = statusCode;
    this.statusCode = statusCode;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-utils-koa/src/middleware/common.ts

const common_getMonitor = ctx => {
  const {
    monitor
  } = ctx.state;

  if (monitor == undefined) {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return monitor;
};
const simpleMiddleware = (name, middleware) => ({
  type: 'middleware',
  name,
  middleware
});
// CONCATENATED MODULE: ./packages/neotracker-server-utils-koa/src/middleware/context.ts





const RATE_LIMIT_ERROR_CODE = 429;
const context_labelNames = [monitor_["KnownLabel"].HTTP_PATH, monitor_["KnownLabel"].HTTP_STATUS_CODE, monitor_["KnownLabel"].HTTP_METHOD];
const HTTP_SERVER_REQUEST_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'http_server_request_duration_seconds',
  labelNames: context_labelNames
});
const HTTP_SERVER_REQUEST_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'http_server_request_failures_total',
  labelNames: context_labelNames
}); // tslint:disable-next-line no-any

const defaultHandleError = (ctx, error) => {
  if (error.status === RATE_LIMIT_ERROR_CODE) {
    throw error;
  }

  ctx.throw(error.status != undefined ? error.status : 500, sanitizeError(error).clientMessage);
};

const context_context = ({
  monitor: monitorIn,
  handleError = defaultHandleError
}) => simpleMiddleware('context', async (ctx, next) => {
  ctx.state.nonce = v4_default()(); // @ts-ignore

  ctx.req.nonce = ctx.state.nonce;
  const {
    userAgent,
    type,
    error: userAgentError
  } = getUA(ctx.request.headers['user-agent']);
  ctx.state.userAgent = userAgent;
  const monitor = monitorIn.forContext(ctx).withLabels(ua_ua.convertLabels(userAgent));

  if (type === 'error' && userAgentError != undefined) {
    monitor.logError({
      name: 'server_user_agent_parse_error',
      error: userAgentError
    });
  }

  try {
    await monitor.forContext(ctx).captureSpanLog(async span => {
      try {
        ctx.state.monitor = span;
        await next();
      } finally {
        span.setLabels({
          [monitor.labels.HTTP_STATUS_CODE]: ctx.status,
          [monitor.labels.HTTP_PATH]: 'unknown'
        }); // @ts-ignore

        const {
          router,
          routerName
        } = ctx;

        if (router != undefined && routerName != undefined) {
          const layer = router.route(routerName);

          if (layer) {
            span.setLabels({
              [monitor.labels.HTTP_PATH]: layer.path
            });
          }
        }
      }
    }, {
      name: 'http_server_request',
      level: {
        log: 'verbose',
        span: 'info'
      },
      metric: {
        total: HTTP_SERVER_REQUEST_DURATION_SECONDS,
        error: HTTP_SERVER_REQUEST_FAILURES_TOTAL
      },
      trace: true,
      error: {}
    });
  } catch (error) {
    handleError(ctx, error);
  }
});
const context_onError = ({
  monitor: monitorIn
}) => (error, ctx) => {
  let monitor = monitorIn;

  if (ctx !== undefined) {
    try {
      monitor = common_getMonitor(ctx);
    } catch (_a) {// Ignore errors
    }
  }

  monitor.logError({
    name: 'http_server_request_uncaught_error',
    message: 'Unexpected uncaught request error.',
    error
  });
};
// EXTERNAL MODULE: external "koa-router"
var external_koa_router_ = __webpack_require__(304);
var external_koa_router_default = /*#__PURE__*/__webpack_require__.n(external_koa_router_);

// CONCATENATED MODULE: ./packages/neotracker-server-utils-koa/src/routeMiddleware.ts


const routeMiddleware = ({
  app,
  middlewares,
  cors
}) => {
  const router = new external_koa_router_default.a();
  middlewares.forEach(middleware => {
    if (middleware.type === 'route') {
      switch (middleware.method) {
        case 'get':
          router.get(middleware.name, middleware.path, middleware.middleware);
          break;

        case 'post':
          router.post(middleware.name, middleware.path, middleware.middleware);
          break;

        default:
          utils["a" /* utils */].assertNever(middleware.method);
          throw new Error(`Unknown method ${middleware.method}`);
      }
    } else {
      router.use(middleware.middleware);
    }
  });
  app.use(router.routes());

  if (cors !== undefined) {
    app.use(cors.middleware);
  }

  app.use(router.allowedMethods());
};
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/routes.js
const ROOT = '/';
const HOME = '/';
const HEALTH_CHECK = '/healthcheck';
const GRAPHQL = '/graphql';
const PUBLIC = '/public';
const CLIENT = '/client';
const makePublic = path => `${PUBLIC}${path}`;
const makeRoot = path => path;
const ERROR = '/error';
const RPC = '/rpc';
const REPORT = '/report'; // Wallet

const WALLET_HOME = '/wallet';
const routes_isWallet = path => path.startsWith('/wallet');
const WALLET_NEW_WALLET = '/wallet/new-wallet';
const WALLET_OPEN_WALLET = '/wallet/open-wallet';
const WALLET_CREATE_KEYSTORE = '/wallet/create-keystore';
const WALLET_FAQ = '/wallet/faq'; // Transaction

const TRANSACTION_HASH_ARGUMENT = 'transactionHash';
const TRANSACTION_HASH_PARAM = `:${TRANSACTION_HASH_ARGUMENT}`;
const makeTransaction = (hash = TRANSACTION_HASH_PARAM) => `/tx/${hash}`;
const TRANSACTION_SEARCH_PAGE_ARGUMENT = 'page';
const TRANSACTION_SEARCH_PAGE_PARAM = `:${TRANSACTION_SEARCH_PAGE_ARGUMENT}`;
const makeTransactionSearch = (index = TRANSACTION_SEARCH_PAGE_PARAM) => `/browse/tx/${index}`;
const isTransaction = path => path.startsWith('/tx/') || path.startsWith('/browse/tx/'); // Address

const ADDRESS_HASH_ARGUMENT = 'addressHash';
const ADDRESS_HASH_PARAM = `:${ADDRESS_HASH_ARGUMENT}`;
const makeAddress = (hash = ADDRESS_HASH_PARAM) => `/address/${hash}`;
const ADDRESS_SEARCH_PAGE_ARGUMENT = 'page';
const ADDRESS_SEARCH_PAGE_PARAM = `:${ADDRESS_SEARCH_PAGE_ARGUMENT}`;
const makeAddressSearch = (index = ADDRESS_SEARCH_PAGE_PARAM) => `/browse/address/${index}`;
const isAddress = path => path.startsWith('/address/') || path.startsWith('/browse/address/'); // Block

const BLOCK_HASH_ARGUMENT = 'blockHash';
const BLOCK_HASH_PARAM = `:${BLOCK_HASH_ARGUMENT}`;
const makeBlockHash = (hash = BLOCK_HASH_PARAM) => `/block/hash/${hash}`;
const BLOCK_INDEX_ARGUMENT = 'blockIndex';
const BLOCK_INDEX_PARAM = `:${BLOCK_INDEX_ARGUMENT}`;
const makeBlockIndex = index => `/block/height/${index == null ? BLOCK_INDEX_PARAM : index}`;
const BLOCK_SEARCH_PAGE_ARGUMENT = 'page';
const BLOCK_SEARCH_PAGE_PARAM = `:${BLOCK_SEARCH_PAGE_ARGUMENT}`;
const makeBlockSearch = (index = BLOCK_SEARCH_PAGE_PARAM) => `/browse/block/${index}`;
const isBlock = path => path.startsWith('/block/hash/') || path.startsWith('/block/height/') || path.startsWith('/browse/block/'); // Asset

const ASSET_HASH_ARGUMENT = 'assetHash';
const ASSET_HASH_PARAM = `:${ASSET_HASH_ARGUMENT}`;
const makeAsset = (hash = ASSET_HASH_PARAM) => `/asset/${hash}`;
const ASSET_SEARCH_PAGE_ARGUMENT = 'page';
const ASSET_SEARCH_PAGE_PARAM = `:${ASSET_SEARCH_PAGE_ARGUMENT}`;
const makeAssetSearch = (index = ASSET_SEARCH_PAGE_PARAM) => `/browse/asset/${index}`;
const isAsset = path => path.startsWith('/asset/') || path.startsWith('/browse/asset/'); // Contract

const CONTRACT_HASH_ARGUMENT = 'contractHash';
const CONTRACT_HASH_PARAM = `:${CONTRACT_HASH_ARGUMENT}`;
const makeContract = (hash = CONTRACT_HASH_PARAM) => `/contract/${hash}`;
const CONTRACT_SEARCH_PAGE_ARGUMENT = 'page';
const CONTRACT_SEARCH_PAGE_PARAM = `:${CONTRACT_SEARCH_PAGE_ARGUMENT}`;
const makeContractSearch = (index = CONTRACT_SEARCH_PAGE_PARAM) => `/browse/contract/${index}`;
const isContract = path => path.startsWith('/contract/') || path.startsWith('/browse/contract/');
const MAKE_SEARCH_VALUE_ARGUMENT = 'value';
const SEARCH_VALUE_PARAM = `:${MAKE_SEARCH_VALUE_ARGUMENT}`;
const makeSearch = (value = SEARCH_VALUE_PARAM) => `/search/${value}`;
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/index.js








// EXTERNAL MODULE: ./packages/neotracker-shared-web-next/src/index.ts
var neotracker_shared_web_next_src = __webpack_require__(60);

// EXTERNAL MODULE: external "http"
var external_http_ = __webpack_require__(215);
var external_http_default = /*#__PURE__*/__webpack_require__.n(external_http_);

// EXTERNAL MODULE: external "koa"
var external_koa_ = __webpack_require__(216);
var external_koa_default = /*#__PURE__*/__webpack_require__.n(external_koa_);

// EXTERNAL MODULE: external "react-loadable"
var external_react_loadable_ = __webpack_require__(61);
var external_react_loadable_default = /*#__PURE__*/__webpack_require__.n(external_react_loadable_);

// EXTERNAL MODULE: external "koa-better-body"
var external_koa_better_body_ = __webpack_require__(234);
var external_koa_better_body_default = /*#__PURE__*/__webpack_require__.n(external_koa_better_body_);

// EXTERNAL MODULE: external "koa-convert"
var external_koa_convert_ = __webpack_require__(112);
var external_koa_convert_default = /*#__PURE__*/__webpack_require__.n(external_koa_convert_);

// CONCATENATED MODULE: ./packages/neotracker-server-utils-koa/src/middleware/bodyParser.ts

 // tslint:disable-next-line no-any

const bodyParser = options => external_koa_convert_default()(external_koa_better_body_default()(options));
// EXTERNAL MODULE: external "koa-compose"
var external_koa_compose_ = __webpack_require__(42);
var external_koa_compose_default = /*#__PURE__*/__webpack_require__.n(external_koa_compose_);

// EXTERNAL MODULE: external "koa-compress"
var external_koa_compress_ = __webpack_require__(72);
var external_koa_compress_default = /*#__PURE__*/__webpack_require__.n(external_koa_compress_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/common.ts




const common_getRootLoader = ctx => {
  const {
    rootLoader
  } = ctx.state;

  if (!(rootLoader instanceof RootLoader)) {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return rootLoader;
};
const getQueryMap = ctx => {
  const {
    queryMap
  } = ctx.state;

  if (!(queryMap instanceof QueryMap_QueryMap)) {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return queryMap;
};
const getQueryDeduplicator = ctx => {
  const {
    queryDeduplicator
  } = ctx.state;

  if (!(queryDeduplicator instanceof QueryDeduplicator_QueryDeduplicator)) {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return queryDeduplicator;
};
const getNonce = ctx => {
  const {
    nonce
  } = ctx.state;

  if (typeof nonce !== 'string') {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return nonce;
};
const getUserAgent = ctx => {
  const {
    userAgent
  } = ctx.state;

  if (userAgent == undefined) {
    throw new HTTPError_HTTPError(500, HTTPError_HTTPError.PROGRAMMING_ERROR);
  }

  return userAgent;
};
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/graphql.ts



 // @ts-ignore






const graphql = ({
  next
}) => {
  // NOTE: Use getQueryDeduplicator once we transition to only next
  const path = next ? neotracker_shared_web_next_src["routes"].GRAPHQL : routes_namespaceObject.GRAPHQL;
  return {
    type: 'route',
    name: 'graphql',
    method: 'post',
    path,
    middleware: external_koa_compose_default()([external_koa_compress_default()(), bodyParser(), async ctx => {
      // tslint:disable-next-line no-any
      const {
        fields
      } = ctx.request;

      if (fields == undefined) {
        throw new HTTPError_HTTPError(400, HTTPError_HTTPError.INVALID_GRAPHQL_FIELDS_NULL);
      }

      if (!Array.isArray(fields)) {
        throw new HTTPError_HTTPError(400, HTTPError_HTTPError.INVALID_GRAPHQL_FIELDS_ARRAY);
      }

      const rootLoader = common_getRootLoader(ctx);
      const monitor = common_getMonitor(ctx);
      const queryMap = getQueryMap(ctx);
      const queryDeduplicator = createQueryDeduplicator(monitor, schema_schema(), queryMap, rootLoader);
      const result = await monitor.withLabels({
        [monitor.labels.HTTP_PATH]: path,
        [monitor.labels.RPC_TYPE]: 'graphql'
      }).captureSpanLog(async span => Promise.all( // tslint:disable-next-line no-any
      fields.map(async queryIn => span.captureSpanLog(async innerSpan => {
        const query = queryIn;

        if (query == undefined || typeof query !== 'object' || query.id == undefined || typeof query.id !== 'string' || query.variables == undefined || typeof query.variables !== 'object') {
          throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
        }

        return queryDeduplicator.execute({
          id: query.id,
          variables: query.variables,
          monitor: innerSpan
        });
      }, {
        name: 'http_server_graphql_request',
        level: {
          log: 'verbose',
          span: 'info'
        }
      }).catch(error => ({
        errors: [{
          message: sanitizeError(error).message
        }]
      })))), {
        name: 'http_server_graphql_batch_request',
        level: {
          log: 'verbose',
          span: 'info'
        }
      });
      ctx.type = 'application/json';
      ctx.body = JSON.stringify(result);
    }])
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/setRootLoader.ts


const setRootLoader = ({
  rootLoader,
  queryMap
}) => simpleMiddleware('context', async (ctx, next) => {
  ctx.state.rootLoader = rootLoader;
  ctx.state.queryMap = queryMap;
  ctx.state.queryDeduplicator = createQueryDeduplicator(common_getMonitor(ctx), schema_schema(), queryMap, rootLoader);
  await next();
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/healthCheck.ts

 // @ts-ignore



const healthCheck = ({
  options
}) => ({
  type: 'route',
  method: 'get',
  name: 'healthCheck',
  path: routes_namespaceObject.HEALTH_CHECK,
  middleware: async ctx => {
    if (options.maintenance) {
      ctx.status = 200;
    } else {
      const monitor = common_getMonitor(ctx);
      const rootLoader = common_getRootLoader(ctx);
      const currentHealthy = await isHealthyDB(rootLoader.db, monitor);
      ctx.status = currentHealthy ? 200 : 500;
    }
  }
});
// EXTERNAL MODULE: external "toobusy-js"
var external_toobusy_js_ = __webpack_require__(111);
var external_toobusy_js_default = /*#__PURE__*/__webpack_require__.n(external_toobusy_js_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/toobusy.ts



const configureTooBusy = options => {
  external_toobusy_js_default.a.maxLag(options.maxLag); // tslint:disable-next-line no-any

  external_toobusy_js_default.a.smoothingFactor(options.smoothingFactor);
};

function toobusy_toobusyMiddleware({
  options
}) {
  const userAgents = new RegExp(options.userAgents);
  const whitelistedUserAgents = new RegExp(options.whitelistedUserAgents);
  configureTooBusy(options);
  return simpleMiddleware('toobusy', async (ctx, next) => {
    const userAgent = ctx.request.headers['user-agent'];

    if (external_toobusy_js_default()() && userAgents.test(userAgent) && options.enabled && !whitelistedUserAgents.test(userAgent)) {
      ctx.status = 503;
      ctx.body = 'Server is too busy, try again later.';
    } else {
      await next();
    }
  });
}

(function (toobusyMiddleware) {
  toobusyMiddleware.shutdown = () => external_toobusy_js_default.a.shutdown();
})(toobusy_toobusyMiddleware || (toobusy_toobusyMiddleware = {}));

const toobusy = toobusy_toobusyMiddleware;
// EXTERNAL MODULE: external "koa-ratelimit-lru"
var external_koa_ratelimit_lru_ = __webpack_require__(235);
var external_koa_ratelimit_lru_default = /*#__PURE__*/__webpack_require__.n(external_koa_ratelimit_lru_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/ratelimit.ts
 // @ts-ignore


const ratelimit = ({
  options
}) => {
  const ratelimitInstance = external_koa_ratelimit_lru_default()(options.config);
  return simpleMiddleware('ratelimit', async (ctx, next) => {
    if (options.enabled) {
      await ratelimitInstance(ctx, next);
    } else {
      await next();
    }
  });
};
// EXTERNAL MODULE: external "koa-helmet"
var external_koa_helmet_ = __webpack_require__(59);

// EXTERNAL MODULE: external "url"
var external_url_ = __webpack_require__(236);
var external_url_default = /*#__PURE__*/__webpack_require__.n(external_url_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/enforceHttps.ts
// tslint:disable

/**
 * Default configuration
 */

const defaults = {
  trustProtoHeader: false,
  trustAzureHeader: false,
  port: 443,
  hostname: undefined,
  skipDefaultPort: true,
  ignoreUrl: false,
  temporary: false,
  redirectMethods: ['GET', 'HEAD'],
  internalRedirectMethods: [],
  specCompliantDisallow: false
};
/**
 * Apply options
 *
 *   @param    {Hash}    options
 *   @return   {Hash}
 *   @api      private
 */

function applyOptions(options) {
  const settings = {};
  options = options || {};
  Object.assign(settings, defaults, options);
  return settings;
}

function portToUrlString(options) {
  return options.skipDefaultPort && options.port === 443 ? '' : ':' + options.port;
}
/**
 * enforceHTTPS
 *
 *   @param    {Hash}       options
 *   @param    {Boolean}    options[trustProtoHeader]
 *   @param    {Boolean}    options[trustAzureHeader]
 *   @param    {Integer}    options[port]
 *   @param    {String}     options[hostname]
 *   @param    {Boolean}    options[ignoreUrl]
 *   @param    {Boolean}    options[temporary]
 *   @param    {Array}      options[redirectMethods]
 *   @param    {Array}      options[internalRedirectMethods]
 *   @param    {Boolean}    options[specCompliantDisallow]
 *   @return   {Function}
 *   @api      public
 */


function enforceHTTPS(options) {
  options = applyOptions(options);
  const redirectStatus = {};
  options.redirectMethods.forEach(function (x) {
    redirectStatus[x] = options.temporary ? 302 : 301;
  });
  options.internalRedirectMethods.forEach(function (x) {
    redirectStatus[x] = 307;
  });
  redirectStatus.OPTIONS = 0;
  return (ctx, next) => {
    // First, check if directly requested via https
    let secure = ctx.secure; // Second, if the request headers can be trusted (e.g. because they are send
    // by a proxy), check if x-forward-proto is set to https

    if (options.trustProtoHeader && ctx.request.header['x-forwarded-proto'] != undefined) {
      secure = ctx.request.header['x-forwarded-proto'] === 'https';
    } // Third, if trustAzureHeader is set, check for Azure's headers
    // indicating a SSL connection


    if (!secure && options.trustAzureHeader && ctx.request.header['x-arr-ssl']) {
      secure = true;
    }

    if (secure) {
      return next();
    } // Check if method should be disallowed (and handle OPTIONS method)


    if (!redirectStatus[ctx.method]) {
      if (ctx.method === 'OPTIONS') {
        ctx.response.status = 200;
      } else {
        ctx.response.status = options.specCompliantDisallow ? 405 : 403;
      }

      ctx.response.set('Allow', Object.keys(redirectStatus).join());
      ctx.response.body = '';
      return;
    } // build redirect url


    const httpsHost = options.hostname || external_url_default.a.parse('http://' + ctx.request.header.host).hostname;
    let redirectTo = 'https://' + httpsHost + portToUrlString(options);

    if (!options.ignoreUrl) {
      redirectTo += ctx.request.url;
    } // redirect to secure


    ctx.response.status = redirectStatus[ctx.method];
    ctx.response.redirect(redirectTo);
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/security.ts




 // tslint:disable-next-line no-any readonly-array

const addNonce = (directives, key) => {
  let directive = directives[key]; // tslint:disable-next-line no-object-mutation

  directives[key] = directive = directive === undefined ? [] : [...directive]; // tslint:disable-next-line no-array-mutation no-any

  directive.unshift(req => `'nonce-${req.nonce}'`);
};

const security = ({
  options
}) => {
  const cspConfig = Object.assign({}, options.cspConfig, {
    directives: Object.assign({}, options.cspConfig.directives)
  });
  addNonce(cspConfig.directives, 'scriptSrc');
  addNonce(cspConfig.directives, 'childSrc');
  return simpleMiddleware('security', external_koa_compose_default()([options.enforceHTTPs ? enforceHTTPS({
    trustProtoHeader: true
  }) : undefined, options.cspConfig.enabled ? external_koa_helmet_["contentSecurityPolicy"](cspConfig) : undefined, options.frameguard.enabled ? external_koa_helmet_["frameguard"]({
    action: options.frameguard.action
  }) : undefined, // tslint:disable-next-line no-any
  external_koa_helmet_["hidePoweredBy"](), external_koa_helmet_["hsts"]({
    // Must be at least 18 weeks to be approved by Google
    maxAge: 10886400,
    // Must be enabled to be approved by Google
    includeSubdomains: true,
    preload: true
  }), external_koa_helmet_["ieNoOpen"](), external_koa_helmet_["noSniff"](), external_koa_helmet_["xssFilter"]()].filter(utils["a" /* utils */].notNull)));
};
// EXTERNAL MODULE: external "http-errors"
var external_http_errors_ = __webpack_require__(237);
var external_http_errors_default = /*#__PURE__*/__webpack_require__.n(external_http_errors_);

// EXTERNAL MODULE: external "resolve-path"
var external_resolve_path_ = __webpack_require__(238);
var external_resolve_path_default = /*#__PURE__*/__webpack_require__.n(external_resolve_path_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/serve.ts
// tslint:disable
// Taken from koa-static with the addition of the immutable header




const BR = '.br';
const GZ = '.gz';
/**
 * Module dependencies.
 */

/**
 * Send file at `path` with the
 * given `options` to the koa `ctx`.
 *
 * @param {Context} ctx
 * @param {String} path
 * @param {Object} [opts]
 * @return {Function}
 * @api public
 */

async function send(ctx, path, opts = {}) {
  // options
  const root = opts.root ? Object(external_path_["normalize"])(Object(external_path_["resolve"])(opts.root)) : '';
  const trailingSlash = path[path.length - 1] === '/';
  path = path.substr(Object(external_path_["parse"])(path).root.length);
  const index = opts.index;
  const maxage = opts.maxage || opts.maxAge || 0;
  const immutable = opts.immutable || false;
  const hidden = opts.hidden || false;
  const format = opts.format !== false;
  const extensions = Array.isArray(opts.extensions) ? opts.extensions : false;
  const brotli = opts.brotli !== false;
  const gzip = opts.gzip !== false;
  const setHeaders = opts.setHeaders;
  const pub = opts.public || false;

  if (setHeaders && typeof setHeaders !== 'function') {
    throw new TypeError('option setHeaders must be function');
  } // normalize path


  path = decode(path);

  if (path === -1) {
    return ctx.throw(400, 'failed to decode');
  } // index file support


  if (index && trailingSlash) {
    path += index;
  }

  path = external_resolve_path_default()(root, path); // hidden file support, ignore

  if (!hidden && isHidden(root, path)) {
    return;
  } // serve brotli file when possible otherwise gzipped file when possible


  let encodingExt = '';

  if (ctx.acceptsEncodings('br', 'deflate', 'identity') === 'br' && brotli && (await external_fs_extra_["pathExists"](path + BR))) {
    path = path + BR;
    ctx.set('Content-Encoding', 'br');
    ctx.res.removeHeader('Content-Length');
    encodingExt = BR;
  } else if (ctx.acceptsEncodings('gzip', 'deflate', 'identity') === 'gzip' && gzip && (await external_fs_extra_["pathExists"](path + GZ))) {
    path = path + GZ;
    ctx.set('Content-Encoding', 'gzip');
    ctx.res.removeHeader('Content-Length');
    encodingExt = GZ;
  }

  if (extensions && !/\..*$/.exec(path)) {
    const list = [].concat(extensions);

    for (let i = 0; i < list.length; i++) {
      let ext = list[i];

      if (typeof ext !== 'string') {
        throw new TypeError('option extensions must be array of strings or false');
      }

      if (!/^\./.exec(ext)) {
        ext = '.' + ext;
      }

      if (await external_fs_extra_["pathExists"](path + ext)) {
        path = path + ext;
        break;
      }
    }
  } // stat


  let stats;

  try {
    stats = await external_fs_extra_["stat"](path); // Format the path to serve static file servers
    // and not require a trailing slash for directories,
    // so that you can do both `/directory` and `/directory/`

    if (stats.isDirectory()) {
      if (format && index) {
        path += '/' + index;
        stats = await external_fs_extra_["stat"](path);
      } else {
        return;
      }
    }
  } catch (err) {
    const notfound = ['ENOENT', 'ENAMETOOLONG', 'ENOTDIR'];

    if (notfound.includes(err.code)) {
      throw external_http_errors_default()(404, err);
    }

    err.status = 500;
    throw err;
  }

  if (setHeaders) {
    setHeaders(ctx.res, path, stats);
  } // stream


  ctx.set('Content-Length', stats.size);

  if (!ctx.response.get('Last-Modified')) {
    ctx.set('Last-Modified', stats.mtime.toUTCString());
  }

  if (!ctx.response.get('Cache-Control')) {
    const directives = ['max-age=' + (maxage / 1000 | 0)];

    if (immutable) {
      directives.push('immutable');
    }

    if (pub) {
      directives.push('public');
    }

    ctx.set('Cache-Control', directives.join(','));
  }

  ctx.type = serve_type(path, encodingExt);
  ctx.body = external_fs_extra_["createReadStream"](path);
  return path;
}
/**
 * Check if it's hidden.
 */


function isHidden(root, path) {
  path = path.substr(root.length).split(external_path_["sep"]);

  for (let i = 0; i < path.length; i++) {
    if (path[i][0] === '.') {
      return true;
    }
  }

  return false;
}
/**
 * File type.
 */


function serve_type(file, ext) {
  return ext !== '' ? Object(external_path_["extname"])(Object(external_path_["basename"])(file, ext)) : Object(external_path_["extname"])(file);
}
/**
 * Decode `path`.
 */


function decode(path) {
  try {
    return decodeURIComponent(path);
  } catch (err) {
    return -1;
  }
}
/**
 * Serve static files from `root`.
 *
 * @param {String} root
 * @param {Object} [opts]
 * @return {Function}
 * @api public
 */


function serve(root, opts) {
  opts = opts || {}; // options

  opts.root = Object(external_path_["resolve"])(root);

  if (opts.index !== false) {
    opts.index = opts.index || 'index.html';
  }

  if (!opts.defer) {
    return async function (ctx, next) {
      let done = false;

      if (ctx.method === 'HEAD' || ctx.method === 'GET') {
        try {
          done = await send(ctx, `${ctx.path.slice((opts.prefix || '').length)}`, opts);
        } catch (err) {
          if (err.status !== 404) {
            throw err;
          }
        }
      }

      if (!done) {
        await next();
      }
    };
  }

  return async function (ctx, next) {
    await next();

    if (ctx.method !== 'HEAD' && ctx.method !== 'GET') {
      return;
    } // response is already handled


    if (ctx.body != undefined || ctx.status !== 404) {
      return;
    } // eslint-disable-line


    try {
      await send(ctx, ctx.path, opts);
    } catch (err) {
      if (err.status !== 404) {
        throw err;
      }
    }
  };
}
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/serveAssets.ts


const serveAssets = ({
  name,
  route,
  options
}) => ({
  type: 'route',
  method: 'get',
  name,
  path: route === '/' || route.endsWith('/') ? `${route}*` : `${route}/*`,
  middleware: serve(resolveRootPath(options.path), Object.assign({}, options.config, {
    prefix: route.endsWith('/') ? route.slice(0, -1) : route
  }))
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/clientAssets.ts
// @ts-ignore


const clientAssets = ({
  options
}) => serveAssets({
  name: 'clientAssets',
  route: routes_namespaceObject.CLIENT,
  options
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/clientAssetsNext.ts


const clientAssetsNext = ({
  options
}) => serveAssets({
  name: 'clientAssets',
  route: neotracker_shared_web_next_src["routes"].CLIENT,
  options
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/publicAssets.ts
// @ts-ignore


const publicAssets = ({
  options
}) => serveAssets({
  name: 'publicAssets',
  route: routes_namespaceObject.PUBLIC,
  options
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/rootAssets.ts
// @ts-ignore


const rootAssets = ({
  options
}) => serveAssets({
  name: 'rootAssets',
  route: routes_namespaceObject.ROOT,
  options
});
// EXTERNAL MODULE: external "sitemap"
var external_sitemap_ = __webpack_require__(239);
var external_sitemap_default = /*#__PURE__*/__webpack_require__.n(external_sitemap_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/sitemap.ts
// @ts-ignore


const createSitemap = domain => external_sitemap_default.a.createSitemap({
  hostname: `https://${domain}`,
  cacheTime: 600000,
  urls: [{
    url: '/',
    changefreq: 'hourly',
    priority: 1.0
  }, {
    url: '/wallet',
    changefreq: 'weekly',
    prioriy: 0.9
  }, {
    url: '/wallet/faq',
    changefreq: 'weekly',
    prioriy: 0.8
  }, {
    url: '/browse/block/1',
    changefreq: 'hourly',
    prioriy: 0.7
  }, {
    url: '/browse/tx/1',
    changefreq: 'hourly',
    prioriy: 0.7
  }, {
    url: '/browse/address/1',
    changefreq: 'hourly',
    prioriy: 0.7
  }, {
    url: '/browse/asset/1',
    changefreq: 'weekly',
    prioriy: 0.7
  }, {
    url: '/browse/contract/1',
    changefreq: 'weekly',
    prioriy: 0.7
  }]
});

const sitemap = ({
  domain
}) => {
  const generatedSitemap = createSitemap(domain);
  return {
    type: 'route',
    method: 'get',
    name: 'sitemap',
    path: '/sitemap.xml',
    middleware: async ctx => {
      ctx.set('Content-Type', 'application/xml');
      ctx.status = 200;
      ctx.body = generatedSitemap.toString();
    }
  };
};
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/nodeRPC.ts

 // @ts-ignore




const nodeRPC_labelNames = [monitor_["KnownLabel"].HTTP_URL, monitor_["KnownLabel"].HTTP_STATUS_CODE];
const SERVER_PROXY_HTTP_CLIENT_JSONRPC_REQUEST_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'server_proxy_http_client_jsonrpc_request_duration_seconds',
  labelNames: nodeRPC_labelNames
});
const SERVER_PROXY_HTTP_CLIENT_JSONRPC_REQUEST_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'server_proxy_http_client_jsonrpc_request_failures_total',
  labelNames: nodeRPC_labelNames
});
const nodeRPC = ({
  rpcURL
}) => ({
  type: 'route',
  name: 'nodeRPC',
  method: 'post',
  path: routes_namespaceObject.RPC,
  middleware: external_koa_compose_default()([bodyParser({
    fields: 'body'
  }), async ctx => {
    const monitor = common_getMonitor(ctx);
    const headers = Object.assign({}, ctx.header);
    const response = await monitor.withLabels({
      [monitor.labels.HTTP_URL]: rpcURL,
      [monitor.labels.HTTP_METHOD]: ctx.method,
      [monitor.labels.RPC_TYPE]: 'jsonrpc',
      [monitor.labels.SPAN_KIND]: 'client'
    }).captureSpanLog(async span => {
      span.inject(monitor.formats.HTTP, headers);
      let status = -1;

      try {
        const resp = await external_cross_fetch_default()(rpcURL, {
          method: ctx.method,
          headers,
          // tslint:disable-next-line no-any
          body: JSON.stringify(ctx.request.body)
        });
        ({
          status
        } = resp);
        return resp;
      } finally {
        span.setLabels({
          [monitor.labels.HTTP_STATUS_CODE]: status
        });
      }
    }, {
      name: 'server_proxy_http_client_jsonrpc_request',
      level: {
        log: 'verbose',
        span: 'info'
      },
      metric: {
        total: SERVER_PROXY_HTTP_CLIENT_JSONRPC_REQUEST_DURATION_SECONDS,
        error: SERVER_PROXY_HTTP_CLIENT_JSONRPC_REQUEST_FAILURES_TOTAL
      },
      trace: true
    });
    ctx.status = response.status;
    response.headers.forEach((value, key) => {
      if (key !== 'transfer-encoding' && key !== 'content-encoding') {
        ctx.set(key, value);
      }
    });
    const {
      body
    } = response;

    if (body !== null) {
      ctx.body = body;
    }
  }])
});
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/report.ts

 // @ts-ignore




const report_labelNames = [monitor_["KnownLabel"].HTTP_URL, monitor_["KnownLabel"].HTTP_STATUS_CODE];
const SERVER_PROXY_HTTP_CLIENT_REQUEST_DURATION_SECONDS = monitor_["metrics"].createHistogram({
  name: 'server_proxy_http_client_request_duration_seconds',
  labelNames: report_labelNames
});
const SERVER_PROXY_HTTP_CLIENT_REQUEST_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'server_proxy_http_client_request_failures_total',
  labelNames: report_labelNames
});
const report = ({
  reportURL
}) => ({
  type: 'route',
  name: 'report',
  method: 'post',
  path: routes_namespaceObject.REPORT,
  middleware: external_koa_compose_default()([bodyParser(), async ctx => {
    if (reportURL === undefined) {
      ctx.status = 200;
      return;
    }

    const monitor = common_getMonitor(ctx);
    const headers = Object.assign({}, ctx.header);
    const response = await monitor.withLabels({
      [monitor.labels.HTTP_URL]: reportURL,
      [monitor.labels.HTTP_METHOD]: ctx.method,
      [monitor.labels.SPAN_KIND]: 'client'
    }).captureSpanLog(async span => {
      span.inject(monitor.formats.HTTP, headers);
      let status = -1;

      try {
        const resp = await external_cross_fetch_default()(reportURL, {
          method: ctx.method,
          headers,
          // tslint:disable-next-line no-any
          body: JSON.stringify(ctx.request.fields)
        });
        ({
          status
        } = resp);
        return resp;
      } finally {
        span.setLabels({
          [monitor.labels.HTTP_STATUS_CODE]: status
        });
      }
    }, {
      name: 'server_proxy_http_client_request',
      level: {
        log: 'verbose',
        span: 'info'
      },
      metric: {
        total: SERVER_PROXY_HTTP_CLIENT_REQUEST_DURATION_SECONDS,
        error: SERVER_PROXY_HTTP_CLIENT_REQUEST_FAILURES_TOTAL
      },
      trace: true
    });
    ctx.status = response.status;
    response.headers.forEach((value, key) => {
      if (key !== 'transfer-encoding' && key !== 'content-encoding') {
        ctx.set(key, value);
      }
    });
    const {
      body
    } = response;

    if (body !== null) {
      ctx.body = body;
    }
  }])
});
// EXTERNAL MODULE: external "apollo-link"
var external_apollo_link_ = __webpack_require__(119);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/SchemaLink.ts


class SchemaLink_SchemaLink extends external_apollo_link_["ApolloLink"] {
  constructor(queryDeduplicator) {
    super();
    this.queryDeduplicator = queryDeduplicator;
  } // tslint:disable-next-line rxjs-finnish


  request(operation) {
    const {
      variables
    } = operation; // tslint:disable-next-line no-any

    const id = operation.query.id;
    const {
      monitor
    } = operation.getContext();
    return new external_apollo_link_["Observable"](subscriber => // tslint:disable-next-line no-any
    Object(external_rxjs_["defer"])(async () => this.queryDeduplicator.execute({
      id,
      variables,
      monitor
    })).subscribe(subscriber));
  }

}
// EXTERNAL MODULE: ./packages/neotracker-shared-web-next/src/App.tsx + 5 modules
var App = __webpack_require__(214);

// EXTERNAL MODULE: external "apollo-cache-inmemory"
var external_apollo_cache_inmemory_ = __webpack_require__(240);

// EXTERNAL MODULE: external "apollo-client"
var external_apollo_client_ = __webpack_require__(126);

// EXTERNAL MODULE: external "fs"
var external_fs_ = __webpack_require__(113);
var external_fs_default = /*#__PURE__*/__webpack_require__.n(external_fs_);

// EXTERNAL MODULE: external "react"
var external_react_ = __webpack_require__(0);

// EXTERNAL MODULE: external "react-dom/server"
var server_ = __webpack_require__(48);

// EXTERNAL MODULE: external "react-helmet"
var external_react_helmet_ = __webpack_require__(15);
var external_react_helmet_default = /*#__PURE__*/__webpack_require__.n(external_react_helmet_);

// EXTERNAL MODULE: external "react-loadable/webpack"
var webpack_ = __webpack_require__(241);

// EXTERNAL MODULE: external "react-router"
var external_react_router_ = __webpack_require__(17);

// EXTERNAL MODULE: external "react-router-config"
var external_react_router_config_ = __webpack_require__(114);

// EXTERNAL MODULE: external "styled-components"
var external_styled_components_ = __webpack_require__(107);

// EXTERNAL MODULE: external "serialize-javascript"
var external_serialize_javascript_ = __webpack_require__(29);
var external_serialize_javascript_default = /*#__PURE__*/__webpack_require__.n(external_serialize_javascript_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/reactApp/makeServerHTML.tsx





function stylesheetTag(stylesheetFilePath) {
  return external_react_["createElement"]("link", {
    key: stylesheetFilePath,
    href: stylesheetFilePath,
    media: "screen, projection",
    rel: "stylesheet",
    type: "text/css"
  });
}

const makeServerHTML = ({
  css,
  js,
  helmet,
  nonce,
  reactAppString,
  apolloState,
  styles,
  userAgent,
  appOptions,
  network,
  appVersion,
  addHeadElements,
  addBodyElements,
  adsenseID,
  bsaEnabled
}) => {
  // Creates an inline script definition that is protected by the nonce.
  const inlineScript = (body, key) => external_react_["createElement"]("script", {
    key: key,
    nonce: nonce,
    type: "text/javascript",
    dangerouslySetInnerHTML: {
      __html: body
    }
  });

  const scriptTag = (src, scriptProps = {}) => external_react_["createElement"]("script", Object.assign({}, scriptProps, {
    nonce: nonce,
    type: "text/javascript",
    src: src
  }));

  const headerElements = [...css.map(stylesheetTag), inlineScript(`
      (function(d) {
        var o = d.createElement;
        d.createElement = function() {
          var e = o.apply(d, arguments);
          if (e.tagName === 'SCRIPT') {
            e.setAttribute('nonce', '${nonce}');
          }
          return e;
        }
      })(document);
    `, 'nonce-script'), ...addHeadElements(nonce), // tslint:disable no-any
  ...helmet.base.toComponent(), ...helmet.link.toComponent(), ...helmet.meta.toComponent(), ...helmet.noscript.toComponent(), ...helmet.script.toComponent(), ...helmet.style.toComponent(), // tslint:enable no-any
  adsenseID === undefined ? undefined : scriptTag('//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js', {
    async: true,
    key: 'adsense-tag'
  }), adsenseID === undefined ? undefined : inlineScript(`
      (adsbygoogle = window.adsbygoogle || []).push({
        google_ad_client: "${adsenseID}",
        enable_page_level_ads: true
      });
    `, 'adsense')].filter(utils["a" /* utils */].notNull).concat(styles);

  const constructScript = () => {
    let script = '';
    script += `window.__APOLLO_STATE__=${external_serialize_javascript_default()(apolloState)};`;
    script += `window.__OPTIONS__=${external_serialize_javascript_default()(appOptions)};`;
    script += `window.__USER_AGENT__=${external_serialize_javascript_default()(userAgent)};`;
    script += `window.__CSS__=${external_serialize_javascript_default()(css)};`;
    script += `window.__NONCE__=${external_serialize_javascript_default()(nonce)};`;
    script += `window.__NETWORK__=${external_serialize_javascript_default()(network)};`;
    script += `window.__APP_VERSION__=${external_serialize_javascript_default()(appVersion)};`;
    return inlineScript(script);
  };

  let bsaElement;

  if (bsaEnabled) {
    bsaElement = inlineScript(`
    (function(){
      var bsa = document.createElement('script');
        bsa.type = 'text/javascript';
        bsa.async = true;
        bsa.src = '//s3.buysellads.com/ac/bsa.js';
      (document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa);
    })();
    `);
  } // tslint:disable no-unnecessary-callback-wrapper


  return Object(server_["renderToStaticMarkup"])(external_react_["createElement"]("html", Object.assign({}, helmet.htmlAttributes.toComponent()), external_react_["createElement"]("head", null, headerElements), external_react_["createElement"]("body", Object.assign({}, helmet.bodyAttributes.toComponent()), bsaElement, external_react_["createElement"]("div", {
    id: "app",
    dangerouslySetInnerHTML: {
      __html: reactAppString
    }
  }), constructScript(), js.map(value => scriptTag(value, {
    key: value
  })), helmet.script.toComponent(), addBodyElements()))); // tslint:enable no-unnecessary-callback-wrapper
};
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/reactApp/index.tsx













 // tslint:disable-next-line no-submodule-imports










const getStats = statsPath => JSON.parse(external_fs_["readFileSync"](resolveRootPath(statsPath), 'utf8'));

const provider = new client_["LocalUserAccountProvider"]({
  keystore: new client_["LocalKeyStore"]({
    store: new client_["LocalMemoryStore"]()
  }),
  provider: new client_["NEOONEProvider"]()
});
const reactApp_client = new client_["Client"]({
  memory: provider,
  localStorage: new client_["LocalUserAccountProvider"]({
    keystore: new client_["LocalKeyStore"]({
      store: new client_["LocalMemoryStore"]('localStorage')
    }),
    provider: new client_["NEOONEProvider"]()
  })
});

const renderApp = async ({
  match,
  css,
  location,
  stats,
  nonce,
  monitor,
  userAgent,
  network,
  appOptions,
  queryDeduplicator
}) => {
  const apollo = new external_apollo_client_["ApolloClient"]({
    cache: new external_apollo_cache_inmemory_["InMemoryCache"](),
    link: new SchemaLink_SchemaLink(queryDeduplicator),
    ssrMode: true,
    queryDeduplication: false
  });
  const readClient = new client_["ReadClient"](new client_["NEOONEDataProvider"]({
    network,
    rpcURL: appOptions.rpcURL
  })); // tslint:disable-next-line no-any

  const context = {};
  const mutableModules = [];

  const pushModule = moduleName => mutableModules.push(moduleName);

  const appContext = {
    apollo,
    css,
    nonce,
    options$: new external_rxjs_["BehaviorSubject"](appOptions),
    monitor,
    network,
    client: reactApp_client,
    readClient,
    userAgent,
    fileSaver: {
      saveAs: () => {// do nothing
      }
    }
  };
  const app = external_react_["createElement"](external_react_loadable_default.a.Capture, {
    report: pushModule
  }, external_react_["createElement"](external_react_router_["StaticRouter"], {
    location: location,
    context: context,
    basename: ""
  }, external_react_["createElement"](App["a" /* App */], {
    appContext: appContext
  })));
  const {
    component
  } = match.route; // tslint:disable-next-line no-any

  const Component = await component.preload();
  await Component.fetchDataForRoute(appContext, match.match);
  const sheet = new external_styled_components_["ServerStyleSheet"]();
  const reactAppString = Object(server_["renderToString"])(sheet.collectStyles(app));
  const reactHelmet = external_react_helmet_default.a.renderStatic();
  const bundles = Object(webpack_["getBundles"])(stats, mutableModules);
  return {
    reactAppString,
    reactHelmet,
    apolloState: apollo.extract(),
    styles: sheet.getStyleElement(),
    routePath: context.routePath,
    missed: context.missed,
    bundles
  };
}; // tslint:disable-next-line export-name


const reactApp = ({
  addHeadElements,
  addBodyElements,
  environment,
  options,
  network,
  appOptions
}) => {
  const stats = getStats(options.statsPath);
  return {
    type: 'route',
    method: 'get',
    name: 'reactApplication',
    path: '/*',
    middleware: external_koa_compose_default()([external_koa_compress_default()(), async ctx => {
      const nonce = getNonce(ctx);
      const monitor = common_getMonitor(ctx);
      const userAgent = getUserAgent(ctx);
      const queryDeduplicator = getQueryDeduplicator(ctx);
      const css = []; // tslint:disable-next-line no-any

      const match = Object(external_react_router_config_["matchRoutes"])(App["b" /* ROUTE_CONFIGS */], ctx.request.path); // tslint:disable-next-line strict-type-predicates

      if (match == undefined || match.length === 0) {
        throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
      }

      const {
        bundles,
        reactAppString,
        reactHelmet,
        apolloState,
        styles,
        routePath,
        missed
      } = await renderApp({
        match: match[0],
        css,
        location: ctx.request.url,
        stats,
        nonce,
        monitor,
        userAgent,
        network,
        appOptions,
        queryDeduplicator
      });

      if (routePath !== undefined) {
        monitor.setLabels({
          [monitor.labels.HTTP_PATH]: routePath
        });
      }

      const bundlePaths = [...new Set(bundles // tslint:disable-next-line no-any
      .map(bundle => bundle.publicPath).concat([`${options.publicPath}vendors~index.js`, `${options.publicPath}index.js`]))].filter(scriptPath => !scriptPath.endsWith('.map'));
      const html = makeServerHTML({
        css,
        js: bundlePaths,
        reactAppString,
        nonce,
        helmet: reactHelmet,
        apolloState,
        styles,
        userAgent,
        network,
        appOptions,
        appVersion: environment.appVersion,
        addHeadElements,
        addBodyElements,
        adsenseID: options.adsenseID,
        bsaEnabled: options.bsaEnabled
      });
      ctx.type = 'html';
      ctx.status = missed ? 404 : 200;
      ctx.body = html;
    }])
  };
};
// EXTERNAL MODULE: external "@material-ui/core/styles/createGenerateClassName"
var createGenerateClassName_ = __webpack_require__(108);
var createGenerateClassName_default = /*#__PURE__*/__webpack_require__.n(createGenerateClassName_);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/RelaySSRQueryCache.ts
// tslint:disable no-any no-object-mutation

class RelaySSRQueryCache_RelaySSRQueryCache {
  constructor() {
    this.mutableCache = {};
  }

  add(queryID, variables, response) {
    let byQuery = this.mutableCache[queryID];

    if (byQuery === undefined) {
      this.mutableCache[queryID] = byQuery = {};
    }

    const variablesSerialized = external_safe_stable_stringify_default()(variables);
    byQuery[variablesSerialized] = response;
  }

  get(queryID, variables) {
    const firstCache = this.mutableCache[queryID];
    return firstCache === undefined ? undefined : firstCache[external_safe_stable_stringify_default()(variables)];
  }

  toData() {
    return this.mutableCache;
  }

}
// EXTERNAL MODULE: external "relay-runtime"
var external_relay_runtime_ = __webpack_require__(58);

// CONCATENATED MODULE: ./packages/neotracker-server-graphql/src/makeRelayEnvironment.ts
// @ts-ignore



function createNetwork(monitorIn, rootLoader, schema, relaySSRQueryCache, queryMap) {
  const queryDeduplicator = createQueryDeduplicator(monitorIn, schema, queryMap, rootLoader); // tslint:disable-next-line no-any

  return external_relay_runtime_["Network"].create((operation, variables, {
    monitor
  }) => {
    const cachedResult = relaySSRQueryCache.get(operation.id, variables);

    if (cachedResult != undefined) {
      return cachedResult;
    }

    return queryDeduplicator.execute({
      id: operation.id,
      variables,
      monitor
    }).then(result => {
      relaySSRQueryCache.add(operation.id, variables, result);
      return result;
    });
  });
}

function makeRelayEnvironment({
  monitor,
  rootLoader,
  schema,
  relaySSRQueryCache,
  queryMap
}) {
  return new external_relay_runtime_["Environment"]({
    network: createNetwork(monitor, rootLoader, schema, relaySSRQueryCache, queryMap),
    store: new external_relay_runtime_["Store"](new external_relay_runtime_["RecordSource"]())
  });
}
// EXTERNAL MODULE: external "redux"
var external_redux_ = __webpack_require__(120);

// EXTERNAL MODULE: external "reselect"
var external_reselect_ = __webpack_require__(55);

// EXTERNAL MODULE: external "redux-actions"
var external_redux_actions_ = __webpack_require__(28);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/claim.js

const startClaiming = Object(external_redux_actions_["createAction"])('claim/startClaiming');
const endClaiming = Object(external_redux_actions_["createAction"])('claim/endClaiming');
const claimProgress = Object(external_redux_actions_["createAction"])('claim/claimProgress');
const claim_claimError = Object(external_redux_actions_["createAction"])('claim/claimError');
/* harmony default export */ var claim = (Object(external_redux_actions_["handleActions"])({
  [startClaiming]: (state, {
    payload: {
      address
    }
  }) => ({ ...state,
    claiming: { ...state.claiming,
      [address]: true
    }
  }),
  [endClaiming]: (state, {
    payload: {
      address
    }
  }) => ({ ...state,
    claiming: { ...state.claiming,
      [address]: false
    }
  }),
  [claimProgress]: (state, {
    payload: {
      address,
      progress
    }
  }) => {
    let spendConfirmTransactionHash = state.spendConfirmTransactionHash[address];
    let claimConfirmTransactionHash = state.claimConfirmTransactionHash[address];

    switch (progress.type) {
      case 'fetch-unspent-sending':
      case 'fetch-unspent-done':
      case 'spend-all-sending':
        spendConfirmTransactionHash = null;
        claimConfirmTransactionHash = null;
        break;

      case 'spend-all-confirming':
        spendConfirmTransactionHash = progress.hash;
        break;

      case 'spend-all-confirmed':
      case 'spend-all-skip':
      case 'fetch-unclaimed-sending':
      case 'fetch-unclaimed-done':
      case 'claim-gas-sending':
        break;

      case 'claim-gas-confirming':
        claimConfirmTransactionHash = progress.hash;
        break;

      case 'claim-gas-confirmed':
      case 'claim-gas-skip':
        break;

      default:
        // eslint-disable-next-line
        progress.type;
        break;
    }

    return { ...state,
      progress: { ...state.progress,
        [address]: progress
      },
      error: { ...state.error,
        [address]: null
      },
      spendConfirmTransactionHash: { ...state.spendConfirmTransactionHash,
        [address]: spendConfirmTransactionHash
      },
      claimConfirmTransactionHash: { ...state.claimConfirmTransactionHash,
        [address]: claimConfirmTransactionHash
      }
    };
  },
  [claim_claimError]: (state, {
    payload: {
      address,
      error
    }
  }) => ({ ...state,
    error: { ...state.error,
      [address]: error
    }
  })
}, {
  claiming: false,
  progress: {},
  error: {},
  spendConfirmTransactionHash: {},
  claimConfirmTransactionHash: {}
}));
const selectClaiming = state => state.claiming;
const selectClaimProgress = state => state.progress;
const selectClaimError = state => state.error;
const selectClaimSpendConfirmHash = state => state.spendConfirmTransactionHash;
const selectClaimClaimConfirmHash = state => state.claimConfirmTransactionHash;
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/snackbar.js


const setSnackbar = Object(external_redux_actions_["createAction"])('snackbar/setSnackbar');
const clearSnackbar = Object(external_redux_actions_["createAction"])('snackbar/clearSnackbar');
/* harmony default export */ var snackbar = (Object(external_redux_actions_["handleActions"])({
  [setSnackbar]: (state, {
    payload
  }) => ({
    props: payload
  }),
  [clearSnackbar]: () => ({
    props: null
  })
}, {
  props: null
}));
const selectSnackbarProps = state => state.props;
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/timer.js

const flip = Object(external_redux_actions_["createAction"])('timer/flip');
/* harmony default export */ var timer = (Object(external_redux_actions_["handleActions"])({
  [flip]: state => ({
    state: !state.state
  })
}, {
  state: true
}));
const selectTimerState = state => state.state;
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/wallet.js

const wallet_confirmTransaction = Object(external_redux_actions_["createAction"])('wallet/confirmTransaction');
const clearConfirmTransaction = Object(external_redux_actions_["createAction"])('wallet/clearConfirmTransaction');
/* harmony default export */ var redux_wallet = (Object(external_redux_actions_["handleActions"])({
  [wallet_confirmTransaction]: (state, {
    payload
  }) => ({ ...state,
    confirmTransaction: payload
  }),
  [clearConfirmTransaction]: state => ({ ...state,
    confirmTransaction: null
  })
}, {
  confirmTransaction: null
}));
const selectConfirmTransaction = state => state.confirmTransaction;
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/index.js










const selectClaim = state => state.claim;

const redux_selectClaiming = Object(external_reselect_["createSelector"])(selectClaim, selectClaiming);
const redux_selectClaimProgress = Object(external_reselect_["createSelector"])(selectClaim, selectClaimProgress);
const redux_selectClaimError = Object(external_reselect_["createSelector"])(selectClaim, selectClaimError);
const redux_selectClaimSpendConfirmHash = Object(external_reselect_["createSelector"])(selectClaim, selectClaimSpendConfirmHash);
const redux_selectClaimClaimConfirmHash = Object(external_reselect_["createSelector"])(selectClaim, selectClaimClaimConfirmHash);

const selectSnackbar = state => state.snackbar;

const redux_selectSnackbarProps = Object(external_reselect_["createSelector"])(selectSnackbar, selectSnackbarProps);

const selectTimer = state => state.timer;

const redux_selectTimerState = Object(external_reselect_["createSelector"])(selectTimer, selectTimerState);

const selectWallet = state => state.wallet;

const redux_selectConfirmTransaction = Object(external_reselect_["createSelector"])(selectWallet, selectConfirmTransaction);
/* harmony default export */ var redux = (() => ({
  claim: claim,
  snackbar: snackbar,
  timer: timer,
  wallet: redux_wallet
}));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/redux/configureStore.js


/* harmony default export */ var configureStore = ((isClient, initialState = {}) => {
  const createReducer = rootReducer => Object(external_redux_["combineReducers"])(Object.assign({}, rootReducer));

  const store = Object(external_redux_["createStore"])(createReducer(redux()), initialState);

  if (isClient) {
    setInterval(() => store.dispatch(flip()), 1000);
  }

  return store;
});
// EXTERNAL MODULE: external "@material-ui/core/colors/amber"
var amber_ = __webpack_require__(242);
var amber_default = /*#__PURE__*/__webpack_require__.n(amber_);

// EXTERNAL MODULE: external "@material-ui/core/colors/blue"
var blue_ = __webpack_require__(243);
var blue_default = /*#__PURE__*/__webpack_require__.n(blue_);

// EXTERNAL MODULE: external "@material-ui/core/colors/blueGrey"
var blueGrey_ = __webpack_require__(244);
var blueGrey_default = /*#__PURE__*/__webpack_require__.n(blueGrey_);

// EXTERNAL MODULE: external "@material-ui/core/colors/brown"
var brown_ = __webpack_require__(245);
var brown_default = /*#__PURE__*/__webpack_require__.n(brown_);

// EXTERNAL MODULE: external "@material-ui/core/colors/cyan"
var cyan_ = __webpack_require__(246);
var cyan_default = /*#__PURE__*/__webpack_require__.n(cyan_);

// EXTERNAL MODULE: external "@material-ui/core/colors/deepOrange"
var deepOrange_ = __webpack_require__(247);
var deepOrange_default = /*#__PURE__*/__webpack_require__.n(deepOrange_);

// EXTERNAL MODULE: external "@material-ui/core/colors/deepPurple"
var deepPurple_ = __webpack_require__(121);
var deepPurple_default = /*#__PURE__*/__webpack_require__.n(deepPurple_);

// EXTERNAL MODULE: external "@material-ui/core/colors/green"
var green_ = __webpack_require__(248);
var green_default = /*#__PURE__*/__webpack_require__.n(green_);

// EXTERNAL MODULE: external "@material-ui/core/colors/grey"
var grey_ = __webpack_require__(249);
var grey_default = /*#__PURE__*/__webpack_require__.n(grey_);

// EXTERNAL MODULE: external "@material-ui/core/colors/indigo"
var indigo_ = __webpack_require__(250);
var indigo_default = /*#__PURE__*/__webpack_require__.n(indigo_);

// EXTERNAL MODULE: external "@material-ui/core/colors/lightBlue"
var lightBlue_ = __webpack_require__(24);
var lightBlue_default = /*#__PURE__*/__webpack_require__.n(lightBlue_);

// EXTERNAL MODULE: external "@material-ui/core/colors/lightGreen"
var lightGreen_ = __webpack_require__(251);
var lightGreen_default = /*#__PURE__*/__webpack_require__.n(lightGreen_);

// EXTERNAL MODULE: external "@material-ui/core/colors/lime"
var lime_ = __webpack_require__(252);
var lime_default = /*#__PURE__*/__webpack_require__.n(lime_);

// EXTERNAL MODULE: external "@material-ui/core/colors/orange"
var orange_ = __webpack_require__(253);
var orange_default = /*#__PURE__*/__webpack_require__.n(orange_);

// EXTERNAL MODULE: external "@material-ui/core/colors/pink"
var pink_ = __webpack_require__(254);
var pink_default = /*#__PURE__*/__webpack_require__.n(pink_);

// EXTERNAL MODULE: external "@material-ui/core/colors/purple"
var purple_ = __webpack_require__(255);
var purple_default = /*#__PURE__*/__webpack_require__.n(purple_);

// EXTERNAL MODULE: external "@material-ui/core/colors/red"
var red_ = __webpack_require__(122);
var red_default = /*#__PURE__*/__webpack_require__.n(red_);

// EXTERNAL MODULE: external "@material-ui/core/colors/teal"
var teal_ = __webpack_require__(256);
var teal_default = /*#__PURE__*/__webpack_require__.n(teal_);

// EXTERNAL MODULE: external "@material-ui/core/colors/yellow"
var yellow_ = __webpack_require__(257);
var yellow_default = /*#__PURE__*/__webpack_require__.n(yellow_);

// EXTERNAL MODULE: external "@material-ui/core/styles/createMuiTheme"
var createMuiTheme_ = __webpack_require__(258);
var createMuiTheme_default = /*#__PURE__*/__webpack_require__.n(createMuiTheme_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/styles/createTheme.js




















const containerDownMDPad = {
  paddingLeft: 16,
  paddingRight: 16
};
const containerDownMDPaddingTop = 16;
const titleDownMDNoHorizontalPad = {
  paddingBottom: 16,
  paddingTop: 16
};
const titleDownMD = Object.assign({}, titleDownMDNoHorizontalPad, containerDownMDPad);
const containerUpMDPad = {
  paddingLeft: 24,
  paddingRight: 24
};
const containerUpMDPaddingTop = 24;
const titleUpMDNoHorizontalPad = {
  paddingBottom: 24,
  paddingTop: 24
};
const titleUpMD = Object.assign({}, titleUpMDNoHorizontalPad, containerUpMDPad);
/* harmony default export */ var createTheme = (() => {
  const theme = createMuiTheme_default()({
    palette: {
      primary: lightBlue_default.a,
      secondary: deepPurple_default.a,
      error: red_default.a,
      type: 'light'
    }
  });
  const lightDivider = 'rgba(0, 0, 0, 0.075)'; // $FlowFixMe

  theme.typography.button = {}; // $FlowFixMe

  theme.custom = {
    lightDivider,
    containerDownMDPad,
    containerUpMDPad,
    containerDownMDPaddingTop,
    containerUpMDPaddingTop,
    titleDownMDNoHorizontalPad,
    titleUpMDNoHorizontalPad,
    titleDownMD,
    titleUpMD,
    comment: {
      borderTop: `1px solid ${lightDivider}`,
      paddingBottom: 16,
      paddingTop: 16
    },
    colors: {
      amber: amber_default.a,
      blue: blue_default.a,
      blueGrey: blueGrey_default.a,
      brown: brown_default.a,
      cyan: cyan_default.a,
      deepOrange: deepOrange_default.a,
      deepPurple: deepPurple_default.a,
      green: green_default.a,
      grey: grey_default.a,
      indigo: indigo_default.a,
      lightBlue: lightBlue_default.a,
      lightGreen: lightGreen_default.a,
      lime: lime_default.a,
      orange: orange_default.a,
      pink: pink_default.a,
      purple: purple_default.a,
      red: red_default.a,
      teal: teal_default.a,
      yellow: yellow_default.a,
      common: {
        black: '#000',
        white: '#fff',
        transparent: 'rgba(0, 0, 0, 0)',
        fullBlack: 'rgba(0, 0, 0, 1)',
        darkBlack: 'rgba(0, 0, 0, 0.87)',
        lightBlack: 'rgba(0, 0, 0, 0.54)',
        minBlack: 'rgba(0, 0, 0, 0.26)',
        faintBlack: 'rgba(0, 0, 0, 0.12)',
        fullWhite: 'rgba(255, 255, 255, 1)',
        darkWhite: 'rgba(255, 255, 255, 0.87)',
        lightWhite: 'rgba(255, 255, 255, 0.54)'
      }
    },
    inputOutput: {
      row: {
        alignItems: 'center',
        display: 'flex',
        height: theme.spacing.unit * 3
      }
    },
    transactionColors: {
      contract: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      miner: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      issue: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      claim: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      enrollment: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      register: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      publish: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      invocation: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      },
      state: {
        color: lightBlue_default.a,
        backgroundColor: lightBlue_default.a[500]
      }
    },
    code: {
      text: {
        fontFamily: 'Menlo,Monaco,Consolas,"Courier New",monospace',
        fontSize: theme.typography.body1.fontSize,
        fontWeight: theme.typography.body1.fontWeight,
        lineHeight: theme.typography.body1.lineHeight,
        color: theme.palette.text.primary
      }
    }
  };
  return theme;
});
// EXTERNAL MODULE: external "@material-ui/core/styles/MuiThemeProvider"
var MuiThemeProvider_ = __webpack_require__(259);
var MuiThemeProvider_default = /*#__PURE__*/__webpack_require__.n(MuiThemeProvider_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/ThemeProvider.js

/* harmony default export */ var ThemeProvider = (MuiThemeProvider_default.a);
// EXTERNAL MODULE: external "classnames"
var external_classnames_ = __webpack_require__(2);
var external_classnames_default = /*#__PURE__*/__webpack_require__.n(external_classnames_);

// EXTERNAL MODULE: external "@material-ui/core/styles/withStyles"
var withStyles_ = __webpack_require__(262);
var withStyles_default = /*#__PURE__*/__webpack_require__.n(withStyles_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/withStyles.js
 // TODO: Fix typings to play nice with recompose

/* harmony default export */ var withStyles = (withStyles_default.a);
// EXTERNAL MODULE: external "react-router-dom"
var external_react_router_dom_ = __webpack_require__(20);

// EXTERNAL MODULE: external "@material-ui/core/IconButton"
var IconButton_ = __webpack_require__(264);
var IconButton_default = /*#__PURE__*/__webpack_require__.n(IconButton_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/IconButton.js

/* harmony default export */ var IconButton = (IconButton_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Icon"
var Icon_ = __webpack_require__(265);
var Icon_default = /*#__PURE__*/__webpack_require__.n(Icon_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Icon.js






const Icon_styles = () => ({
  root: {
    minWidth: '1em'
  }
});

function Icon({
  className,
  children,
  classes,
  ...other
}) {
  return external_react_["createElement"](Icon_default.a, {
    color: other.color,
    fontSize: other.fontSize,
    className: external_classnames_default()(classes.root, className)
  }, children);
}

const enhance = Object(external_recompose_["compose"])(withStyles(Icon_styles), external_recompose_["pure"]);
/* harmony default export */ var base_Icon = (enhance(Icon));
// EXTERNAL MODULE: external "@material-ui/core/Collapse"
var Collapse_ = __webpack_require__(266);
var Collapse_default = /*#__PURE__*/__webpack_require__.n(Collapse_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Collapse.js

/* harmony default export */ var Collapse = (Collapse_default.a);
// EXTERNAL MODULE: external "@material-ui/core/ClickAwayListener"
var ClickAwayListener_ = __webpack_require__(267);
var ClickAwayListener_default = /*#__PURE__*/__webpack_require__.n(ClickAwayListener_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/ClickAwayListener.js

/* harmony default export */ var ClickAwayListener = (ClickAwayListener_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Button"
var Button_ = __webpack_require__(260);
var Button_default = /*#__PURE__*/__webpack_require__.n(Button_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Button.js

/* harmony default export */ var Button = (Button_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Typography"
var Typography_ = __webpack_require__(261);
var Typography_default = /*#__PURE__*/__webpack_require__.n(Typography_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Typography.js

/* harmony default export */ var Typography = (Typography_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Input"
var Input_ = __webpack_require__(271);
var Input_default = /*#__PURE__*/__webpack_require__.n(Input_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Input.js

/* harmony default export */ var base_Input = (Input_default.a);
// EXTERNAL MODULE: external "@material-ui/core/InputLabel"
var InputLabel_ = __webpack_require__(270);
var InputLabel_default = /*#__PURE__*/__webpack_require__.n(InputLabel_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/InputLabel.js

/* harmony default export */ var InputLabel = (InputLabel_default.a);
// EXTERNAL MODULE: external "@material-ui/core/FormControl"
var FormControl_ = __webpack_require__(269);
var FormControl_default = /*#__PURE__*/__webpack_require__.n(FormControl_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/FormControl.js

/* harmony default export */ var FormControl = (FormControl_default.a);
// EXTERNAL MODULE: external "@material-ui/core/FormHelperText"
var FormHelperText_ = __webpack_require__(268);
var FormHelperText_default = /*#__PURE__*/__webpack_require__.n(FormHelperText_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/FormHelperText.js

/* harmony default export */ var FormHelperText = (FormHelperText_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/keys.js
const KeyCode = {
  BACKSPACE: 8,
  TAB: 9,
  RETURN: 13,
  SHIFT: 16,
  CTRL: 17,
  ALT: 18,
  PAUSE_BREAK: 19,
  CAPS_LOCK: 20,
  ESC: 27,
  SPACE: 32,
  PAGE_UP: 33,
  PAGE_DOWN: 34,
  END: 35,
  HOME: 36,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40,
  INSERT: 45,
  DELETE: 46,
  ZERO: 48,
  ONE: 49,
  TWO: 50,
  THREE: 51,
  FOUR: 52,
  FIVE: 53,
  SIX: 54,
  SEVEN: 55,
  EIGHT: 56,
  NINE: 57,
  A: 65,
  B: 66,
  C: 67,
  D: 68,
  E: 69,
  F: 70,
  G: 71,
  H: 72,
  I: 73,
  J: 74,
  K: 75,
  L: 76,
  M: 77,
  N: 78,
  O: 79,
  P: 80,
  Q: 81,
  R: 82,
  S: 83,
  T: 84,
  U: 85,
  V: 86,
  W: 87,
  X: 88,
  Y: 89,
  Z: 90,
  LEFT_WINDOW_KEY: 91,
  RIGHT_WINDOW_KEY: 92,
  SELECT_KEY: 93,
  NUMPAD_0: 96,
  NUMPAD_1: 97,
  NUMPAD_2: 98,
  NUMPAD_3: 99,
  NUMPAD_4: 100,
  NUMPAD_5: 101,
  NUMPAD_6: 102,
  NUMPAD_7: 103,
  NUMPAD_8: 104,
  NUMPAD_9: 105,
  MULTIPLY: 106,
  ADD: 107,
  SUBTRACT: 109,
  DECIMAL_POINT: 110,
  DIVIDE: 111,
  F1: 112,
  F2: 113,
  F3: 114,
  F4: 115,
  F5: 116,
  F6: 117,
  F7: 118,
  F8: 119,
  F9: 120,
  F10: 121,
  F11: 122,
  F12: 123,
  NUM_LOCK: 144,
  SCROLL_LOCK: 145,
  SEMI_COLON: 186,
  EQUAL_SIGN: 187,
  COMMA: 188,
  DASH: 189,
  PERIOD: 190,
  FORWARD_SLASH: 191,
  GRAVE_ACCENT: 192,
  OPEN_BRACKET: 219,
  BACK_SLASH: 220,
  CLOSE_BRAKET: 221,
  SINGLE_QUOTE: 222
};
const createKeyDown = props => event => {
  const {
    keyCode,
    shiftKey
  } = event;

  if (keyCode === KeyCode.UP) {
    if (shiftKey) {
      if (props.onShiftUpArrow) {
        props.onShiftUpArrow(event);
      }
    } else if (props.onUpArrow) {
      props.onUpArrow(event);
    }
  } else if (keyCode === KeyCode.DOWN) {
    if (shiftKey) {
      if (props.onShiftDownArrow) {
        props.onShiftDownArrow(event);
      }
    } else if (props.onDownArrow) {
      props.onDownArrow(event);
    }
  } else if (keyCode === KeyCode.ESC && props.onEscape) {
    props.onEscape(event);
  } else if (keyCode === KeyCode.RETURN) {
    if (props.onEnter) {
      props.onEnter(event);
    }
  } else if (keyCode === KeyCode.BACKSPACE && props.onBackspace) {
    props.onBackspace(event);
  }
};
const createKeyUp = props => event => {
  const {
    keyCode
  } = event;

  if (keyCode === KeyCode.ESC && props.onEscapeUp) {
    props.onEscapeUp(event);
  }
};
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/TextField.js










const TextField_styles = () => ({
  root: {
    display: 'flex',
    flex: '1 1 auto',
    flexDirection: 'column',
    width: '100%' // '& label + div:after': {
    //   borderColor: '#3CBFEF !important'
    // }
    // '&$focused': {
    //   borderColor: '#3CBFEF'
    // }
    // '&$focused label': {
    //   color: '#3CBFEF',
    // },
    // '&$focused >div:after': {
    //   borderColor: '#3CBFEF',
    // },

  },
  subtextArea: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'space-between'
  },
  characterCounter: {
    flex: '0 0 auto'
  },
  inputLabelRoot: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    maxWidth: '100%' // color: '#3CBFEF !important'
    // '&$focused': {
    //   color: '#3CBFEF'
    // }

  }
});

function TextField({
  id: idIn,
  value,
  autoComplete,
  subtext,
  hasSubtext,
  error,
  maxCharacters,
  label,
  required,
  multiline,
  rows,
  rowsMax,
  type,
  disabled,
  readOnly,
  inputClasses,
  className,
  noTabIndex = false,
  onFocus,
  onBlur,
  onChange,
  onKeyDown,
  onKeyUp,
  onClick,
  setInputRef,
  classes
}) {
  const id = `textField-${idIn}`;
  const anyError = error || maxCharacters != null && value.length > maxCharacters;
  let subtextElement = null;

  if (hasSubtext) {
    subtextElement = external_react_["createElement"](FormHelperText, null, subtext || '');
  }

  let characterCounter = null;

  if (maxCharacters != null) {
    characterCounter = external_react_["createElement"](FormHelperText, {
      className: classes.characterCounter
    }, value.length, " / ", maxCharacters);

    if (subtextElement == null) {
      subtextElement = external_react_["createElement"]("div", null);
    }
  }

  let subtextArea = null;

  if (subtextElement != null || characterCounter != null) {
    subtextArea = external_react_["createElement"]("div", {
      className: classes.subtextArea
    }, subtextElement, characterCounter);
  }

  return external_react_["createElement"](FormControl, {
    className: external_classnames_default()(className, classes.root),
    error: anyError,
    required: !!required
  }, label == null ? null : external_react_["createElement"](InputLabel, {
    htmlFor: id,
    classes: {
      root: classes.inputLabelRoot
    }
  }, label), external_react_["createElement"](base_Input, {
    id: id,
    classes: inputClasses,
    value: value,
    autoComplete: autoComplete,
    inputRef: setInputRef,
    disabled: disabled,
    type: type,
    multiline: !!multiline,
    rows: rows,
    rowsMax: rowsMax,
    inputProps: {
      onKeyDown,
      onKeyUp,
      onClick,
      readOnly: readOnly ? 'readonly' : undefined,
      tabIndex: noTabIndex ? -1 : undefined
    },
    onFocus: onFocus,
    onBlur: onBlur,
    onChange: onChange
  }), subtextArea);
}

const TextField_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withHandlers"])({
  onKeyDown: createKeyDown,
  onKeyUp: createKeyUp
}), withStyles(TextField_styles), external_recompose_["pure"]);
/* harmony default export */ var base_TextField = (TextField_enhance(TextField));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/search/SearchField.js







const SearchField_styles = theme => ({
  root: {
    alignItems: 'center',
    display: 'flex',
    flex: '1 1 auto'
  },
  textField: {
    display: 'flex',
    flex: '1 1 auto',
    marginRight: theme.spacing.unit
  },
  button: {
    height: theme.spacing.unit * 5,
    backgroundColor: '#FFD401 !important',
    borderRadius: 20,
    border: '1px solid #fff',
    transition: 'opacity 0.2s ease-out',
    '&:hover': {
      opacity: 0.8
    }
  },
  search: {
    color: '#001E7F',
    fontWeight: 500
  }
});

function SearchField({
  setInputRef,
  className,
  value,
  onChange,
  onSearch,
  inputClasses,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](base_TextField, {
    id: "search-field",
    className: classes.textField,
    value: value,
    label: "Search by block/tx/address hash or block index",
    onChange: onChange,
    onEnter: onSearch,
    inputClasses: inputClasses,
    setInputRef: setInputRef
  }), external_react_["createElement"](Button, {
    className: classes.button,
    color: "primary",
    variant: "raised",
    onClick: onSearch
  }, external_react_["createElement"](Typography, {
    className: classes.search,
    variant: "body1"
  }, "SEARCH")));
}

const SearchField_enhance = Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withState"])('state', 'setState', () => ({
  value: ''
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onSearch: ({
    onSearch,
    value,
    history
  }) => () => {
    history.push(makeSearch(value.trim()));

    if (onSearch != null) {
      onSearch();
    }
  },
  onChange: ({
    setState
  }) => event => {
    const {
      value
    } = event.target;
    setState(prevState => ({ ...prevState,
      value
    }));
  }
}), withStyles(SearchField_styles), external_recompose_["pure"]);
/* harmony default export */ var search_SearchField = (SearchField_enhance(SearchField));
// EXTERNAL MODULE: external "@material-ui/core/Paper"
var Paper_ = __webpack_require__(263);
var Paper_default = /*#__PURE__*/__webpack_require__.n(Paper_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Paper.js

/* harmony default export */ var Paper = (Paper_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/headroom/HeadroomJS.js
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }





const HeadroomJS_styles = theme => ({
  fixed: {
    left: 0,
    position: 'fixed',
    right: 0,
    top: 0,
    zIndex: 1100
  },
  headroom: {
    transition: theme.transitions.create(['transform']),
    willChange: 'transform'
  },
  pinned: {
    transform: 'translateY(0%)'
  },
  unpinned: {
    transform: 'translateY(-100%)'
  },
  disableHidden: {
    '&$unpinned': {
      transform: 'translateY(0%)'
    }
  }
});

class HeadroomJS_HeadroomJS extends external_react_["Component"] {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "_headroom", void 0);

    _defineProperty(this, "setupHeadroom", ref => {
      if (this._headroom == null && ref != null) {
        const {
          classes
        } = this.props; // eslint-disable-next-line

        const Headroom = __webpack_require__(330);

        this._headroom = new Headroom(ref, {
          offset: this.props.offset,
          tolerance: {
            up: 30,
            down: 0
          },
          classes: {
            initial: classes.headroom,
            pinned: classes.pinned,
            unpinned: classes.unpinned
          }
        });

        this._headroom.init();
      }
    });
  }

  componentWillUnmount() {
    if (this._headroom != null) {
      this._headroom.destroy();
    }
  }

  render() {
    const {
      classes
    } = this.props;
    return external_react_["createElement"]("div", {
      "data-test": this.props['data-test'],
      className: external_classnames_default()({
        [classes.fixed]: true,
        [classes.disableHidden]: this.props.disableHidden
      }, this.props.className),
      ref: this.setupHeadroom
    }, this.props.children);
  }

}

/* harmony default export */ var headroom_HeadroomJS = (withStyles(HeadroomJS_styles)(HeadroomJS_HeadroomJS));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appBar/AppBarShell.js





const AppBarShell_styles = () => ({
  appBar: {
    zIndex: 1100,
    boxShadow: 'none'
  }
});

const AppBarShell = ({
  offset,
  disableHidden,
  children,
  className,
  classes
}) => external_react_["createElement"]("div", {
  className: className
}, external_react_["createElement"](headroom_HeadroomJS, {
  offset: offset,
  disableHidden: disableHidden
}, external_react_["createElement"](Paper, {
  className: classes.appBar,
  square: true,
  elevation: 4
}, children)));

const AppBarShell_enhance = Object(external_recompose_["compose"])(withStyles(AppBarShell_styles));
/* harmony default export */ var appBar_AppBarShell = (AppBarShell_enhance(AppBarShell));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/logo/TitleLogo.js



function TitleLogo({
  id
}) {
  const a = `${id}a`;
  const b = `${id}b`;
  return external_react_["createElement"](external_react_["Fragment"], null, external_react_["createElement"]("svg", {
    width: "50",
    height: "40",
    viewBox: "0 0 50 40",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, external_react_["createElement"]("path", {
    d: "M6.35852 6.20875L6.38048 6.23066C2.87492 9.71789 0.691629 14.5413 0.674057 19.8729C0.656486 25.2046 2.80024 30.0455 6.28384 33.559L6.24869 33.5853C9.74986 37.1076 14.5953 39.2849 19.959 39.3068C19.9722 39.3068 19.981 39.3068 19.9854 39.3068C19.9986 39.3068 20.0074 39.3068 20.0118 39.3068C24.3081 39.3244 28.2837 37.9444 31.5037 35.6006L26.3332 30.5187C24.4794 31.6227 22.3181 32.2667 20.0074 32.2667C13.2027 32.2228 7.70715 26.6985 7.7335 19.8992C7.75547 13.1 13.295 7.61504 20.1084 7.61942C22.6036 7.63694 24.9143 8.39485 26.8472 9.67408L31.8859 4.57027C28.6351 2.08189 24.5716 0.587989 20.1567 0.570465C20.1436 0.570465 20.1348 0.570465 20.1304 0.570465C20.1172 0.570465 20.1084 0.570465 20.104 0.570465C20.0821 0.570465 20.0601 0.570465 20.0337 0.570465C14.7007 0.570465 9.87287 2.72589 6.35852 6.20875Z",
    fill: "white"
  }), external_react_["createElement"]("path", {
    d: "M31.3939 15.0846C32.0396 16.5872 32.3999 18.2432 32.3955 19.9825C32.3911 21.9101 31.9254 23.7238 31.1303 25.3491L36.3315 30.4705C38.2908 27.4608 39.4374 23.8771 39.4549 20.0219C39.4681 16.2893 38.4182 12.8021 36.5907 9.83618L31.3939 15.0846Z",
    fill: "white"
  })), external_react_["createElement"]("svg", {
    width: "145px",
    height: "28px",
    viewBox: "0 0 145 28",
    xmlns: "http://www.w3.org/2000/svg",
    role: "img",
    "aria-label": "[title]",
    className: "logo-svg"
  }, external_react_["createElement"]("title", {
    id: `${id}Title`
  }, "CRON Tracker Blockchain Explorer & Wallet"), external_react_["createElement"]("desc", {
    id: `${id}Description`
  }, "CRON Tracker Blockchain Explorer & Wallet"), external_react_["createElement"]("defs", null, external_react_["createElement"]("linearGradient", {
    x1: "45.734%",
    y1: "-4.797%",
    x2: "45.392%",
    y2: "144.834%",
    id: a
  }, external_react_["createElement"]("stop", {
    stopColor: "#58BE23",
    offset: "0%"
  }), external_react_["createElement"]("stop", {
    stopColor: "#58BE23",
    stopOpacity: "0",
    offset: "100%"
  })), external_react_["createElement"]("linearGradient", {
    x1: "40.502%",
    y1: "1.637%",
    x2: "44.803%",
    y2: "114.732%",
    id: b
  }, external_react_["createElement"]("stop", {
    stopColor: "#58BE23",
    offset: "0%"
  }), external_react_["createElement"]("stop", {
    stopColor: "#58BE23",
    stopOpacity: "0",
    offset: "100%"
  }))), external_react_["createElement"]("text", {
    fontSize: "20",
    fontWeight: "700",
    fontFamily: "Gotham Pro",
    y: "15"
  }, external_react_["createElement"]("tspan", {
    fill: "#fff"
  }, "CRON\xA0"), external_react_["createElement"]("tspan", {
    fill: "#3CBFEF"
  }, "Tracker"))));
}

const TitleLogo_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var logo_TitleLogo = (TitleLogo_enhance(TitleLogo));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appBar/TitleLink.js








const TitleLink_styles = () => ({
  link: {
    textDecoration: 'none'
  },
  linkLogo: {
    minWidth: 195
  }
});

function TitleLink({
  id,
  className,
  classes
}) {
  return external_react_["createElement"](external_react_router_dom_["Link"], {
    className: external_classnames_default()(className, classes.link, classes.linkLogo),
    to: HOME
  }, external_react_["createElement"](logo_TitleLogo, {
    id: id
  }));
}

const TitleLink_enhance = Object(external_recompose_["compose"])(withStyles(TitleLink_styles), external_recompose_["pure"]);
/* harmony default export */ var appBar_TitleLink = (TitleLink_enhance(TitleLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appBar/AppBarDownMD.js











const AppBarDownMD_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    },
    title: {
      marginRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    },
    title: {
      marginRight: theme.spacing.unit * 2
    }
  },
  header: {
    alignItems: 'center',
    backgroundImage: 'linear-gradient(180deg, #0056BB -22.73%, #0A97DE 130.3%)',
    display: 'flex',
    flexDirection: 'row',
    height: theme.spacing.unit * 8,
    justifyContent: 'space-between'
  },
  title: {},
  padding: {},
  selected: {
    color: theme.palette.primary[500]
  },
  menuButton: {
    height: theme.spacing.unit * 6
  },
  menu: {
    display: 'flex',
    borderTop: `1px solid ${theme.custom.lightDivider}`,
    flexDirection: 'column',
    paddingBottom: theme.spacing.unit,
    paddingTop: theme.spacing.unit
  },
  link: {
    textDecoration: 'none'
  },
  button: {
    width: '100%'
  }
});

const AppBarDownMD = ({
  isWallet,
  className,
  location,
  showMenu,
  onHideMenu,
  onShowMenu,
  onClickButton,
  classes
}) => {
  const buttons = [{
    className: classes.button,
    id: 'wallet',
    label: 'Wallet',
    selected: isWallet,
    href: WALLET_HOME
  }, {
    className: classes.button,
    id: 'blocks',
    label: 'Blocks',
    selected: isBlock(location.pathname),
    href: makeBlockSearch(1)
  }, {
    className: classes.button,
    id: 'transactions',
    label: 'Transactions',
    selected: isTransaction(location.pathname),
    href: makeTransactionSearch(1)
  }, {
    className: classes.button,
    id: 'addresses',
    label: 'Addresses',
    selected: isAddress(location.pathname),
    href: makeAddressSearch(1)
  }, {
    className: classes.button,
    id: 'assets',
    label: 'Assets',
    selected: isAsset(location.pathname),
    href: makeAssetSearch(1)
  }, {
    className: classes.button,
    id: 'contracts',
    label: 'Contracts',
    selected: isContract(location.pathname),
    href: makeContractSearch(1)
  }];
  const onClickMenu = showMenu ? onHideMenu : onShowMenu;
  return external_react_["createElement"](appBar_AppBarShell, {
    className: className,
    disableHidden: showMenu,
    offset: 88
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.header, classes.padding)
  }, external_react_["createElement"](appBar_TitleLink, {
    className: classes.title,
    id: "AppBarDownMD"
  }), external_react_["createElement"](IconButton, {
    className: classes.menuButton,
    onMouseUp: onClickMenu,
    onTouchEnd: onClickMenu
  }, external_react_["createElement"](base_Icon, null, "menu"))), external_react_["createElement"](Collapse, {
    in: showMenu,
    timeout: "auto"
  }, external_react_["createElement"](ClickAwayListener, {
    onClickAway: onHideMenu
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.menu, classes.padding)
  }, buttons.map(button => external_react_["createElement"](external_react_router_dom_["Link"], {
    key: button.id,
    className: classes.link,
    to: button.href
  }, external_react_["createElement"](Button, {
    color: button.selected ? 'primary' : 'default',
    className: button.className,
    onClick: onClickButton
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, button.label)))), external_react_["createElement"](search_SearchField, {
    onSearch: onClickButton
  })))));
};

const AppBarDownMD_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', () => ({
  showMenu: false
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onHideMenu: ({
    setState,
    showMenu
  }) => event => {
    if (showMenu) {
      event.preventDefault();
      setState(prevState => ({ ...prevState,
        showMenu: false
      }));
    }
  },
  onClickButton: ({
    setState,
    showMenu
  }) => () => {
    if (showMenu) {
      setState(prevState => ({ ...prevState,
        showMenu: false
      }));
    }
  },
  onShowMenu: ({
    setState,
    showMenu
  }) => event => {
    event.preventDefault();

    if (!showMenu) {
      setState(prevState => ({ ...prevState,
        showMenu: true
      }));
    }
  }
}), withStyles(AppBarDownMD_styles), external_react_router_["withRouter"]);
/* harmony default export */ var appBar_AppBarDownMD = (AppBarDownMD_enhance(AppBarDownMD));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/tabs/Tabs.js






const Tabs_styles = () => ({
  root: {
    display: 'flex'
  },
  link: {
    textDecoration: 'none',
    height: 37
  },
  btn: {
    height: '37px !important',
    borderRadius: 20
  },
  btnActive: {
    boxShadow: '0 0 0 1px white'
  }
});

function Tabs({
  tabs,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, tabs.map(tab => external_react_["createElement"](external_react_router_dom_["Link"], {
    key: tab.id,
    className: classes.link,
    to: tab.href
  }, external_react_["createElement"](Button, {
    className: external_classnames_default()(tab.className, classes.btn, tab.selected ? classes.btnActive : null),
    onClick: tab.onClick
  }, external_react_["createElement"]("i", {
    className: `icon-${tab.id}`
  }, " "), external_react_["createElement"](Typography, {
    variant: "body1",
    color: "inherit",
    fontWeight: "500"
  }, tab.label)))));
}

const Tabs_enhance = Object(external_recompose_["compose"])(withStyles(Tabs_styles), external_recompose_["pure"]);
/* harmony default export */ var tabs_Tabs = (Tabs_enhance(Tabs));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appBar/AppBarUpMD.js











const AppBarUpMD_styles = theme => ({
  header: {
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.getContrastText(theme.palette.background.paper),
    display: 'flex',
    flexDirection: 'column'
  },
  headerNormal: {
    height: theme.spacing.unit * 8
  },
  headerWallet: {
    height: theme.spacing.unit * 14
  },
  mainHeader: {
    alignItems: 'center',
    display: 'flex',
    height: theme.spacing.unit * 8,
    flex: '0 0 auto',
    flexDirection: 'row',
    backgroundImage: 'linear-gradient(180deg, #0056BB -22.73%, #0A97DE 130.3%)'
  },
  mainHeaderWallet: {
    borderBottom: `1px solid ${theme.custom.lightDivider}`
  },
  tabs: {
    alignItems: 'center',
    display: 'flex',
    height: '100%'
  },
  title: {
    marginRight: theme.spacing.unit * 2
  },
  padding: {
    paddingLeft: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2
  },
  button: {
    height: theme.spacing.unit * 6,
    color: '#fff'
  },
  search: {
    alignItems: 'center',
    borderTop: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    paddingBottom: theme.spacing.unit,
    paddingTop: theme.spacing.unit
  }
});

const AppBarUpMD = ({
  isWallet,
  className,
  location,
  showSearch,
  onHideSearch,
  onShowSearch,
  onSearch,
  setSearchFieldRef,
  classes
}) => {
  const tabs = external_react_["createElement"](tabs_Tabs, {
    tabs: [{
      className: classes.button,
      id: 'wallet',
      label: 'Wallet',
      selected: isWallet,
      href: WALLET_HOME
    }, {
      className: classes.button,
      id: 'blocks',
      label: 'Blocks',
      selected: isBlock(location.pathname),
      href: makeBlockSearch(1)
    }, {
      className: classes.button,
      id: 'transactions',
      label: 'Transactions',
      selected: isTransaction(location.pathname),
      href: makeTransactionSearch(1)
    }, {
      className: classes.button,
      id: 'addresses',
      label: 'Addresses',
      selected: isAddress(location.pathname),
      href: makeAddressSearch(1)
    }, {
      className: classes.button,
      id: 'assets',
      label: 'Assets',
      selected: isAsset(location.pathname),
      href: makeAssetSearch(1)
    }, {
      className: classes.button,
      id: 'contracts',
      label: 'Contracts',
      selected: isContract(location.pathname),
      href: makeContractSearch(1)
    }]
  });
  const onClickSearch = showSearch ? onHideSearch : onShowSearch;
  return external_react_["createElement"](appBar_AppBarShell, {
    className: className,
    disableHidden: showSearch,
    offset: 88
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.header]: true,
      [classes.headerNormal]: !isWallet
    })
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.mainHeader]: true,
      [classes.padding]: true
    })
  }, external_react_["createElement"](appBar_TitleLink, {
    className: classes.title,
    id: "AppBarUpMD"
  }), external_react_["createElement"]("div", {
    className: classes.tabs
  }, tabs, external_react_["createElement"](IconButton, {
    className: classes.button,
    onMouseUp: onClickSearch,
    onTouchEnd: onClickSearch
  }, external_react_["createElement"](base_Icon, null, "search"))))), external_react_["createElement"](Collapse, {
    in: showSearch,
    timeout: "auto"
  }, external_react_["createElement"](ClickAwayListener, {
    onClickAway: onHideSearch
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.search, classes.padding)
  }, external_react_["createElement"](search_SearchField, {
    setInputRef: setSearchFieldRef,
    onSearch: onSearch
  })))));
};

const AppBarUpMD_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', () => ({
  showSearch: false,
  searchFieldRef: null
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onHideSearch: ({
    setState,
    showSearch
  }) => event => {
    if (showSearch) {
      event.preventDefault();
      setState(prevState => ({ ...prevState,
        showSearch: false
      }));
    }
  },
  onShowSearch: ({
    setState,
    searchFieldRef,
    showSearch
  }) => event => {
    event.preventDefault();

    if (!showSearch) {
      setState(prevState => ({ ...prevState,
        showSearch: true
      }));

      if (searchFieldRef != null) {
        searchFieldRef.focus();
      }
    }
  },
  onSearch: ({
    setState,
    showSearch
  }) => () => {
    if (showSearch) {
      setState(prevState => ({ ...prevState,
        showSearch: false
      }));
    }
  },
  setSearchFieldRef: ({
    setState
  }) => searchFieldRef => setState(prevState => ({ ...prevState,
    searchFieldRef
  }))
}), withStyles(AppBarUpMD_styles), external_react_router_["withRouter"]);
/* harmony default export */ var appBar_AppBarUpMD = (AppBarUpMD_enhance(AppBarUpMD));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appBar/AppBar.js






const AppBar_styles = theme => ({
  [theme.breakpoints.down('md')]: {
    appBarUpMD: {
      display: 'none'
    },
    appBarDownMD: {
      display: 'initial'
    }
  },
  [theme.breakpoints.up('md')]: {
    appBarUpMD: {
      display: 'initial'
    },
    appBarDownMD: {
      display: 'none'
    }
  },
  appBarUpMD: {},
  appBarDownMD: {}
});

const AppBar = ({
  isWallet,
  classes
}) => external_react_["createElement"]("div", null, external_react_["createElement"]("div", {
  className: classes.appBarUpMD
}, external_react_["createElement"](appBar_AppBarUpMD, {
  isWallet: isWallet
})), external_react_["createElement"]("div", {
  className: classes.appBarDownMD
}, external_react_["createElement"](appBar_AppBarDownMD, {
  isWallet: isWallet
})));

const AppBar_enhance = Object(external_recompose_["compose"])(withStyles(AppBar_styles));
/* harmony default export */ var appBar_AppBar = (AppBar_enhance(AppBar));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/mapAppOptions.js


/* harmony default export */ var mapAppOptions = (Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["mapPropsStream"])(props$ => props$.pipe(Object(operators_["switchMap"])(props => props.appContext.options$.pipe(Object(operators_["map"])(appOptions => ({ ...props,
  appOptions
}))))))));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/main/appFooter/AppFooter.js











const AppFooter_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    }
  },
  [theme.breakpoints.down('sm')]: {
    root: {
      flexDirection: 'column',
      alignItems: 'center'
    },
    footerUl: {
      margin: '15px 0 0 0'
    },
    footerLi: {
      marginRight: 10,
      marginBottom: 10
    }
  },
  [theme.breakpoints.up('md')]: {
    footerUl: {
      margin: '0 0 0 55px'
    },
    footerLi: {
      marginRight: 30
    }
  },
  root: {
    background: 'linear-gradient(180deg, #0056BB -22.73%, #0A97DE 130.3%)',
    display: 'flex',
    flexWrap: 'wrap',
    paddingBottom: 23,
    paddingTop: 23
  },
  footerUl: {
    padding: 0,
    display: 'flex',
    flexWrap: 'wrap',
    alignItems: 'center'
  },
  footerLi: {
    listStyle: 'none',
    fontSize: '0.875rem',
    color: '#fff',
    fontWeight: 500,
    '&:last-child': {
      marginRight: 0
    }
  },
  footerLink: {
    textDecoration: 'none',
    color: 'inherit',
    transition: 'opacity 0.2s ease-out',
    '&:hover': {
      opacity: 0.8
    }
  },
  firstRow: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    paddingLeft: '15px'
  },
  secondRow: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'center',
    width: '100%'
  },
  col: {
    display: 'flex',
    flexDirection: 'column',
    maxWidth: '90%'
  },
  copyright: {
    color: theme.custom.colors.common.white,
    fontSize: '0.875rem'
  },
  icon: {
    fill: theme.custom.colors.common.white,
    paddingRight: theme.spacing.unit / 2
  }
});

function AppFooter({
  className,
  appOptions,
  classes
}) {
  const FooterLink = ({
    href,
    children
  }) => {
    return external_react_["createElement"]("li", {
      className: classes.footerLi
    }, external_react_["createElement"]("a", {
      className: classes.footerLink,
      href: href
    }, children));
  };

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.firstRow
  }, external_react_["createElement"](Typography, {
    className: classes.copyright,
    variant: "caption"
  }, `${appOptions.meta.name} © 2019`)), external_react_["createElement"]("ul", {
    className: classes.footerUl
  }, external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Where to buy"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "About CRON"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Wallet"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Integration"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Partnership"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Team"), external_react_["createElement"](FooterLink, {
    href: "#"
  }, "Contact")));
}

const AppFooter_enhance = Object(external_recompose_["compose"])(external_react_router_["withRouter"], withStyles(AppFooter_styles), mapAppOptions, external_recompose_["pure"]);
/* harmony default export */ var appFooter_AppFooter = (AppFooter_enhance(AppFooter));
// EXTERNAL MODULE: external "react-redux"
var external_react_redux_ = __webpack_require__(22);

// EXTERNAL MODULE: external "@material-ui/core/Snackbar"
var Snackbar_ = __webpack_require__(273);
var Snackbar_default = /*#__PURE__*/__webpack_require__.n(Snackbar_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Snackbar.js

/* harmony default export */ var Snackbar = (Snackbar_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/snackbar/GlobalSnackbar.js






const GlobalSnackbar_styles = theme => ({
  close: {
    width: theme.spacing.unit * 4,
    height: theme.spacing.unit * 4
  },
  closeIcon: {
    color: 'inherit'
  }
});

function GlobalSnackbar({
  className,
  currentSnackbarProps,
  open,
  handleClose,
  handleExited,
  classes
}) {
  return external_react_["createElement"](Snackbar, {
    className: className,
    anchorOrigin: {
      vertical: 'bottom',
      horizontal: 'right'
    },
    message: external_react_["createElement"]("span", null, currentSnackbarProps != null ? currentSnackbarProps.message : ''),
    action: external_react_["createElement"]("div", null, currentSnackbarProps != null && currentSnackbarProps.action, currentSnackbarProps != null && currentSnackbarProps.omitClose ? null : external_react_["createElement"](IconButton, {
      className: classes.close,
      "aria-label": "Close",
      color: "inherit",
      onClick: handleClose
    }, external_react_["createElement"](base_Icon, {
      className: classes.closeIcon
    }, "close"))),
    onClose: handleClose,
    onExited: handleExited,
    open: currentSnackbarProps != null && open
  });
}

const GlobalSnackbar_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', {
  open: false,
  currentSnackbarProps: null,
  snackbarPropsQueue: [],
  timer: null
}), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_react_redux_["connect"])(state => ({
  snackbarProps: redux_selectSnackbarProps(state)
})), Object(external_recompose_["withHandlers"])({
  handleClose: ({
    setState
  }) => () => {
    setState(prevState => {
      if (prevState.timer) {
        clearTimeout(prevState.timer);
      }

      return { ...prevState,
        open: false
      };
    });
  }
}), Object(external_recompose_["withHandlers"])({
  handleExited: ({
    setState,
    handleClose
  }) => () => {
    setState(prevState => {
      if (prevState.snackbarPropsQueue.length > 0) {
        const [currentSnackbarProps, ...snackbarPropsQueue] = prevState.snackbarPropsQueue;
        return { ...prevState,
          open: true,
          currentSnackbarProps,
          snackbarPropsQueue,
          timer: setTimeout(() => handleClose(), currentSnackbarProps.timeoutMS || 2000)
        };
      }

      return { ...prevState,
        open: false,
        currentSnackbarProps: null
      };
    });
  }
}), Object(external_recompose_["lifecycle"])({
  componentWillReceiveProps(nextProps) {
    if (this.props.snackbarProps !== nextProps.snackbarProps && nextProps.snackbarProps != null) {
      if (nextProps.snackbarPropsQueue.length === 0 && nextProps.currentSnackbarProps == null) {
        nextProps.setState(prevState => ({ ...prevState,
          open: true,
          currentSnackbarProps: nextProps.snackbarProps,
          timer: setTimeout(() => nextProps.handleClose(), nextProps.snackbarProps.timeoutMS || 2000)
        }));
      } else {
        nextProps.setState(prevState => ({ ...prevState,
          snackbarPropsQueue: [...prevState.snackbarPropsQueue, nextProps.snackbarProps]
        }));
      }
    }
  }

}), withStyles(GlobalSnackbar_styles), external_recompose_["pure"]);
/* harmony default export */ var snackbar_GlobalSnackbar = (GlobalSnackbar_enhance(GlobalSnackbar));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/advertising/AdUnit.js




function AdUnit({
  appOptions,
  children,
  className
}) {
  if (appOptions.bsaEnabled) {
    return external_react_["createElement"]("div", {
      className: className
    }, children);
  }

  return null;
}

const AdUnit_enhance = Object(external_recompose_["compose"])(mapAppOptions);
/* harmony default export */ var advertising_AdUnit = (AdUnit_enhance(AdUnit));
// EXTERNAL MODULE: external "@material-ui/core/Hidden"
var Hidden_ = __webpack_require__(272);
var Hidden_default = /*#__PURE__*/__webpack_require__.n(Hidden_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Hidden.js

/* harmony default export */ var Hidden = (Hidden_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/advertising/Leaderboard.js






const Leaderboard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingTop: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingTop: theme.spacing.unit * 2
    }
  },
  root: {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  }
});

function Leaderboard({
  classes,
  className
}) {
  const initialWidth = 'lg';
  return external_react_["createElement"](external_react_["Fragment"], null, external_react_["createElement"](Hidden, {
    mdUp: true,
    initialWidth: initialWidth
  }, external_react_["createElement"](advertising_AdUnit, {
    className: external_classnames_default()(classes.root, className)
  }, external_react_["createElement"]("div", {
    id: "bsap_1308191",
    className: "bsarocks bsap_7f3941492a1eed66c7191226643c3c86"
  }))), external_react_["createElement"](Hidden, {
    mdDown: true,
    initialWidth: initialWidth
  }, external_react_["createElement"](advertising_AdUnit, {
    className: external_classnames_default()(classes.root, className)
  }, external_react_["createElement"]("div", {
    id: "bsap_1308190",
    className: "bsarocks bsap_7f3941492a1eed66c7191226643c3c86"
  }))));
}

const Leaderboard_enhance = Object(external_recompose_["compose"])(withStyles(Leaderboard_styles));
/* harmony default export */ var advertising_Leaderboard = (Leaderboard_enhance(Leaderboard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/AppShell.js













const AppShell_styles = theme => ({
  '@global': {
    body: {
      margin: 0,
      backgroundImage: 'url(/public/moscow-city.png)',
      backgroundSize: 'cover'
    }
  },
  root: {
    height: '100%'
  },
  content: {
    display: 'flex',
    flexDirection: 'column',
    position: 'relative'
  },
  contentNormal: {
    minHeight: `calc(100% - ${theme.spacing.unit * 8}px)`,
    top: theme.spacing.unit * 8
  },
  contentWallet: {
    minHeight: `calc(100% - ${theme.spacing.unit * 14}px)`,
    top: theme.spacing.unit * 14
  },
  contentInner: {
    flex: '1 1 auto'
  }
});

function AppShell_App({
  classes,
  theme,
  children,
  location,
  appOptions
}) {
  const {
    title
  } = appOptions.meta;
  const path = location.pathname.endsWith('/') ? location.pathname.slice(0, -1) : location.pathname;
  const canonicalURL = `${appOptions.url}${path}`;
  const isWallet = routes_isWallet(location.pathname);
  const description = isWallet ? appOptions.meta.walletDescription : appOptions.meta.description;
  return external_react_["createElement"]("div", {
    className: classes.root
  }, external_react_["createElement"](external_react_helmet_default.a, {
    titleTemplate: `%s - ${title}`,
    defaultTitle: title
  }, external_react_["createElement"]("html", {
    lang: "en"
  }), external_react_["createElement"]("meta", {
    name: "application-name",
    content: appOptions.meta.name
  }), external_react_["createElement"]("meta", {
    name: "description",
    content: description
  }), external_react_["createElement"]("meta", {
    charSet: "utf-8"
  }), external_react_["createElement"]("meta", {
    httpEquiv: "X-UA-Compatible",
    content: "IE=edge"
  }), external_react_["createElement"]("meta", {
    name: "viewport",
    content: "width=device-width, initial-scale=1"
  }), external_react_["createElement"]("link", {
    rel: "apple-touch-icon",
    sizes: "180x180",
    href: "/apple-touch-icon.png"
  }), external_react_["createElement"]("link", {
    rel: "icon",
    type: "image/png",
    sizes: "32x32",
    href: "/favicon-32x32.png"
  }), external_react_["createElement"]("link", {
    rel: "icon",
    type: "image/png",
    sizes: "16x16",
    href: "/favicon-16x16.png"
  }), external_react_["createElement"]("link", {
    rel: "manifest",
    href: "/manifest.json"
  }), external_react_["createElement"]("link", {
    rel: "mask-icon",
    href: "/safari-pinned-tab.svg",
    color: theme.palette.primary[500]
  }), external_react_["createElement"]("meta", {
    name: "theme-color",
    content: theme.palette.secondary.light
  }), external_react_["createElement"]("link", {
    rel: "canonical",
    href: canonicalURL
  }), external_react_["createElement"]("script", {
    type: "application/ld+json"
  }, `{
            "@context": "http://schema.org",
            "@type": "WebSite",
            "name": "${appOptions.meta.name}",
            "url": "${canonicalURL}"
          }`)), external_react_["createElement"](appBar_AppBar, {
    isWallet: isWallet
  }), external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.content]: true,
      [classes.contentNormal]: true
    })
  }, external_react_["createElement"](advertising_Leaderboard, null), external_react_["createElement"]("div", {
    className: classes.contentInner
  }, children), external_react_["createElement"](appFooter_AppFooter, null)), external_react_["createElement"](snackbar_GlobalSnackbar, null));
}

const AppShell_enhance = Object(external_recompose_["compose"])(external_react_router_["withRouter"], withStyles(AppShell_styles, {
  withTheme: true
}), Object(external_recompose_["lifecycle"])({
  componentDidMount() {
    const jssStyles = document.getElementById('jss-server-side');

    if (jssStyles && jssStyles.parentNode) {
      jssStyles.parentNode.removeChild(jssStyles);
    }
  }

}), mapAppOptions, external_recompose_["pure"]);
/* harmony default export */ var AppShell = (AppShell_enhance(AppShell_App));
// EXTERNAL MODULE: external "@material-ui/core/LinearProgress"
var LinearProgress_ = __webpack_require__(274);
var LinearProgress_default = /*#__PURE__*/__webpack_require__.n(LinearProgress_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/LinearProgress.js

/* harmony default export */ var LinearProgress = (LinearProgress_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/logo/Logo.js





const Logo_styles = theme => ({
  root: {
    backgroundImage: "url('/public/logo.png')",
    backgroundSize: "contain",
    backgroundRepeat: "no-repeat",
    width: 64,
    height: 64
  }
});

function Logo({
  id,
  width,
  height,
  white,
  className,
  classes
}) {
  const a = `${id}a`;
  const b = `${id}b`;
  let defs;
  let g = external_react_["createElement"]("g", {
    fill: "none"
  }, external_react_["createElement"]("path", {
    stroke: "#FFFFFF",
    strokeWidth: ".265",
    fill: "#FFFFFF",
    d: "M9.596 9.367l13.428-4.873L13.806.05.61 4.99z"
  }), external_react_["createElement"]("path", {
    fill: "#FFFFFF",
    d: "M23.455 5.124l-9.715 3.38.033 10.047 9.582 4.546"
  }), external_react_["createElement"]("path", {
    fill: "#FFFFFF",
    d: "M9.264 9.997L.047 5.587l.066 17.838 9.184 4.443"
  }));

  if (!white) {
    defs = external_react_["createElement"]("defs", null, external_react_["createElement"]("linearGradient", {
      x1: "45.734%",
      y1: "-4.797%",
      x2: "45.392%",
      y2: "144.834%",
      id: a
    }, external_react_["createElement"]("stop", {
      stopColor: "#58BE23",
      offset: "0%"
    }), external_react_["createElement"]("stop", {
      stopColor: "#58BE23",
      stopOpacity: "0",
      offset: "100%"
    })), external_react_["createElement"]("linearGradient", {
      x1: "40.502%",
      y1: "1.637%",
      x2: "44.803%",
      y2: "114.732%",
      id: b
    }, external_react_["createElement"]("stop", {
      stopColor: "#58BE23",
      offset: "0%"
    }), external_react_["createElement"]("stop", {
      stopColor: "#58BE23",
      stopOpacity: "0",
      offset: "100%"
    })));
    g = external_react_["createElement"]("g", {
      fill: "none"
    }, external_react_["createElement"]("path", {
      stroke: "#58BE23",
      strokeWidth: ".265",
      fill: "#58BE23",
      d: "M9.596 9.367l13.428-4.873L13.806.05.61 4.99z"
    }), external_react_["createElement"]("path", {
      fill: `url(#${a})`,
      d: "M23.455 5.124l-9.715 3.38.033 10.047 9.582 4.546"
    }), external_react_["createElement"]("path", {
      fill: `url(#${b})`,
      d: "M9.264 9.997L.047 5.587l.066 17.838 9.184 4.443"
    }));
  }

  return (
    /*
        <svg
          className={className}
          width={`${width == null ? 24 : width}px`}
          height={`${height == null ? 28 : height}px`}
          viewBox="0 0 24 28"
          xmlns="http://www.w3.org/2000/svg"
        >
          {defs}
          {g}
        </svg>
    */
    external_react_["createElement"]("div", {
      className: external_classnames_default()(className, classes.root)
    })
  );
}

const Logo_enhance = Object(external_recompose_["compose"])(withStyles(Logo_styles), external_recompose_["pure"]);
/* harmony default export */ var logo_Logo = (Logo_enhance(Logo));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/loading/PageLoading.js






const PageLoading_styles = theme => ({
  [theme.breakpoints.down('md')]: {
    padding: {
      paddingTop: theme.spacing.unit * 2,
      paddingBottom: theme.spacing.unit * 2
    }
  },
  [theme.breakpoints.up('md')]: {
    padding: {
      paddingTop: theme.spacing.unit * 3,
      paddingBottom: theme.spacing.unit * 3
    }
  },
  root: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'center',
    flexDirection: 'column'
  },
  padding: {},
  progress: {
    marginTop: theme.spacing.unit * 2,
    width: theme.spacing.unit * 16
  }
});

function PageLoading({
  disablePadding,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className, {
      [classes.padding]: !disablePadding
    })
  }, external_react_["createElement"](logo_Logo, {
    id: "PageLoading",
    width: 48,
    height: 56
  }), external_react_["createElement"](LinearProgress, {
    className: classes.progress
  }));
}

const PageLoading_enhance = Object(external_recompose_["compose"])(withStyles(PageLoading_styles), external_recompose_["pure"]);
/* harmony default export */ var loading_PageLoading = (PageLoading_enhance(PageLoading));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/GenericLoadingPage.js




function GenericLoadingPage({
  className
}) {
  return external_react_["createElement"](loading_PageLoading, {
    className: className
  });
}

const GenericLoadingPage_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var pages_GenericLoadingPage = (GenericLoadingPage_enhance(GenericLoadingPage));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/AppServer.js





// eslint-disable-next-line
function AppServer(props) {
  return external_react_["createElement"](AppShell, null, external_react_["createElement"](pages_GenericLoadingPage, null));
}

const AppServer_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withContext"])({
  appContext: () => null
}, ({
  appContext
}) => ({
  appContext
})), external_recompose_["pure"]);
/* harmony default export */ var src_AppServer = (AppServer_enhance(AppServer));
// EXTERNAL MODULE: external "react-relay"
var external_react_relay_ = __webpack_require__(10);

// EXTERNAL MODULE: external "@material-ui/core/Grid"
var Grid_ = __webpack_require__(275);
var Grid_default = /*#__PURE__*/__webpack_require__.n(Grid_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Grid.js

/* harmony default export */ var Grid = (Grid_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Card"
var Card_ = __webpack_require__(276);
var Card_default = /*#__PURE__*/__webpack_require__.n(Card_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Card.js

/* harmony default export */ var Card = (Card_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/error/ErrorView.js






const ErrorView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center'
  },
  cardContainer: {
    maxWidth: 456
  },
  headline: {
    paddingBottom: theme.spacing.unit,
    paddingTop: theme.spacing.unit
  },
  retryArea: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'center',
    flexDirection: 'column'
  },
  reloadButton: {
    marginTop: theme.spacing.unit
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function ErrorView({
  retry,
  allowRetry,
  className,
  classes
}) {
  let content;

  if (allowRetry && retry != null) {
    content = external_react_["createElement"]("div", {
      className: classes.retryArea
    }, external_react_["createElement"](Typography, {
      variant: "subheading"
    }, "Try going back to where you were, refreshing the page, or clicking reload below."), external_react_["createElement"](Button, {
      className: classes.reloadButton,
      onClick: retry,
      variant: "raised",
      color: "primary"
    }, external_react_["createElement"](Typography, {
      className: classes.buttonText,
      variant: "body1"
    }, "RELOAD")));
  } else {
    content = external_react_["createElement"](Typography, {
      variant: "subheading"
    }, "Try going back to where you were or refreshing the page.");
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className)
  }, external_react_["createElement"](logo_Logo, {
    id: "ErrorView",
    width: 48,
    height: 56
  }), external_react_["createElement"](Typography, {
    variant: "headline",
    className: classes.headline
  }, "Something went wrong!"), content);
}

const ErrorView_enhance = Object(external_recompose_["compose"])(withStyles(ErrorView_styles), external_recompose_["pure"]);
/* harmony default export */ var error_ErrorView = (ErrorView_enhance(ErrorView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/error/PageError.js






const PageError_styles = theme => ({
  [theme.breakpoints.down('md')]: {
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('md')]: {
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    margin: 0,
    width: '100%'
  },
  cardContainer: {
    maxWidth: 456
  }
});

function PageError({
  error,
  retry,
  allowRetry,
  className,
  classes
}) {
  return external_react_["createElement"](Grid, {
    className: external_classnames_default()(classes.root, className),
    container: true,
    justify: "center",
    spacing: 16
  }, external_react_["createElement"](Grid, {
    className: classes.cardContainer,
    item: true,
    xs: 12,
    sm: 8
  }, external_react_["createElement"](Card, null, external_react_["createElement"](error_ErrorView, {
    error: error,
    retry: retry,
    allowRetry: !!allowRetry
  }))));
}

const PageError_enhance = Object(external_recompose_["compose"])(withStyles(PageError_styles), external_recompose_["pure"]);
/* harmony default export */ var error_PageError = (PageError_enhance(PageError));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/link/Link.js






const Link_styles = theme => ({
  commonLink: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap'
  },
  link: {
    color: '#102C87',
    fontWeight: theme.typography.fontWeightRegular,
    textDecoration: 'none',
    '&:hover': {
      // color: theme.palette.primary[700],
      textDecoration: 'underline'
    }
  },
  linkWhite: {
    color: theme.custom.colors.common.white,
    fontWeight: theme.typography.fontWeightRegular,
    textDecoration: 'underline',
    '&:hover': {
      color: theme.custom.colors.common.darkWhite,
      textDecoration: 'underline'
    }
  }
});

function Link({
  path,
  title,
  variant: variantIn,
  component,
  white,
  absolute,
  newTab,
  onClick,
  className,
  classes
}) {
  const variant = variantIn || 'body1';
  const classNameLink = external_classnames_default()({
    [classes.link]: !white,
    [classes.linkWhite]: !!white
  }, classes.commonLink);
  let linkText;

  if (typeof title === 'string') {
    linkText = external_react_["createElement"](Typography, {
      variant: variant,
      component: component,
      className: external_classnames_default()(classNameLink, className)
    }, title);
  } else {
    linkText = external_react_["cloneElement"](title, { ...title.props,
      className: external_classnames_default()(classNameLink, className, title.props.className)
    }, title.props.children);
  }

  if (absolute || path.startsWith('http') || newTab) {
    return external_react_["createElement"]("a", {
      className: classNameLink,
      href: path,
      target: newTab ? '_blank' : undefined,
      onClick: onClick
    }, linkText);
  }

  return external_react_["createElement"](external_react_router_dom_["Link"], {
    className: classNameLink,
    to: path,
    onClick: onClick
  }, linkText);
}

const Link_enhance = Object(external_recompose_["compose"])(withStyles(Link_styles), external_recompose_["pure"]);
/* harmony default export */ var link_Link = (Link_enhance(Link));
// EXTERNAL MODULE: external "locale2"
var external_locale2_ = __webpack_require__(278);
var external_locale2_default = /*#__PURE__*/__webpack_require__.n(external_locale2_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/localeID.js
/* eslint-disable */
 // http://userguide.icu-project.org/locale

function parse(locale) {
  if (!locale) {
    return void 0;
  } // extract keyword


  const stringLocale = String(locale);
  const keywordPos = stringLocale.indexOf('@');
  const keyword = keywordPos !== -1 ? stringLocale.substr(keywordPos + 1) : void 0;
  const localeWithoutKeyword = keywordPos !== -1 ? stringLocale.substr(0, keywordPos) : stringLocale; // en-us => en_us

  const parts = String(localeWithoutKeyword).replace(/-/g, '_').split('_');

  if (!parts.length || parts.length > 4) {
    return void 0;
  }

  const language = parts.shift();

  if (!language) {
    return void 0;
  }

  const retVar = {
    keyword,
    language: language.toLowerCase()
  };

  if (!parts.length) {
    return retVar;
  }

  if (parts.length === 3) {
    const variant = parts.pop();

    if (variant) {
      retVar.variant = variant.toUpperCase();
    }
  }

  let country = parts.pop();

  if (country.length > 3) {
    retVar.keyword = country;
    country = parts.pop();
  }

  if (country) {
    retVar.country = country.toUpperCase();
  }

  if (!parts.length) {
    return retVar;
  }

  const script = parts.pop();

  if (script) {
    retVar.script = external_lodash_default.a.capitalize(script.toLowerCase());
  }

  return retVar;
}
function getLanguage(locale) {
  const obj = parse(locale);
  return obj ? obj.language : void 0;
}
function getCountry(locale) {
  const obj = parse(locale);
  return obj ? obj.country : void 0;
}
function getScript(locale) {
  const obj = parse(locale);
  return obj ? obj.script : void 0;
}
function getVariant(locale) {
  const obj = parse(locale);
  return obj ? obj.variant : void 0;
}
function getKeyword(locale) {
  const obj = parse(locale);
  return obj ? obj.keyword : void 0;
}
function normalize(locale, delimeter = '_') {
  const obj = parse(locale);

  if (!obj) {
    return obj;
  }

  let result = obj.language;

  if (obj.script) {
    result += `${delimeter}${obj.script}`;
  }

  if (obj.country) {
    result += `${delimeter}${obj.country}`;
  }

  return result;
}
const splitAcceptLanguageRegEx = /([a-z]{1,8}(-[a-z]{1,8})?)\s*(;\s*q\s*=\s*(1|0\.[0-9]+))?/gi;
const acceptLanguageItemRegEx = /^([a-z]{1,8}(-[a-z]{1,8})?)/i;
function normalizeAcceptLanguage(acceptLanguage) {
  const returnItems = [];

  if (!acceptLanguage) {
    return returnItems;
  }

  const items = acceptLanguage.match(splitAcceptLanguageRegEx) || [];

  external_lodash_default.a.forEach(items, acceptLanguageItem => {
    const matches = acceptLanguageItem.match(acceptLanguageItemRegEx) || [];
    const locale = normalize(matches[0]);

    if (locale) {
      returnItems.push(locale);
    }
  });

  return returnItems;
}
function prepareSupported(supported) {
  const lgs = {};

  external_lodash_default.a.forEach(supported, supportedLocale => {
    const {
      language,
      country
    } = parse(supportedLocale);

    if (!language) {
      throw new Error(`Locale ${supportedLocale} is not parsable`);
    }

    if (!lgs[language]) {
      lgs[language] = {
        countries: {},
        firstCountry: void 0,
        main: void 0
      };
    }

    const lg = lgs[language];

    if (country) {
      lg.countries[country] = supportedLocale;

      if (!lg.firstCountry) {
        lg.firstCountry = supportedLocale;
      }
    } else {
      lg.main = supportedLocale;
    }
  });

  return lgs;
}
function getBest(supported, locale, defaultLocale, getAnyCountry) {
  const lgs = external_lodash_default.a.isArray(supported) ? prepareSupported(supported) : supported; // return defaultLocale if current locale is undefined

  if (!locale && defaultLocale) {
    return getBest(supported, defaultLocale, void 0, getAnyCountry);
  }

  if (!locale) {
    return void 0;
  }

  const {
    language,
    country
  } = parse(locale);

  if (!language) {
    return defaultLocale;
  } // selected locale is not supported


  if (!lgs[language]) {
    if (locale === defaultLocale) {
      return void 0;
    }

    return getBest(supported, defaultLocale, null, getAnyCountry);
  }

  const {
    countries,
    main = defaultLocale,
    firstCountry
  } = lgs[language];

  if (!countries || !country) {
    if (getAnyCountry && firstCountry) {
      return firstCountry;
    }

    return main;
  }

  if (getAnyCountry && firstCountry) {
    return countries[country] ? countries[country] : firstCountry;
  }

  return countries[country] ? countries[country] : main;
}
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/lib/getName.js
// $FlowFixMe



const NAME_MAP = {
  [constants["d" /* NEO_ASSET_HASH */]]: 'CRONIUM',
  [constants["a" /* GAS_ASSET_HASH */]]: 'CRON'
};

const getName = (name, lang) => {
  const nameObj = name.find(n => n.lang === lang);
  return nameObj == null ? null : nameObj.name;
};

const parseSymbol = symbol => {
  try {
    return JSON.parse(symbol);
  } catch (error) {
    return symbol;
  }
}; // TODO: INTL


/* harmony default export */ var lib_getName = ((symbol, hash) => {
  let name = symbol;

  if (typeof name === 'string') {
    name = parseSymbol(name);
  }

  let finalName = NAME_MAP[hash];

  if (finalName == null && typeof name === 'string') {
    finalName = name;
  } else if (finalName == null && typeof name !== 'string') {
    const langs = name.map(n => n.lang);
    const lang = getBest(langs, external_locale2_default.a);

    if (lang == null) {
      const enLang = getBest(langs, 'en');

      if (enLang != null) {
        finalName = getName(name, enLang);
      }
    } else {
      finalName = getName(name, lang);
    }

    if (finalName == null) {
      if (name.length > 0) {
        finalName = name[0].name;
      } else {
        finalName = hash;
      }
    }
  }

  return finalName;
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/getID.js
const getID_getID = id => id.split(':').slice(1).join(':');
const getNumericID = id => parseInt(getID_getID(id), 10);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/lib/AssetNameLinkBase.js







function AssetNameLinkBase({
  asset,
  variant: variantIn,
  component,
  className
}) {
  const variant = variantIn == null ? 'body1' : variantIn;
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: variant,
    component: component,
    path: makeAsset(getID_getID(asset.id)),
    title: lib_getName(asset.symbol, getID_getID(asset.id))
  });
}

const AssetNameLinkBase_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_AssetNameLinkBase = (AssetNameLinkBase_enhance(AssetNameLinkBase));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/fragmentContainer.js




let fragmentContainer; // flowlint-next-line sketchy-null-string:off

if (true) {
  fragmentContainer = fragments => {
    const fragmentSpec = {};

    for (const [key, fragment] of Object.entries(fragments)) {
      fragmentSpec[key] = Object(external_relay_runtime_["getFragment"])(fragment);
    }

    return Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
      relay: () => null
    }), Object(external_recompose_["withProps"])(props => {
      const selectors = Object(external_relay_runtime_["getSelectorsFromObject"])(props.relay, fragmentSpec, props);
      return Object.entries(selectors).reduce((res, [key, selector]) => {
        if (Array.isArray(selector)) {
          res[key] = selector.map(sel => props.relay.environment.lookup(sel).data);
        } else if (selector == null) {
          if (Array.isArray(props[key])) {
            res[key] = [];
          } else {
            res[key] = null;
          }
        } else {
          res[key] = props.relay.environment.lookup(selector).data;
        }

        return res;
      }, {});
    }));
  };
} else {}

const fragmentContainerExport = fragmentContainer;
/* harmony default export */ var relay_fragmentContainer = (fragmentContainerExport);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/formatNumber.js

/* harmony default export */ var formatNumber = ((number, optionsIn) => {
  const options = optionsIn || {};
  const value = new external_bignumber_js_default.a(number);
  const decimalPlaces = options.decimalPlaces == null ? value.decimalPlaces() : options.decimalPlaces;
  return value.toFormat(decimalPlaces);
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/CoinValue.js





function CoinValue({
  value,
  variant: variantIn,
  component,
  className
}) {
  const variant = variantIn == null ? 'body1' : variantIn;
  return external_react_["createElement"](Typography, {
    className: className,
    variant: variant,
    component: component
  }, formatNumber(value));
}

const CoinValue_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_CoinValue = (CoinValue_enhance(CoinValue));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/getSortedCoins.js




/* harmony default export */ var getSortedCoins = (coins => {
  let result = external_lodash_default.a.partition(coins, coin => getID_getID(coin.asset.id) === constants["d" /* NEO_ASSET_HASH */]);

  let neoCoin = null;

  if (result[0].length > 0) {
    // eslint-disable-next-line
    neoCoin = result[0][0];
  } else {
    neoCoin = {
      value: '0',
      asset: constants["g" /* NEO_COIN_ASSET */]
    };
  }

  result = external_lodash_default.a.partition(result[1], coin => getID_getID(coin.asset.id) === constants["a" /* GAS_ASSET_HASH */]);
  let gasCoin = null;

  if (result[0].length > 0) {
    // eslint-disable-next-line
    gasCoin = result[0][0];
  } else {
    gasCoin = {
      value: '0',
      asset: constants["c" /* GAS_COIN_ASSET */]
    };
  }

  const sortedResult = result[1].sort((x, y) => {
    const xNumber = new external_bignumber_js_default.a(x.value);
    const yNumber = new external_bignumber_js_default.a(y.value);

    if (xNumber.lt(yNumber)) {
      return -1;
    }

    if (xNumber.gt(yNumber)) {
      return 1;
    }

    return 0;
  });
  return [neoCoin, gasCoin].concat(sortedResult).filter(Boolean);
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/CoinTable.js
/* eslint-disable react/no-array-index-key */










const CoinTable_styles = theme => ({
  root: {
    display: 'flex'
  },
  firstCol: {
    display: 'flex',
    flexDirection: 'column',
    marginRight: theme.spacing.unit
  },
  secondCol: {
    display: 'flex',
    flexDirection: 'column'
  },
  value: {
    textAlign: 'right'
  }
});

const COIN_TABLE_ROW_HEIGHT = 20;

function CoinTable({
  coins,
  variant,
  component,
  textClassName,
  className,
  classes
}) {
  const sortedCoins = getSortedCoins(coins);
  const values = [];
  const assets = [];
  sortedCoins.forEach((coin, idx) => {
    values.push(external_react_["createElement"](lib_CoinValue, {
      key: idx,
      className: external_classnames_default()(classes.value, textClassName),
      variant: variant,
      component: component,
      value: coin.value
    }));
    assets.push(external_react_["createElement"](lib_AssetNameLinkBase, {
      key: idx,
      variant: variant,
      component: component,
      asset: coin.asset
    }));
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.firstCol
  }, values), external_react_["createElement"]("div", {
    className: classes.secondCol
  }, assets));
}

const CoinTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  coins: function () {
    const node = __webpack_require__(158);

    if (node.hash && node.hash !== "5f37ed94f05475d317875207c85ed7c2") {
      console.error("The definition of 'CoinTable_coins' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(158);
  }
}), withStyles(CoinTable_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_CoinTable = (CoinTable_enhance(CoinTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/constants.js
// $FlowFixMe
 // eslint-disable-next-line

const ZERO_GAS_COIN = {
  value: '0',
  asset: {
    id: constants["a" /* GAS_ASSET_HASH */],
    symbol: 'CRON'
  }
};
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/CoinBase.js







const CoinBase_styles = theme => ({
  coinValue: {
    display: 'flex'
  },
  value: {
    marginRight: theme.spacing.unit / 2
  }
});

function CoinBase({
  coin,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.coinValue, className)
  }, external_react_["createElement"](lib_CoinValue, {
    className: classes.value,
    value: coin.value
  }), external_react_["createElement"](lib_AssetNameLinkBase, {
    asset: coin.asset
  }));
}

const CoinBase_enhance = Object(external_recompose_["compose"])(withStyles(CoinBase_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_CoinBase = (CoinBase_enhance(CoinBase));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/Coin.js






function Coin_Coin({
  coin,
  className
}) {
  return external_react_["createElement"](lib_CoinBase, {
    className: className,
    coin: coin
  });
}

const Coin_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  coin: function () {
    const node = __webpack_require__(162);

    if (node.hash && node.hash !== "7691f2ac39f1a671f2314d1d44270415") {
      console.error("The definition of 'Coin_coin' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(162);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_Coin = (Coin_enhance(Coin_Coin));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/layout/CenteredView.js





const CenteredView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    margin: 0,
    width: '100%'
  },
  col: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    maxWidth: 1200,
    width: '100%'
  },
  gridItem: {
    display: 'flex',
    justifyContent: 'center'
  }
});

function CenteredView({
  children,
  className,
  classes
}) {
  return external_react_["createElement"](Grid, {
    className: external_classnames_default()(className, classes.root),
    container: true,
    spacing: 0,
    justify: "center"
  }, external_react_["createElement"](Grid, {
    className: classes.gridItem,
    item: true,
    xs: 12,
    sm: 12,
    md: 10
  }, external_react_["createElement"]("div", {
    className: classes.col
  }, children)));
}

const CenteredView_enhance = Object(external_recompose_["compose"])(withStyles(CenteredView_styles), external_recompose_["pure"]);
/* harmony default export */ var layout_CenteredView = (CenteredView_enhance(CenteredView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/PageViewHeader.js







const PageViewHeader_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    },
    leftHeader: {
      marginBottom: theme.spacing.unit,
      marginRight: theme.spacing.unit
    },
    rightHeader: {
      marginBottom: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2
    },
    leftHeader: {
      marginBottom: theme.spacing.unit * 2,
      marginRight: theme.spacing.unit * 2
    },
    rightHeader: {
      marginBottom: theme.spacing.unit * 2
    }
  },
  [theme.breakpoints.down('md')]: {
    root: {
      flexWrap: 'wrap'
    }
  },
  [theme.breakpoints.up('md')]: {
    root: {
      flexWrap: 'nowrap'
    }
  },
  root: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'space-between',
    backgroundColor: 'rgba(255, 255, 255, 0.85)'
  },
  leftHeader: {
    alignItems: 'center',
    display: 'flex',
    flex: '0 1 auto',
    minWidth: '0'
  },
  rightHeader: {
    alignItems: 'center',
    display: 'flex'
  },
  static: {
    overflow: 'initial'
  },
  margin: {
    marginRight: theme.spacing.unit
  },
  text: {
    color: '#001E7F'
  },
  link: {
    color: '#001E7F',
    textDecoration: 'underline',
    '&:hover': {
      opacity: 0.8
    }
  },
  linkSelected: {
    color: '#001E7F',
    opacity: 0.8,
    textDecoration: 'underline'
  },
  backgroundColor: {
    backgroundColor: theme.palette.primary[500]
  },
  id: {
    flex: '0 1 auto',
    minWidth: '0',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
});

// TODO: INTL
function PageViewHeader({
  id,
  title,
  name,
  pluralName,
  searchRoute,
  icon,
  backgroundColorClassName,
  className,
  classes
}) {
  const breadcrumbVariant = 'body1';
  const slash = external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.text, classes.margin, classes.static),
    variant: breadcrumbVariant
  }, "/"); // let iconElement = null;
  // if (icon != null) {
  //   iconElement = (
  //     <Icon className={classNames(classes.margin, classes.text)}>{icon}</Icon>
  //   );
  // }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className, backgroundColorClassName == null ? classes.backgroundColor : backgroundColorClassName)
  }, external_react_["createElement"]("div", {
    className: classes.leftHeader
  }, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.margin, classes.text),
    component: "h1",
    variant: "title"
  }, title), external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.text, classes.id),
    variant: "body2"
  }, id)), external_react_["createElement"]("div", {
    className: classes.rightHeader
  }, external_react_["createElement"](link_Link, {
    className: external_classnames_default()(classes.link, classes.margin, classes.static),
    variant: breadcrumbVariant,
    path: HOME,
    title: "Home"
  }), slash, external_react_["createElement"](link_Link, {
    className: external_classnames_default()(classes.link, classes.margin, classes.static),
    variant: breadcrumbVariant,
    path: searchRoute,
    title: pluralName
  }), slash, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.linkSelected, classes.static),
    variant: breadcrumbVariant
  }, name)));
}

const PageViewHeader_enhance = Object(external_recompose_["compose"])(withStyles(PageViewHeader_styles), external_recompose_["pure"]);
/* harmony default export */ var view_PageViewHeader = (PageViewHeader_enhance(PageViewHeader));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/TableView.js





const TableView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    firstColRow: {
      paddingRight: theme.spacing.unit
    },
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    firstColRow: {
      paddingRight: theme.spacing.unit * 2
    },
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    display: 'flex'
  },
  col: {
    display: 'flex',
    flexDirection: 'column'
  },
  firstCol: {
    flex: '0 0 auto'
  },
  secondCol: {
    flex: '1 1 auto',
    minWidth: '0'
  },
  label: {
    fontWeight: theme.typography.fontWeightMedium
  },
  firstColRow: {},
  firstRow: {
    paddingBottom: theme.spacing.unit / 2
  },
  row: {
    paddingBottom: theme.spacing.unit / 2,
    paddingTop: theme.spacing.unit / 2
  },
  rowBorder: {
    borderTop: `1px solid ${theme.custom.lightDivider}`
  },
  lastRow: {
    paddingTop: theme.spacing.unit / 2
  },
  text: {
    minWidth: '0',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  baseRow: {
    minHeight: theme.spacing.unit * 3,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
});

function TableView({
  columns,
  className,
  classes
}) {
  const wrapRow = (element, idx, height, firstCol) => external_react_["createElement"]("div", {
    key: idx,
    className: external_classnames_default()({
      [classes.firstColRow]: !!firstCol,
      [classes.firstRow]: idx === 0,
      [classes.row]: idx !== 0 && idx !== columns.length - 1,
      [classes.rowBorder]: idx !== 0,
      [classes.lastRow]: idx === columns.length - 1,
      [classes.baseRow]: true
    }),
    style: height == null ? undefined : {
      height
    }
  }, typeof element === 'string' ? external_react_["createElement"](Typography, {
    key: "hash",
    className: classes.text,
    variant: "body1"
  }, element) : element);

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.firstCol)
  }, columns.map((column, idx) => wrapRow(external_react_["createElement"](Typography, {
    key: column[0],
    className: classes.label,
    variant: "body1"
  }, column[0]), idx, // $FlowFixMe
  column.length === 3 ? column[2] : null, true))), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.secondCol)
  }, columns.map((column, idx) => wrapRow(column[1], idx, // $FlowFixMe
  column.length === 3 ? column[2] : null))));
}

const TableView_enhance = Object(external_recompose_["compose"])(withStyles(TableView_styles), external_recompose_["pure"]);
/* harmony default export */ var view_TableView = (TableView_enhance(TableView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/PageView.js







function PageView({
  id,
  title,
  name,
  pluralName,
  searchRoute,
  headerIcon,
  headerBackgroundColorClassName,
  bodyColumns,
  extraCard,
  extra,
  className
}) {
  return external_react_["createElement"](layout_CenteredView, {
    className: className
  }, external_react_["createElement"](Card, {
    className: "table-2level"
  }, external_react_["createElement"](view_PageViewHeader, {
    id: id,
    title: title,
    name: name,
    pluralName: pluralName,
    searchRoute: searchRoute,
    icon: headerIcon,
    backgroundColorClassName: headerBackgroundColorClassName
  }), external_react_["createElement"](view_TableView, {
    columns: bodyColumns
  }), extraCard), extra);
}

const PageView_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var view_PageView = (PageView_enhance(PageView));
// EXTERNAL MODULE: external "timeago.js"
var external_timeago_js_ = __webpack_require__(277);
var external_timeago_js_default = /*#__PURE__*/__webpack_require__.n(external_timeago_js_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/formatTime.js

const TWO_DAYS_MS = 2 * 24 * 60 * 60 * 1000;
/* harmony default export */ var formatTime = (time => {
  let value;
  const timeMS = time * 1000;

  if (Date.now() - timeMS > TWO_DAYS_MS) {
    value = new Date(timeMS).toLocaleString();
  } else {
    value = external_timeago_js_default()().format(timeMS);
  }

  return value;
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/timeago/TimeAgo.js







function TimeAgo({
  time,
  nullString,
  state,
  dispatch,
  prefix,
  ...otherProps
}) {
  let value;

  if (time == null) {
    value = nullString;
  } else {
    value = formatTime(time);
  }

  if (prefix != null) {
    value = `${prefix}${value || ''}`;
  }

  return external_react_["createElement"](Typography, otherProps, value);
}

const TimeAgo_enhance = Object(external_recompose_["compose"])(Object(external_react_redux_["connect"])(state => ({
  state: redux_selectTimerState(state)
})), external_recompose_["pure"]);
/* harmony default export */ var timeago_TimeAgo = (TimeAgo_enhance(TimeAgo));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/lib/BlockTime.js






const BlockTime_styles = () => ({
  root: {
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
});

function BlockTime({
  blockTime,
  className,
  classes
}) {
  return external_react_["createElement"](timeago_TimeAgo, {
    className: external_classnames_default()(className, classes.root),
    variant: "body1",
    time: blockTime,
    nullString: "Pending"
  });
}

const BlockTime_enhance = Object(external_recompose_["compose"])(withStyles(BlockTime_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_BlockTime = (BlockTime_enhance(BlockTime));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionTimeLink.js






function TransactionTimeLink({
  transactionHash,
  blockTime,
  className
}) {
  const title = external_react_["createElement"](lib_BlockTime, {
    blockTime: blockTime
  });

  if (transactionHash == null) {
    return title;
  }

  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: makeTransaction(transactionHash),
    title: title
  });
}

const TransactionTimeLink_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionTimeLink = (TransactionTimeLink_enhance(TransactionTimeLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/metrics.js
// $FlowFixMe


const NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_private_key_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_private_key_failures_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_password_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_password_failures_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_keystore_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_FAILURES_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_new_flow_keystore_failures_total',
  labelNames: [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]
});
const NEOTRACKER_WALLET_UPSELL_CLICK_TOTAL = monitor_["metrics"].createCounter({
  name: 'neotracker_wallet_upsell_click_total',
  labelNames: [src_labels["a" /* labels */].CLICK_SOURCE]
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/upsell/WalletPageUpsell.js

 // $FlowFixMe







const WalletPageUpsell_styles = () => ({
  inline: {
    display: 'inline'
  }
});

function WalletPageUpsell({
  className,
  onClick,
  classes
}) {
  return external_react_["createElement"](Typography, {
    className: className
  }, `Claim CRON, transfer CRONIUM, CRON or other tokens and more with `, external_react_["createElement"](link_Link, {
    className: classes.inline,
    path: WALLET_HOME,
    onClick: onClick,
    title: "CRON Tracker Wallet",
    component: "span"
  }));
}

const WalletPageUpsell_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withHandlers"])({
  onClick: ({
    source,
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CLICK_SOURCE]: source
    }).log({
      name: 'neotracker_wallet_upsell_click',
      level: 'verbose',
      metric: NEOTRACKER_WALLET_UPSELL_CLICK_TOTAL
    });
  }
}), withStyles(WalletPageUpsell_styles), external_recompose_["pure"]);
/* harmony default export */ var upsell_WalletPageUpsell = (WalletPageUpsell_enhance(WalletPageUpsell));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/animated/Chevron.js





const Chevron_styles = theme => ({
  chevron: {
    cursor: 'pointer',
    transition: theme.transitions.create(['transform'])
  },
  chevronUp: {
    transform: 'rotate(0deg)'
  },
  chevronDown: {
    transform: 'rotate(180deg)'
  }
});

function Chevron({
  up,
  className,
  classes,
  ...otherProps
}) {
  return external_react_["createElement"]("i", {
    className: external_classnames_default()({
      [classes.chevron]: true,
      [classes.chevronUp]: up,
      [classes.chevronDown]: !up
    }, className)
  }, external_react_["createElement"]("svg", {
    width: "15",
    height: "8",
    viewBox: "0 0 15 8",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, external_react_["createElement"]("path", {
    d: "M14 1L7.5 7L1 1H13.5938",
    stroke: "#3CBFEF",
    "stroke-width": "1.5",
    "stroke-linecap": "round",
    "stroke-linejoin": "round"
  })));
}

/* harmony default export */ var animated_Chevron = (Object(external_recompose_["hoistStatics"])(Object(external_recompose_["compose"])(withStyles(Chevron_styles), external_recompose_["pure"]))(Chevron));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/card/ExpandoCard.js






const ExpandoCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      marginTop: theme.spacing.unit
    },
    padding: {
      paddingBottom: theme.spacing.unit,
      paddingTop: theme.spacing.unit,
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      marginTop: theme.spacing.unit * 2
    },
    padding: {
      paddingBottom: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2,
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    }
  },
  root: {},
  header: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'space-between',
    cursor: 'pointer'
  },
  content: {
    borderTop: `1px solid ${theme.custom.lightDivider}`
  },
  padding: {},
  // TODO: Keep in sync with TransactionSummaryHeader and/or extract out
  chevronButton: {
    width: theme.spacing.unit * 5,
    height: theme.spacing.unit * 5,
    marginBottom: -theme.spacing.unit,
    marginRight: -theme.spacing.unit,
    marginTop: -theme.spacing.unit
  }
});

function ExpandoCard({
  title,
  content,
  className,
  showContent,
  onShowContent,
  onHideContent,
  classes
}) {
  const onClickChevron = showContent ? onHideContent : onShowContent;
  return external_react_["createElement"](Card, {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    role: "presentation",
    className: external_classnames_default()(classes.header, classes.padding),
    onClick: onClickChevron
  }, external_react_["createElement"](Typography, {
    variant: "title"
  }, title), external_react_["createElement"](IconButton, {
    className: classes.chevronButton,
    onClick: onClickChevron
  }, external_react_["createElement"](animated_Chevron, {
    up: !showContent
  }))), external_react_["createElement"](Collapse, {
    in: showContent,
    timeout: "auto"
  }, external_react_["createElement"]("div", {
    className: classes.content
  }, content)));
}

const ExpandoCard_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', ({
  initialShowContent
}) => ({
  showContent: initialShowContent || false
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onShowContent: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showContent: true
  })),
  onHideContent: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showContent: false
  }))
}), withStyles(ExpandoCard_styles), external_recompose_["pure"]);
/* harmony default export */ var card_ExpandoCard = (ExpandoCard_enhance(ExpandoCard));
// EXTERNAL MODULE: external "react-lifecycles-compat"
var external_react_lifecycles_compat_ = __webpack_require__(280);

// EXTERNAL MODULE: external "relay-runtime/lib/deferrableFragmentKey"
var deferrableFragmentKey_ = __webpack_require__(281);
var deferrableFragmentKey_default = /*#__PURE__*/__webpack_require__.n(deferrableFragmentKey_);

// EXTERNAL MODULE: external "relay-runtime/lib/RelayConcreteVariables"
var RelayConcreteVariables_ = __webpack_require__(282);

// EXTERNAL MODULE: external "relay-runtime/lib/RelayModernOperationSelector"
var RelayModernOperationSelector_ = __webpack_require__(283);

// EXTERNAL MODULE: external "relay-runtime/lib/normalizeRelayPayload"
var normalizeRelayPayload_ = __webpack_require__(284);
var normalizeRelayPayload_default = /*#__PURE__*/__webpack_require__.n(normalizeRelayPayload_);

// EXTERNAL MODULE: external "relay-runtime/lib/RelayError"
var RelayError_ = __webpack_require__(285);
var RelayError_default = /*#__PURE__*/__webpack_require__.n(RelayError_);

// EXTERNAL MODULE: external "relay-runtime/lib/RelayStoreUtils"
var RelayStoreUtils_ = __webpack_require__(286);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/normalizePayload.js



function normalizePayload(payload) {
  const {
    operation,
    variables,
    response
  } = payload;
  const {
    data,
    errors
  } = response;

  if (data != null) {
    return normalizeRelayPayload_default()({
      dataID: RelayStoreUtils_["ROOT_ID"],
      node: operation,
      variables
    }, data, errors, {
      handleStrippedNulls: false
    });
  }

  const error = RelayError_default.a.create('RelayNetwork', 'No data returned for operation `%s`, got error(s):\n%s\n\nSee the error ' + '`source` property for more information.', operation.name, errors ? errors.map(({
    message
  }) => message).join('\n') : '(No errors)');
  error.source = {
    errors,
    operation,
    variables
  };
  throw error;
}
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/executeOperation.js




/* harmony default export */ var executeOperation = (({
  environment,
  operation,
  monitor,
  cacheConfig,
  updater
}) => {
  let optimisticResponse;
  return environment.getNetwork().execute(operation.node, operation.variables, { ...(cacheConfig || {}),
    monitor
  }).do({
    next: executePayload => {
      const responsePayload = normalizePayload(executePayload);
      const {
        source,
        fieldPayloads,
        deferrableSelections
      } = responsePayload;

      for (const selectionKey of deferrableSelections || new Set()) {
        environment._deferrableSelections.add(selectionKey);
      }

      if (executePayload.isOptimistic) {
        if (optimisticResponse != null) {
          throw new Error('environment.execute: only support one optimistic respnose per ' + 'execute.');
        }

        optimisticResponse = {
          source,
          fieldPayloads
        };

        environment._publishQueue.applyUpdate(optimisticResponse);

        environment._publishQueue.run();
      } else {
        if (optimisticResponse) {
          environment._publishQueue.revertUpdate(optimisticResponse);

          optimisticResponse = undefined;
        }

        const writeSelector = Object(RelayModernOperationSelector_["createOperationSelector"])(operation.node, executePayload.variables || {}, executePayload.operation);

        if (executePayload.operation.kind === 'DeferrableOperation') {
          const fragmentKey = deferrableFragmentKey_default()(executePayload.variables[executePayload.operation.rootFieldVariable], executePayload.operation.fragmentName, Object(RelayConcreteVariables_["getOperationVariables"])(executePayload.operation, executePayload.variables));

          environment._deferrableSelections.delete(fragmentKey);
        }

        environment._publishQueue.commitPayload(writeSelector, responsePayload, updater);

        environment._publishQueue.run();
      }
    }
  }).finally(() => {
    if (optimisticResponse) {
      environment._publishQueue.revertUpdate(optimisticResponse);

      optimisticResponse = undefined;

      environment._publishQueue.run();
    }
  });
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/QueryFetcher.js
function QueryFetcher_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// $FlowFixMe


const NETWORK_ONLY = 'NETWORK_ONLY';
const STORE_THEN_NETWORK = 'STORE_THEN_NETWORK';
const DataFromEnum = {
  NETWORK_ONLY,
  STORE_THEN_NETWORK
};
class QueryFetcher_QueryFetcher {
  constructor() {
    QueryFetcher_defineProperty(this, "_cacheReference", void 0);

    QueryFetcher_defineProperty(this, "_fetchOptions", void 0);

    QueryFetcher_defineProperty(this, "_pendingRequest", void 0);

    QueryFetcher_defineProperty(this, "_rootSubscription", void 0);

    QueryFetcher_defineProperty(this, "_selectionReferences", []);

    QueryFetcher_defineProperty(this, "_snapshot", void 0);
  }

  // results of the root fragment;

  /**
   * `fetch` fetches the data for the given operation.
   * If a result is immediately available synchronously, it will be synchronously
   * returned by this function.
   *
   * Otherwise, the fetched result will be communicated via the `onDataChange` callback.
   * `onDataChange` will be called with the first result (**if it wasn't returned synchronously**),
   * and then subsequently whenever the data changes.
   */
  fetch(fetchOptions) {
    const queryID = fetchOptions.operation.node.id;
    this._fetchOptions = { ...fetchOptions,
      monitor: fetchOptions.monitor.at('query_fetcher').withLabels({
        [src_labels["a" /* labels */].GRAPHQL_QUERY]: queryID
      }).withData({
        [src_labels["a" /* labels */].GRAPHQL_VARIABLES]: fetchOptions.operation.variables
      })
    };
    const {
      cacheConfig = {},
      dataFrom = STORE_THEN_NETWORK,
      environment,
      onDataChange,
      operation,
      monitor
    } = this._fetchOptions;
    const {
      createOperationSelector
    } = environment.unstable_internal;
    const nextReferences = [];
    let fetchHasReturned = false;
    let error;

    this._disposeRequest(); // Check if we can fulfill this query with data already available in memory,
    // and immediatly return data if so


    if (dataFrom === STORE_THEN_NETWORK && environment.check(operation.root)) {
      this._cacheReference = environment.retain(operation.root); // Don't notify the first result because it will be returned synchronously

      this._onQueryDataAvailable({
        notifyFirstResult: false
      });
    }

    let span = monitor.startSpan({
      name: 'execute_operation_first_full_response'
    });

    const logPayload = err => {
      (span || monitor).log({
        name: 'relay_execute_operation',
        level: 'verbose',
        error: {
          error: err
        }
      });
    };

    const request = executeOperation({
      environment,
      operation,
      monitor,
      cacheConfig
    }).finally(() => {
      this._pendingRequest = null;

      this._disposeCacheReference();
    }).subscribe({
      next: payload => {
        logPayload();
        const operationForPayload = createOperationSelector(operation.node, payload.variables || {}, payload.operation);
        nextReferences.push(environment.retain(operationForPayload.root));

        this._disposeCacheReference(); // Only notify of the first result if `next` is being called **asynchronously**
        // (i.e. after `fetch` has returned).


        this._onQueryDataAvailable({
          notifyFirstResult: fetchHasReturned,
          onFulfilled: () => {
            if (span != null) {
              span.end();
              span = null;
            }
          }
        });
      },
      error: err => {
        logPayload();

        if (span != null) {
          span.end(true);
          span = null;
        } // We may have partially fulfilled the request, so let the next request
        // or the unmount dispose of the references.


        this._selectionReferences = this._selectionReferences.concat(nextReferences); // Only notify of error if `error` is being called **asynchronously**
        // (i.e. after `fetch` has returned).

        if (fetchHasReturned) {
          onDataChange({
            error: err
          });
        } else {
          error = err;
        }
      },
      complete: () => {
        this._disposeSelectionReferences();

        this._selectionReferences = nextReferences;
      },
      unsubscribe: () => {
        // Let the next request or the unmount code dispose of the references.
        // We may have partially fulfilled the request.
        this._selectionReferences = this._selectionReferences.concat(nextReferences);
      }
    });
    this._pendingRequest = {
      dispose() {
        request.unsubscribe();
      }

    };
    fetchHasReturned = true;

    if (error) {
      throw error;
    }

    return this._snapshot;
  }

  retry() {
    if (this._fetchOptions == null) {
      throw new Error('ReactRelayQueryFetcher: `retry` should be called after having called `fetch`');
    }

    return this.fetch({ ...this._fetchOptions,
      cacheConfig: { ...(this._fetchOptions.cacheConfig || {}),
        force: true
      }
    });
  }

  dispose() {
    this._disposeRequest();

    this._disposeSelectionReferences();
  }

  _disposeCacheReference() {
    if (this._cacheReference) {
      this._cacheReference.dispose();

      this._cacheReference = null;
    }
  }

  _disposeRequest() {
    this._snapshot = null;

    this._disposeCacheReference(); // order is important, dispose of pendingFetch before selectionReferences


    if (this._pendingRequest) {
      this._pendingRequest.dispose();
    }

    if (this._rootSubscription) {
      this._rootSubscription.dispose();

      this._rootSubscription = null;
    }
  }

  _disposeSelectionReferences() {// TODO: GC better
    // this._selectionReferences.forEach(r => r.dispose());
    // this._selectionReferences = [];
  }

  _onQueryDataAvailable({
    notifyFirstResult,
    onFulfilled
  }) {
    if (this._fetchOptions == null) {
      throw new Error('ReactRelayQueryFetcher: `_onQueryDataAvailable` should have been called after having called `fetch`');
    }

    const {
      environment,
      onDataChange,
      operation
    } = this._fetchOptions; // `_onQueryDataAvailable` can be called synchronously the first time and can be called
    // multiple times by network layers that support data subscriptions.
    // Wait until the first payload to call `onDataChange` and subscribe for data updates.

    if (this._snapshot) {
      return;
    }

    if (!environment.check(operation.root)) {
      return;
    }

    if (onFulfilled != null) {
      onFulfilled();
    }

    this._snapshot = environment.lookup(operation.fragment); // Subscribe to changes in the data of the root fragment

    this._rootSubscription = environment.subscribe(this._snapshot, snapshot => onDataChange({
      snapshot
    }));

    if (this._snapshot && notifyFirstResult) {
      onDataChange({
        snapshot: this._snapshot
      });
    }
  }

}

QueryFetcher_defineProperty(QueryFetcher_QueryFetcher, "DataFrom", DataFromEnum);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/getDisplayName.js
/* harmony default export */ var getDisplayName = (component => component.displayName || component.name || 'Component');
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/graphql/relay/queryRenderer.js
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function queryRenderer_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/* eslint-disable react/require-default-props */

/* eslint-disable react/no-unused-prop-types */







function getLoadingRenderProps() {
  return {
    error: null,
    props: null,
    // `props: null` indicates that the data is being fetched (i.e. loading)
    retry: null
  };
}

function getEmptyRenderProps() {
  return {
    error: null,
    props: {},
    // `props: {}` indicates no data available
    retry: null
  };
}

function getRenderProps(error, snapshot, queryFetcher, retryCallbacks) {
  return {
    error: error == null ? error : null,
    props: snapshot ? snapshot.data : null,
    retry: () => {
      const syncSnapshot = queryFetcher.retry();

      if (syncSnapshot) {
        retryCallbacks.handleDataChange({
          snapshot: syncSnapshot
        });
      } else if (error) {
        // If retrying after an error and no synchronous result available,
        // reset the render props
        retryCallbacks.handleRetryAfterError(error);
      }
    }
  };
}

function fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks) {
  const {
    environment,
    query,
    variables,
    skipNullVariables
  } = props;
  let relayContextVariables = variables || {};

  if (query) {
    const {
      createOperationSelector,
      getRequest
    } = environment.unstable_internal;
    const request = getRequest(query);

    try {
      let snapshot = null;

      if (!skipNullVariables || variables != null) {
        const operation = createOperationSelector(request, variables || {});
        relayContextVariables = operation.variables;
        snapshot = queryFetcher.fetch({
          cacheConfig: props.cacheConfig,
          dataFrom: props.dataFrom,
          environment,
          onDataChange: retryCallbacks.handleDataChange,
          operation,
          monitor: props.monitor
        });

        if (!snapshot) {
          return {
            relayContextEnvironment: environment,
            relayContextVariables,
            renderProps: getLoadingRenderProps()
          };
        }
      }

      if (skipNullVariables && variables == null) {
        snapshot = {
          data: {}
        };
      }

      return {
        relayContextEnvironment: environment,
        relayContextVariables,
        renderProps: getRenderProps(null, snapshot, queryFetcher, retryCallbacks)
      };
    } catch (error) {
      return {
        relayContextEnvironment: environment,
        relayContextVariables,
        renderProps: getRenderProps(error, null, queryFetcher, retryCallbacks)
      };
    }
  } else {
    queryFetcher.dispose();
    return {
      relayContextEnvironment: environment,
      relayContextVariables,
      renderProps: getEmptyRenderProps()
    };
  }
}

const getState = (prevState, state) => {
  let {
    lastProps
  } = prevState;

  if (state.props == null && prevState.renderProps.props != null) {
    lastProps = prevState.renderProps.props;
  } else if (lastProps == null && state.props != null) {
    lastProps = state.props;
  }

  return { ...state,
    lastProps
  };
};
/**
 * @public
 *
 * Orchestrates fetching and rendering data for a single view or view hierarchy:
 * - Fetches the query/variables using the given network implementation.
 * - Normalizes the response(s) to that query, publishing them to the given
 *   store.
 * - Renders the pending/fail/success states with the provided render function.
 * - Subscribes for updates to the root data and re-renders with any changes.
 */


class queryRenderer_ReactRelayQueryRenderer extends external_react_["Component"] {
  constructor(props, context) {
    super(props, context);

    queryRenderer_defineProperty(this, "_relayContext", void 0);

    queryRenderer_defineProperty(this, "props", void 0);

    queryRenderer_defineProperty(this, "state", void 0);

    this._relayContext = {
      environment: props.environment,
      variables: props.variables
    };
    const queryFetcher = new QueryFetcher_QueryFetcher();
    let retryCallbacks = {
      handleDataChange: () => {},
      handleRetryAfterError: () => {}
    };

    const handleDataChange = ({
      error,
      snapshot
    }) => {
      this._setState({
        renderProps: getRenderProps(error, snapshot, queryFetcher, retryCallbacks)
      });
    };

    const handleRetryAfterError = () => this._setState({
      renderProps: getLoadingRenderProps()
    });

    retryCallbacks = {
      handleDataChange,
      handleRetryAfterError
    };
    this.state = {
      prevPropsEnvironment: props.environment,
      prevPropsVariables: props.variables,
      prevQuery: props.query,
      queryFetcher,
      retryCallbacks,
      ...fetchQueryAndComputeStateFromProps(props, queryFetcher, retryCallbacks),
      lastProps: null
    };
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.prevQuery !== nextProps.query || prevState.prevPropsEnvironment !== nextProps.environment || !external_lodash_default.a.isEqual(prevState.prevPropsVariables, nextProps.variables)) {
      return getState(prevState, {
        prevQuery: nextProps.query,
        prevPropsEnvironment: nextProps.environment,
        prevPropsVariables: nextProps.variables,
        ...fetchQueryAndComputeStateFromProps(nextProps, prevState.queryFetcher, prevState.retryCallbacks)
      });
    }

    return null;
  }

  componentWillUnmount() {
    this.state.queryFetcher.dispose();
  }

  shouldComponentUpdate(nextProps, nextState) {
    return nextProps.render !== this.props.render || nextState.renderProps !== this.state.renderProps;
  }

  getChildContext() {
    return {
      relay: this._relayContext
    };
  }

  _setState(state) {
    this.setState(prevState => getState(prevState, state));
  }

  render() {
    const {
      relayContextEnvironment,
      relayContextVariables,
      renderProps,
      lastProps
    } = this.state; // HACK Mutate the context.relay object before updating children,
    // To account for any changes made by static gDSFP.
    // Updating this value in gDSFP would be less safe, since props changes
    // could be interrupted and we might re-render based on a setState call.
    // Child containers rely on context.relay being mutated (also for gDSFP).
    // $FlowFixMe TODO t16225453 QueryRenderer works with old+new environment.

    this._relayContext.environment = relayContextEnvironment;
    this._relayContext.variables = relayContextVariables;
    return this.props.render(renderProps, lastProps);
  }

}

queryRenderer_ReactRelayQueryRenderer.childContextTypes = {
  relay: () => null
};
Object(external_react_lifecycles_compat_["polyfill"])(queryRenderer_ReactRelayQueryRenderer);
/* harmony default export */ var queryRenderer = ((query, configIn) => {
  const config = configIn || {
    withPrevProps: false,
    skipNullVariables: false
  };
  const mapPropsToVariables = config.mapPropsToVariables == null ? // eslint-disable-next-line
  (props, prevProps) => ({}) : config.mapPropsToVariables.client;
  const mapServerPropsToVariables = config.mapPropsToVariables == null || config.mapPropsToVariables.server == null ? // eslint-disable-next-line
  (props, prevProps) => ({}) : config.mapPropsToVariables.server;
  const withPrevProps = !!config.withPrevProps;
  const skipNullVariables = !!config.skipNullVariables;
  return WrappedComponent => {
    let component;

    if (withPrevProps) {
      // eslint-disable-next-line
      component = class Component extends external_react_["Component"] {
        constructor(...args) {
          super(...args);

          queryRenderer_defineProperty(this, "_prevProps", void 0);
        }

        render() {
          const prevProps = this._prevProps;
          this._prevProps = this.props;
          return external_react_["createElement"](queryRenderer_ReactRelayQueryRenderer, {
            environment: this.props.relayEnvironment,
            query: query,
            variables: mapPropsToVariables(this.props, prevProps),
            render: (renderProps, lastProps) => external_react_["createElement"](WrappedComponent, _extends({}, this.props, renderProps, {
              lastProps: lastProps
            })),
            skipNullVariables: skipNullVariables,
            cacheConfig: config.cacheConfig,
            monitor: this.props.appContext.monitor
          });
        }

      };
    } else {
      component = props => external_react_["createElement"](queryRenderer_ReactRelayQueryRenderer, {
        environment: props.relayEnvironment,
        query: query,
        variables: mapPropsToVariables(props),
        render: (renderProps, lastProps) => external_react_["createElement"](WrappedComponent, _extends({}, props, renderProps, {
          lastProps: lastProps
        })),
        skipNullVariables: skipNullVariables,
        cacheConfig: config.cacheConfig,
        monitor: props.appContext.monitor
      });
    }

    component.displayName = `QueryRenderer(${getDisplayName(WrappedComponent)})`;
    const ComponentWithContext = Object(external_recompose_["getContext"])({
      relayEnvironment: () => null,
      appContext: () => null
    })(component); // $FlowFixMe

    ComponentWithContext.asyncBootstrap = async (match, environment) => {
      if (config.mapPropsToVariables == null || config.mapPropsToVariables.client == null || config.mapPropsToVariables.server != null) {
        let serverQuery = query;
        const serverVariables = mapServerPropsToVariables({
          match
        });

        if (serverQuery && (!skipNullVariables || serverVariables != null)) {
          const {
            createOperationSelector,
            getRequest
          } = environment.unstable_internal;
          serverQuery = getRequest(serverQuery);
          const operation = createOperationSelector(serverQuery, serverVariables || {});
          await new Promise((resolve, reject) => {
            environment.execute({
              operation,
              cacheConfig: undefined
            }).subscribe({
              next: () => resolve(),
              error: error => reject(error)
            });
          });
        }
      }
    };

    return ComponentWithContext;
  };
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/link/IconLink.js






const IconLink_styles = theme => ({
  link: {
    color: theme.palette.text.secondary,
    textDecoration: 'none',
    '&:hover': {
      color: theme.palette.text.primary
    }
  }
});

function IconLink({
  path,
  icon,
  className,
  classes
}) {
  return external_react_["createElement"](external_react_router_dom_["Link"], {
    className: classes.link,
    to: path
  }, external_react_["createElement"](base_Icon, {
    className: external_classnames_default()(classes.link, className)
  }, icon));
}

const IconLink_enhance = Object(external_recompose_["compose"])(withStyles(IconLink_styles), external_recompose_["pure"]);
/* harmony default export */ var link_IconLink = (IconLink_enhance(IconLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/lib/AddressLink.js






const AddressLink_styles = theme => ({
  highlighted: {
    color: theme.palette.secondary.light,
    fontWeight: theme.typography.fontWeightRegular,
    textDecoration: 'none',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
});

function AddressLink({
  addressHash,
  highlighted,
  white,
  newTab,
  component,
  className,
  classes
}) {
  if (highlighted) {
    return external_react_["createElement"](Typography, {
      className: classes.highlighted,
      variant: "body1",
      component: component
    }, addressHash);
  }

  const path = makeAddress(addressHash);
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: path,
    title: addressHash,
    white: white,
    newTab: newTab,
    component: component
  });
}

const AddressLink_enhance = Object(external_recompose_["compose"])(withStyles(AddressLink_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_AddressLink = (AddressLink_enhance(AddressLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/lib/AssetNameLink.js






function AssetNameLink({
  asset,
  className
}) {
  return external_react_["createElement"](lib_AssetNameLinkBase, {
    className: className,
    asset: asset
  });
}

const AssetNameLink_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(133);

    if (node.hash && node.hash !== "5444e77732d825ff725a0e4a80c444c2") {
      console.error("The definition of 'AssetNameLink_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(133);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_AssetNameLink = (AssetNameLink_enhance(AssetNameLink));
// EXTERNAL MODULE: external "@material-ui/core/CircularProgress"
var CircularProgress_ = __webpack_require__(279);
var CircularProgress_default = /*#__PURE__*/__webpack_require__.n(CircularProgress_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/CircularProgress.js

/* harmony default export */ var CircularProgress = (CircularProgress_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/pager/Pager.js






const Pager_styles = theme => ({
  root: {
    alignItems: 'center',
    display: 'flex'
  },
  count: { ...theme.typography.caption,
    paddingRight: theme.spacing.unit * 2
  },
  error: {
    color: theme.palette.error[500]
  },
  loading: {
    '& circle': {
      color: '#001E7F !important'
    }
  },
  margin: {
    marginRight: theme.spacing.unit * 2
  }
});

const Pager_formatNumber = value => new external_bignumber_js_default.a(value).toFormat();

function Pager({
  page,
  pageSize,
  currentPageSize,
  hasPreviousPage,
  hasNextPage,
  isLoading,
  error,
  className,
  onDecrementPage,
  onIncrementPage,
  classes
}) {
  let start = 1;
  let end = 1;
  let totalElement = external_react_["createElement"]("span", {
    className: classes.count
  }, "0 - 0");

  if (currentPageSize != null) {
    start = (page - 1) * pageSize + 1;
    end = start + currentPageSize - 1;

    if (end === 0) {
      start = 0;
    }

    totalElement = external_react_["createElement"]("span", {
      className: classes.count
    }, `${Pager_formatNumber(start)} - ${Pager_formatNumber(end)}`);
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className)
  }, error != null ? external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.margin, classes.error),
    variant: "body1"
  }, error) : null, isLoading ? external_react_["createElement"](CircularProgress, {
    size: 32,
    thickness: 5,
    className: external_classnames_default()(classes.margin, classes.loading)
  }) : null, totalElement, external_react_["createElement"](IconButton, {
    disabled: isLoading || !hasPreviousPage,
    onClick: onDecrementPage
  }, external_react_["createElement"](base_Icon, null, "keyboard_arrow_left")), external_react_["createElement"](IconButton, {
    disabled: isLoading || !hasNextPage,
    onClick: onIncrementPage
  }, external_react_["createElement"](base_Icon, null, "keyboard_arrow_right")));
}

const Pager_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withHandlers"])({
  onIncrementPage: ({
    page,
    onUpdatePage
  }) => () => onUpdatePage(page + 1),
  onDecrementPage: ({
    page,
    onUpdatePage
  }) => () => onUpdatePage(page - 1)
}), withStyles(Pager_styles), external_recompose_["pure"]);
/* harmony default export */ var pager_Pager = (Pager_enhance(Pager));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/RightPager.js






const RightPager_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  pagerArea: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end'
  },
  padding: {}
});

function RightPager({
  page,
  pageSize,
  currentPageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  isLoading,
  error,
  disablePadding,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.padding]: !disablePadding
    }, classes.pagerArea, className)
  }, external_react_["createElement"](pager_Pager, {
    page: page,
    pageSize: pageSize,
    currentPageSize: currentPageSize,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage,
    isLoading: isLoading,
    error: error
  }));
}

const RightPager_enhance = Object(external_recompose_["compose"])(withStyles(RightPager_styles), external_recompose_["pure"]);
/* harmony default export */ var view_RightPager = (RightPager_enhance(RightPager));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/PagingView.js





function PagingView({
  content,
  isInitialLoad,
  isLoadingMore,
  error,
  className,
  page,
  pageSize,
  currentPageSize,
  hasPreviousPage,
  hasNextPage,
  omitPager,
  disablePadding,
  onUpdatePage
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, isInitialLoad ? external_react_["createElement"](loading_PageLoading, null) : content, omitPager ? null : external_react_["createElement"](view_RightPager, {
    page: page,
    pageSize: pageSize,
    currentPageSize: currentPageSize,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage,
    isLoading: isLoadingMore,
    error: error,
    disablePadding: disablePadding
  }));
}

const PagingView_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var view_PagingView = (PagingView_enhance(PagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionValue.js







const TransactionValue_styles = () => ({
  value: {
    textAlign: 'right'
  }
});

function TransactionValue({
  value: valueIn,
  negative,
  className,
  classes
}) {
  let value = valueIn;

  if (negative) {
    value = new external_bignumber_js_default.a(value).negated().toString();
  }

  return external_react_["createElement"](lib_CoinValue, {
    className: external_classnames_default()(classes.value, className),
    value: value
  });
}

const TransactionValue_enhance = Object(external_recompose_["compose"])(withStyles(TransactionValue_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionValue = (TransactionValue_enhance(TransactionValue));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionInputOutputTable.js
/* eslint-disable react/no-array-index-key */











const TransactionInputOutputTable_styles = theme => ({
  root: {
    display: 'flex',
    flex: '1 1 auto',
    flexDirection: 'column',
    maxWidth: '100%',
    minWidth: '0'
  },
  contentRoot: {
    display: 'flex',
    flex: '0 1 auto',
    maxWidth: '100%',
    minWidth: '0'
  },
  rightRoot: {
    alignItems: 'flex-end'
  },
  col: {
    display: 'flex',
    flexDirection: 'column'
  },
  margin: {
    marginRight: theme.spacing.unit
  },
  value: {
    marginRight: theme.spacing.unit / 2,
    justifyContent: 'flex-end'
  },
  row: theme.custom.inputOutput.row,
  addressCol: {
    flex: '0 1 auto',
    minWidth: theme.spacing.unit * 4
  },
  valueCol: {
    flex: '0 0 auto'
  },
  assetCol: {
    flex: '0 1 auto',
    minWidth: 36
  },
  leftCol: {
    flex: '0 0 auto'
  },
  rightCol: {
    flex: '0 0 auto'
  }
});

function TransactionInputOutputTable({
  input_outputs,
  transfers = [],
  left,
  right,
  addressHash,
  positive,
  className,
  page,
  isInitialLoad,
  isLoadingMore,
  error,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  classes
}) {
  const addressLinks = [];
  const values = [];
  const assets = [];
  const transfer_input_outputs = transfers.concat(input_outputs);
  transfer_input_outputs.forEach((inputOutput, idx) => {
    addressLinks.push(external_react_["createElement"]("div", {
      key: idx,
      className: external_classnames_default()(classes.margin, classes.row)
    }, external_react_["createElement"](lib_AddressLink, {
      addressHash: inputOutput.address_id,
      highlighted: inputOutput.address_id === addressHash
    })));
    values.push(external_react_["createElement"](lib_TransactionValue, {
      key: idx,
      negative: !positive,
      className: external_classnames_default()(classes.row, classes.value),
      value: inputOutput.value
    }));
    assets.push(external_react_["createElement"](lib_AssetNameLink, {
      key: idx,
      className: external_classnames_default()(right == null ? undefined : classes.margin, classes.row),
      asset: inputOutput.asset
    }));
  });
  const content = external_react_["createElement"]("div", {
    className: classes.contentRoot
  }, left == null ? null : external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.leftCol)
  }, left), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.addressCol)
  }, addressLinks), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.valueCol)
  }, values), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.assetCol)
  }, assets), right == null ? null : external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.rightCol)
  }, right));
  return external_react_["createElement"](view_PagingView, {
    className: external_classnames_default()({
      [classes.rightRoot]: right != null
    }, className, classes.root),
    content: content,
    isInitialLoad: isInitialLoad,
    isLoadingMore: isLoadingMore,
    page: page,
    pageSize: pageSize,
    currentPageSize: transfer_input_outputs.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage,
    error: error,
    omitPager: !hasNextPage && !hasPreviousPage,
    disablePadding: true
  });
}

const TransactionInputOutputTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  input_outputs: function () {
    const node = __webpack_require__(134);

    if (node.hash && node.hash !== "0fe11ffc0199525fa0b56f21ba91937f") {
      console.error("The definition of 'TransactionInputOutputTable_input_outputs' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(134);
  }
}), withStyles(TransactionInputOutputTable_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionInputOutputTable = (TransactionInputOutputTable_enhance(TransactionInputOutputTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionInputTable.js
/* eslint-disable react/no-array-index-key */










const TransactionInputTable_styles = theme => ({
  row: theme.custom.inputOutput.row,
  margin: {
    marginRight: theme.spacing.unit
  }
});

function TransactionInputTable({
  inputs,
  transfers = [],
  addressHash,
  positive,
  page,
  isInitialLoad,
  isLoadingMore,
  error,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  className,
  classes
}) {
  const links = inputs.map((input, idx) => external_react_["createElement"](link_IconLink, {
    key: idx + transfers.length,
    className: external_classnames_default()(classes.margin, classes.row),
    icon: "arrow_back",
    path: makeTransaction(input.output_transaction_hash)
  }));
  const transferLinks = transfers.map((transfer, idx) => external_react_["createElement"](Typography, {
    key: idx,
    variant: "body1",
    className: classes.row
  }));
  return external_react_["createElement"](lib_TransactionInputOutputTable, {
    className: className,
    input_outputs: inputs,
    transfers: transfers,
    left: transferLinks.concat(links),
    addressHash: addressHash,
    positive: positive,
    page: page,
    isInitialLoad: isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    pageSize: pageSize,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage
  });
}

const TransactionInputTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  inputs: function () {
    const node = __webpack_require__(135);

    if (node.hash && node.hash !== "77c9a799e6e654743a799976b4ca639c") {
      console.error("The definition of 'TransactionInputTable_inputs' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(135);
  }
}), withStyles(TransactionInputTable_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionInputTable = (TransactionInputTable_enhance(TransactionInputTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/getPagingVariables.js
/* harmony default export */ var getPagingVariables = ((pageSize, page, offset = 0) => ({
  first: page === 1 ? pageSize - offset : pageSize,
  after: page === 1 ? null : ((page - 1) * pageSize - (offset + 1)).toString()
}));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionClaimPagingTable.js


 // $FlowFixMe





const PAGE_SIZE = 10;

function TransactionClaimPagingTable({
  addressHash,
  positive,
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let claims = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const transaction = currentProps == null ? null : currentProps.transaction;

  if (transaction != null) {
    claims = transaction.claims.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = transaction.claims.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](lib_TransactionInputTable, {
    className: className,
    inputs: claims,
    addressHash: addressHash,
    positive: positive,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const TransactionClaimPagingTable_mapPropsToVariables = ({
  transaction,
  page
}) => ({
  hash: transaction.hash,
  ...getPagingVariables(PAGE_SIZE, page)
});

const TransactionClaimPagingTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(142);

    if (node.hash && node.hash !== "4df5fd8ad4c4c0ca5743ff1238b554cb") {
      console.error("The definition of 'TransactionClaimPagingTable_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(142);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(143);

  if (node.hash && node.hash !== "ae692659f055939aaf59816b7d68ccd6") {
    console.error("The definition of 'TransactionClaimPagingTableQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(143);
}, {
  mapPropsToVariables: {
    client: TransactionClaimPagingTable_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionClaimPagingTable = (TransactionClaimPagingTable_enhance(TransactionClaimPagingTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionOutputTable.js
/* eslint-disable react/no-array-index-key */










const TransactionOutputTable_styles = theme => ({
  spent: {
    color: theme.custom.colors.red[500],
    marginRight: theme.spacing.unit
  },
  spentArea: {
    alignItems: 'center',
    display: 'flex'
  },
  row: theme.custom.inputOutput.row
});

// TODO: INTL
function TransactionOutputTable({
  outputs,
  transfers = [],
  addressHash,
  page,
  isInitialLoad,
  isLoadingMore,
  error,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  className,
  classes
}) {
  const links = outputs.map((output, idx) => {
    let link = external_react_["createElement"](Typography, {
      key: idx + transfers.length,
      variant: "body1",
      className: classes.row
    }, "(Unspent)");

    if (output.input_transaction_hash != null) {
      link = external_react_["createElement"]("div", {
        key: idx + transfers.length,
        className: external_classnames_default()(classes.spentArea, classes.row)
      }, external_react_["createElement"](Typography, {
        variant: "body1",
        className: classes.spent
      }, "(Spent)"), external_react_["createElement"](link_IconLink, {
        key: idx,
        icon: "arrow_forward",
        path: makeTransaction(output.input_transaction_hash)
      }));
    }

    return link;
  });
  const transferLinks = transfers.map((transfer, idx) => external_react_["createElement"](Typography, {
    key: idx,
    variant: "body1",
    className: classes.row
  }));
  return external_react_["createElement"](lib_TransactionInputOutputTable, {
    className: className,
    input_outputs: outputs,
    transfers: transfers,
    right: transferLinks.concat(links),
    addressHash: addressHash,
    positive: true,
    page: page,
    isInitialLoad: isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    pageSize: pageSize,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage
  });
}

const TransactionOutputTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  outputs: function () {
    const node = __webpack_require__(138);

    if (node.hash && node.hash !== "4cfd8e09640f506a827b2d643417568a") {
      console.error("The definition of 'TransactionOutputTable_outputs' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(138);
  }
}), withStyles(TransactionOutputTable_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionOutputTable = (TransactionOutputTable_enhance(TransactionOutputTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionOutputPagingTable.js


 // $FlowFixMe





const TransactionOutputPagingTable_PAGE_SIZE = 10;

function TransactionOutputPagingTable({
  addressHash,
  transfers,
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let outputs = [];
  const transferOutputs = [];

  if (transfers != null && page === 1) {
    for (const transfer of transfers) {
      if (transfer.to_address_id != null) {
        transferOutputs.push({
          address_id: transfer.to_address_id,
          value: transfer.value,
          asset: transfer.asset
        });
      }
    }
  }

  let hasNextPage = false;
  let hasPreviousPage = false;
  const transaction = currentProps == null ? null : currentProps.transaction;

  if (transaction != null) {
    outputs = transaction.outputs.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = transaction.outputs.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](lib_TransactionOutputTable, {
    className: className,
    outputs: outputs,
    transfers: transferOutputs,
    addressHash: addressHash,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: TransactionOutputPagingTable_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const TransactionOutputPagingTable_mapPropsToVariables = ({
  transaction,
  page,
  offset
}) => ({
  hash: transaction.hash,
  ...getPagingVariables(TransactionOutputPagingTable_PAGE_SIZE, page, offset)
});

const TransactionOutputPagingTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(139);

    if (node.hash && node.hash !== "eba61772201449d726f3eb16f6b6a619") {
      console.error("The definition of 'TransactionOutputPagingTable_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(139);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(140);

  if (node.hash && node.hash !== "2805848e4f4b51f3b9d4e1ee0e9610c1") {
    console.error("The definition of 'TransactionOutputPagingTableQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(140);
}, {
  mapPropsToVariables: {
    client: TransactionOutputPagingTable_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionOutputPagingTable = (TransactionOutputPagingTable_enhance(TransactionOutputPagingTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/DownArrow.js




function DownArrow({
  className
}) {
  return external_react_["createElement"](base_Icon, {
    className: className
  }, "keyboard_arrow_down");
}

const DownArrow_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_DownArrow = (DownArrow_enhance(DownArrow));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSplitSummaryBodyDense.js






const TransactionSplitSummaryBodyDense_styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  },
  col: {
    display: 'flex',
    flex: '1 1 auto'
  },
  arrow: {
    alignItems: 'center',
    display: 'flex',
    flex: '0 0 auto',
    justifyContent: 'center',
    marginBottom: theme.spacing.unit / 2,
    marginTop: theme.spacing.unit / 2
  },
  divider: {
    backgroundColor: theme.custom.lightDivider,
    flex: '1 1 auto',
    marginLeft: theme.spacing.unit,
    marginRight: theme.spacing.unit,
    height: 1
  },
  right: {
    justifyContent: 'flex-end'
  },
  extraRight: {
    alignItems: 'flex-end',
    display: 'flex',
    flexDirection: 'column',
    minWidth: '0'
  }
});

function TransactionSplitSummaryBodyDense({
  left,
  right: rightIn,
  extraRight,
  className,
  classes
}) {
  let right = rightIn;

  if (extraRight != null) {
    right = external_react_["createElement"]("div", {
      className: classes.extraRight
    }, right, extraRight);
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.col
  }, left), external_react_["createElement"]("div", {
    className: classes.arrow
  }, external_react_["createElement"]("div", {
    className: classes.divider
  }), external_react_["createElement"](lib_DownArrow, null), external_react_["createElement"]("div", {
    className: classes.divider
  })), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.right)
  }, right));
}

const TransactionSplitSummaryBodyDense_enhance = Object(external_recompose_["compose"])(withStyles(TransactionSplitSummaryBodyDense_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSplitSummaryBodyDense = (TransactionSplitSummaryBodyDense_enhance(TransactionSplitSummaryBodyDense));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/RightArrow.js




function RightArrow({
  className
}) {
  return external_react_["createElement"](base_Icon, {
    className: className
  }, "keyboard_arrow_right");
}

const RightArrow_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_RightArrow = (RightArrow_enhance(RightArrow));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSplitSummaryBodyLR.js






const TransactionSplitSummaryBodyLR_styles = theme => ({
  root: {
    display: 'flex'
  },
  col: {
    display: 'flex',
    flex: '1 1 auto',
    maxWidth: 'calc(50% - 20px)',
    minWidth: '0'
  },
  arrow: {
    alignItems: 'center',
    display: 'flex',
    flex: '0 0 auto',
    flexDirection: 'column',
    justifyContent: 'center',
    marginLeft: theme.spacing.unit / 2,
    marginRight: theme.spacing.unit / 2
  },
  divider: {
    backgroundColor: theme.custom.lightDivider,
    flex: '1 1 auto',
    marginBottom: 8,
    marginTop: 8,
    width: 1
  },
  right: {
    justifyContent: 'flex-end'
  },
  extraRight: {
    alignItems: 'flex-end',
    display: 'flex',
    flexDirection: 'column',
    minWidth: '0'
  }
});

function TransactionSplitSummaryBodyLR({
  left,
  right: rightIn,
  extraRight,
  className,
  classes
}) {
  let right = rightIn;

  if (extraRight != null) {
    right = external_react_["createElement"]("div", {
      className: classes.extraRight
    }, right, extraRight);
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.col
  }, left), external_react_["createElement"]("div", {
    className: classes.arrow
  }, external_react_["createElement"]("div", {
    className: classes.divider
  }), external_react_["createElement"](lib_RightArrow, null), external_react_["createElement"]("div", {
    className: classes.divider
  })), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.col, classes.right)
  }, right));
}

const TransactionSplitSummaryBodyLR_enhance = Object(external_recompose_["compose"])(withStyles(TransactionSplitSummaryBodyLR_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSplitSummaryBodyLR = (TransactionSplitSummaryBodyLR_enhance(TransactionSplitSummaryBodyLR));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSplitSummaryBody.js






function TransactionSplitSummaryBody({
  left,
  right,
  extraRight,
  dense,
  className
}) {
  const denseDense = dense ? ['xs', 'sm', 'md'] : ['xs', 'sm', 'md', 'lg'];
  const lrDense = dense ? ['lg', 'xl'] : ['xl'];
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](Hidden, {
    implementation: "js",
    initialWidth: "md",
    only: denseDense
  }, external_react_["createElement"](summary_TransactionSplitSummaryBodyDense, {
    left: left,
    right: right,
    extraRight: extraRight
  })), external_react_["createElement"](Hidden, {
    implementation: "js",
    initialWidth: "md",
    only: lrDense
  }, external_react_["createElement"](summary_TransactionSplitSummaryBodyLR, {
    left: left,
    right: right,
    extraRight: extraRight
  })));
}

const TransactionSplitSummaryBody_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSplitSummaryBody = (TransactionSplitSummaryBody_enhance(TransactionSplitSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionClaimSummaryBody.js







function TransactionClaimSummaryBody({
  transaction,
  addressHash,
  dense,
  className
}) {
  // TODO: Fix no claims/outputs
  const input = external_react_["createElement"](lib_TransactionClaimPagingTable, {
    transaction: transaction,
    addressHash: addressHash,
    positive: true
  });
  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  return external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    className: className,
    left: input,
    right: output,
    dense: dense
  });
}

const TransactionClaimSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(144);

    if (node.hash && node.hash !== "c65b915902095c38085099160b24503d") {
      console.error("The definition of 'TransactionClaimSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(144);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionClaimSummaryBody = (TransactionClaimSummaryBody_enhance(TransactionClaimSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionInputPagingTable.js


 // $FlowFixMe





const TransactionInputPagingTable_PAGE_SIZE = 10;

function TransactionInputPagingTable({
  addressHash,
  transfers,
  positive,
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let inputs = [];
  const transferInputs = [];

  if (transfers != null && page === 1) {
    for (const transfer of transfers) {
      if (transfer.from_address_id != null) {
        transferInputs.push({
          address_id: transfer.from_address_id,
          value: transfer.value,
          asset: transfer.asset
        });
      }
    }
  }

  let hasNextPage = false;
  let hasPreviousPage = false;
  const transaction = currentProps == null ? null : currentProps.transaction;

  if (transaction != null) {
    inputs = transaction.inputs.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = transaction.inputs.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](lib_TransactionInputTable, {
    className: className,
    inputs: inputs,
    transfers: transferInputs,
    addressHash: addressHash,
    positive: positive,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: TransactionInputPagingTable_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const TransactionInputPagingTable_mapPropsToVariables = ({
  transaction,
  page,
  offset
}) => ({
  hash: transaction.hash,
  ...getPagingVariables(TransactionInputPagingTable_PAGE_SIZE, page, offset)
});

const TransactionInputPagingTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(136);

    if (node.hash && node.hash !== "5b1170b2a126b4a955bbb4bc01a13d1f") {
      console.error("The definition of 'TransactionInputPagingTable_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(136);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(137);

  if (node.hash && node.hash !== "3eb64677838705104a30aa1c4d0bc091") {
    console.error("The definition of 'TransactionInputPagingTableQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(137);
}, {
  mapPropsToVariables: {
    client: TransactionInputPagingTable_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionInputPagingTable = (TransactionInputPagingTable_enhance(TransactionInputPagingTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionEnrollmentSummaryBody.js









const TransactionEnrollmentSummaryBody_styles = theme => ({
  enrolledArea: {
    alignItems: 'center',
    display: 'flex',
    minWidth: '0'
  },
  enrolled: {
    marginRight: theme.spacing.unit
  }
});

function TransactionEnrollmentSummaryBody({
  transaction,
  addressHash,
  dense,
  className,
  classes
}) {
  const input = external_react_["createElement"](lib_TransactionInputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  let enrolled;

  if (transaction.enrollment != null) {
    enrolled = external_react_["createElement"]("div", {
      className: classes.enrolledArea
    }, external_react_["createElement"](Typography, {
      className: classes.enrolled,
      variant: "body1"
    }, "Validator Enrolled:"), external_react_["createElement"](lib_AddressLink, {
      addressHash: getID_getID(transaction.enrollment.address.id)
    }));
  }

  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  return external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    className: className,
    left: input,
    right: output,
    extraRight: enrolled,
    dense: dense
  });
}

const TransactionEnrollmentSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(145);

    if (node.hash && node.hash !== "558bcfd30dd431ca65dc96a7dc758689") {
      console.error("The definition of 'TransactionEnrollmentSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(145);
  }
}), withStyles(TransactionEnrollmentSummaryBody_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionEnrollmentSummaryBody = (TransactionEnrollmentSummaryBody_enhance(TransactionEnrollmentSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionInputOutputSummaryBody.js







function TransactionInputOutputSummaryBody({
  transaction,
  addressHash,
  dense,
  className
}) {
  // TODO: empty edges
  const input = external_react_["createElement"](lib_TransactionInputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  return external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    className: className,
    left: input,
    right: output,
    dense: dense
  });
}

const TransactionInputOutputSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(141);

    if (node.hash && node.hash !== "9be699b1d67f1531bc3c37650a8e691a") {
      console.error("The definition of 'TransactionInputOutputSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(141);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionInputOutputSummaryBody = (TransactionInputOutputSummaryBody_enhance(TransactionInputOutputSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/lib/ContractNameLink.js







function ContractNameLink({
  contract,
  className
}) {
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: makeContract(getID_getID(contract.id)),
    title: contract.name
  });
}

const ContractNameLink_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contract: function () {
    const node = __webpack_require__(148);

    if (node.hash && node.hash !== "a09ac64a1862c40345d2222171236317") {
      console.error("The definition of 'ContractNameLink_contract' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(148);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_ContractNameLink = (ContractNameLink_enhance(ContractNameLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/ContractPublished.js








const ContractPublished_styles = () => ({
  output: {
    alignItems: 'center',
    display: 'flex',
    minWidth: '0'
  }
});

function ContractPublished({
  contract,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.output)
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Published\xA0"), external_react_["createElement"](lib_ContractNameLink, {
    contract: contract
  }));
}

const ContractPublished_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contract: function () {
    const node = __webpack_require__(149);

    if (node.hash && node.hash !== "df08967a4a1bcacf28431844879c816c") {
      console.error("The definition of 'ContractPublished_contract' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(149);
  }
}), withStyles(ContractPublished_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_ContractPublished = (ContractPublished_enhance(ContractPublished));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/AssetRegistered.js








const AssetRegistered_styles = theme => ({
  registeredArea: {
    alignItems: 'center',
    display: 'flex',
    minWidth: '0'
  },
  registered: {
    marginRight: theme.spacing.unit
  }
});

function AssetRegistered({
  asset,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.registeredArea)
  }, external_react_["createElement"](Typography, {
    className: classes.registered,
    variant: "body1"
  }, "Registered"), external_react_["createElement"](lib_AssetNameLink, {
    asset: asset
  }));
}

const AssetRegistered_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(146);

    if (node.hash && node.hash !== "aa48c64c28da38d3fcad59bb56d25c64") {
      console.error("The definition of 'AssetRegistered_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(146);
  }
}), withStyles(AssetRegistered_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_AssetRegistered = (AssetRegistered_enhance(AssetRegistered));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionInvocationSummaryBody.js









const TransactionInvocationSummaryBody_styles = () => ({
  extra: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    minWidth: '0'
  }
});

function TransactionInvocationSummaryBody({
  transaction,
  addressHash,
  dense,
  className,
  classes
}) {
  const transfers = transaction.transfers.edges.map(transfer => transfer.node);
  const input = external_react_["createElement"](lib_TransactionInputPagingTable, {
    transaction: transaction,
    addressHash: addressHash,
    transfers: transfers,
    offset: transfers.length
  });
  const published = [];

  for (const edge of transaction.contracts.edges) {
    published.push(external_react_["createElement"](lib_ContractPublished, {
      key: getID_getID(edge.node.id),
      contract: edge.node
    }));
  }

  let registered;

  if (transaction.asset != null) {
    registered = external_react_["createElement"](lib_AssetRegistered, {
      asset: transaction.asset
    });
  }

  const extra = external_react_["createElement"]("div", {
    className: classes.extra
  }, registered, published);
  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash,
    transfers: transfers,
    offset: transfers.length
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    left: input,
    right: output,
    extraRight: extra,
    dense: dense
  }));
}
/*
<TransactionActionPagingTable
  transaction={transaction}
  addressHash={addressHash}
/>
*/
// TODO: Add support for actions
// ...TransactionActionPagingTable_transaction


const TransactionInvocationSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(151);

    if (node.hash && node.hash !== "8a9f371f7911368cc5e6019afa3b0d9c") {
      console.error("The definition of 'TransactionInvocationSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(151);
  }
}), withStyles(TransactionInvocationSummaryBody_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionInvocationSummaryBody = (TransactionInvocationSummaryBody_enhance(TransactionInvocationSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionPublishSummaryBody.js







function TransactionPublishSummaryBody({
  transaction,
  addressHash,
  dense,
  className
}) {
  const input = external_react_["createElement"](lib_TransactionInputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  const published = external_react_["createElement"](lib_ContractPublished, {
    contract: transaction.contracts[0]
  });
  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  return external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    className: className,
    left: input,
    right: output,
    extraRight: published,
    dense: dense
  });
}

const TransactionPublishSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(150);

    if (node.hash && node.hash !== "b51519ca376b607f2cd6012051e1023d") {
      console.error("The definition of 'TransactionPublishSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(150);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionPublishSummaryBody = (TransactionPublishSummaryBody_enhance(TransactionPublishSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionRegisterSummaryBody.js







function TransactionRegisterSummaryBody({
  transaction,
  addressHash,
  dense,
  className
}) {
  const input = external_react_["createElement"](lib_TransactionInputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  const registered = external_react_["createElement"](lib_AssetRegistered, {
    asset: transaction.asset
  });
  const output = external_react_["createElement"](lib_TransactionOutputPagingTable, {
    transaction: transaction,
    addressHash: addressHash
  });
  return external_react_["createElement"](summary_TransactionSplitSummaryBody, {
    className: className,
    left: input,
    right: output,
    extraRight: registered,
    dense: dense
  });
}

const TransactionRegisterSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(147);

    if (node.hash && node.hash !== "9d01c6a770ee91979f8ab193881a7edb") {
      console.error("The definition of 'TransactionRegisterSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(147);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionRegisterSummaryBody = (TransactionRegisterSummaryBody_enhance(TransactionRegisterSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSummaryBody.js













const TransactionSummaryBody_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    borderBottom: `1px solid ${theme.custom.lightDivider}`
  }
});

function TransactionSummaryBody({
  transaction,
  addressHash,
  dense,
  className,
  classes
}) {
  const rootClassName = external_classnames_default()(classes.root, className); // $FlowFixMe

  const type = transaction.type;
  const inputOutputSummary = external_react_["createElement"](summary_TransactionInputOutputSummaryBody, {
    className: rootClassName,
    transaction: transaction,
    addressHash: addressHash,
    dense: dense
  });

  switch (type) {
    case 'MinerTransaction':
      return inputOutputSummary;

    case 'IssueTransaction':
      return inputOutputSummary;

    case 'ClaimTransaction':
      return external_react_["createElement"](summary_TransactionClaimSummaryBody, {
        className: rootClassName,
        transaction: transaction,
        addressHash: addressHash,
        dense: dense
      });

    case 'EnrollmentTransaction':
      return external_react_["createElement"](summary_TransactionEnrollmentSummaryBody, {
        className: rootClassName,
        transaction: transaction,
        addressHash: addressHash,
        dense: dense
      });

    case 'RegisterTransaction':
      return external_react_["createElement"](summary_TransactionRegisterSummaryBody, {
        className: rootClassName,
        transaction: transaction,
        addressHash: addressHash,
        dense: dense
      });

    case 'ContractTransaction':
      return inputOutputSummary;

    case 'PublishTransaction':
      return external_react_["createElement"](summary_TransactionPublishSummaryBody, {
        className: rootClassName,
        transaction: transaction,
        addressHash: addressHash,
        dense: dense
      });

    case 'InvocationTransaction':
      return external_react_["createElement"](summary_TransactionInvocationSummaryBody, {
        className: rootClassName,
        transaction: transaction,
        addressHash: addressHash,
        dense: dense
      });

    default:
      // eslint-disable-next-line
      type;
      return null;
  }
}

const TransactionSummaryBody_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(152);

    if (node.hash && node.hash !== "0b33975e599bd1f4d39801a32eb742a6") {
      console.error("The definition of 'TransactionSummaryBody_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(152);
  }
}), withStyles(TransactionSummaryBody_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSummaryBody = (TransactionSummaryBody_enhance(TransactionSummaryBody));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSummaryFooter.js








const TransactionSummaryFooter_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    }
  },
  root: {
    alignItems: 'center',
    borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    justifyContent: 'flex-end',
    paddingBottom: theme.spacing.unit,
    paddingTop: theme.spacing.unit
  },
  fee: {
    alignItems: 'center',
    display: 'flex'
  },
  margin: {
    marginRight: theme.spacing.unit
  },
  font: {
    fontWeight: theme.typography.fontWeightMedium
  }
});

// TODO: INTL
function TransactionSummaryFooter({
  transaction,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.fee
  }, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.margin, classes.font),
    variant: "body1"
  }, `Network Fee: ${formatNumber(transaction.network_fee)} CRON`), external_react_["createElement"](Typography, {
    className: classes.font,
    variant: "body1"
  }, `System Fee: ${formatNumber(transaction.system_fee)} CRON`)));
}

const TransactionSummaryFooter_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(153);

    if (node.hash && node.hash !== "5f9b9145461883eafbb8b380b7ef3d40") {
      console.error("The definition of 'TransactionSummaryFooter_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(153);
  }
}), withStyles(TransactionSummaryFooter_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSummaryFooter = (TransactionSummaryFooter_enhance(TransactionSummaryFooter));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSummaryBodyFooter.js











const TransactionSummaryBodyFooter_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {},
  border: {
    borderBottom: `1px solid ${theme.custom.lightDivider}`
  }
});

function TransactionSummaryBodyFooter({
  addressHash,
  dense,
  props,
  error,
  retry,
  className,
  classes
}) {
  const errorView = external_react_["createElement"](error_ErrorView, {
    className: classes.border,
    error: error,
    retry: retry,
    allowRetry: true
  });

  if (error != null) {
    return errorView;
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, {
      className: external_classnames_default()(classes.border, classes.padding),
      disablePadding: true
    });
  }

  const {
    transaction
  } = props;

  if (transaction == null) {
    return errorView;
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](summary_TransactionSummaryBody, {
    transaction: transaction,
    addressHash: addressHash,
    dense: dense
  }), external_react_["createElement"](summary_TransactionSummaryFooter, {
    transaction: transaction
  }));
}

const TransactionSummaryBodyFooter_mapPropsToVariables = ({
  transactionHash
}) => ({
  hash: transactionHash
});

const TransactionSummaryBodyFooter_enhance = Object(external_recompose_["compose"])(queryRenderer(function () {
  const node = __webpack_require__(154);

  if (node.hash && node.hash !== "5e11168484db2040d88f15e42103bcc6") {
    console.error("The definition of 'TransactionSummaryBodyFooterQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(154);
}, {
  mapPropsToVariables: {
    client: TransactionSummaryBodyFooter_mapPropsToVariables
  }
}), withStyles(TransactionSummaryBodyFooter_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSummaryBodyFooter = (TransactionSummaryBodyFooter_enhance(TransactionSummaryBodyFooter));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionHeaderBackground.js






const TransactionHeaderBackground_styles = theme => ({
  contract: {
    borderLeft: `2px solid ${theme.custom.transactionColors.contract.backgroundColor}`
  },
  miner: {
    borderLeft: `2px solid ${theme.custom.transactionColors.miner.backgroundColor}`
  },
  issue: {
    borderLeft: `2px solid ${theme.custom.transactionColors.issue.backgroundColor}`
  },
  claim: {
    borderLeft: `2px solid ${theme.custom.transactionColors.claim.backgroundColor}`
  },
  enrollment: {
    borderLeft: `2px solid ${theme.custom.transactionColors.enrollment.backgroundColor}`
  },
  register: {
    borderLeft: `2px solid ${theme.custom.transactionColors.register.backgroundColor}`
  },
  publish: {
    borderLeft: `2px solid ${theme.custom.transactionColors.publish.backgroundColor}`
  },
  invocation: {
    borderLeft: `2px solid ${theme.custom.transactionColors.invocation.backgroundColor}`
  },
  state: {
    borderLeft: `2px solid ${theme.custom.transactionColors.state.backgroundColor}`
  },
  contractBG: {
    backgroundColor: theme.custom.transactionColors.contract.backgroundColor
  },
  minerBG: {
    backgroundColor: theme.custom.transactionColors.miner.backgroundColor
  },
  issueBG: {
    backgroundColor: theme.custom.transactionColors.issue.backgroundColor
  },
  claimBG: {
    backgroundColor: theme.custom.transactionColors.claim.backgroundColor
  },
  enrollmentBG: {
    backgroundColor: theme.custom.transactionColors.enrollment.backgroundColor
  },
  registerBG: {
    backgroundColor: theme.custom.transactionColors.register.backgroundColor
  },
  publishBG: {
    backgroundColor: theme.custom.transactionColors.publish.backgroundColor
  },
  invocationBG: {
    backgroundColor: theme.custom.transactionColors.invocation.backgroundColor
  },
  stateBG: {
    backgroundColor: theme.custom.transactionColors.state.backgroundColor
  },
  pointer: {
    cursor: 'pointer'
  }
});
const getBackgroundClassName = (classes, type) => {
  let bgColorClass;

  switch (type) {
    case 'MinerTransaction':
      bgColorClass = classes.minerBG;
      break;

    case 'IssueTransaction':
      bgColorClass = classes.issueBG;
      break;

    case 'ClaimTransaction':
      bgColorClass = classes.claimBG;
      break;

    case 'EnrollmentTransaction':
      bgColorClass = classes.enrollmentBG;
      break;

    case 'RegisterTransaction':
      bgColorClass = classes.registerBG;
      break;

    case 'ContractTransaction':
      bgColorClass = classes.contractBG;
      break;

    case 'PublishTransaction':
      bgColorClass = classes.publishBG;
      break;

    case 'InvocationTransaction':
      bgColorClass = classes.invocationBG;
      break;

    case 'StateTransaction':
      bgColorClass = classes.stateBG;
      break;

    default:
      // eslint-disable-next-line
      type;
      break;
  }

  return bgColorClass;
};

const getBorderClassName = (classes, type) => {
  let borderClass;

  switch (type) {
    case 'MinerTransaction':
      borderClass = classes.miner;
      break;

    case 'IssueTransaction':
      borderClass = classes.issue;
      break;

    case 'ClaimTransaction':
      borderClass = classes.claim;
      break;

    case 'EnrollmentTransaction':
      borderClass = classes.enrollment;
      break;

    case 'RegisterTransaction':
      borderClass = classes.register;
      break;

    case 'ContractTransaction':
      borderClass = classes.contract;
      break;

    case 'PublishTransaction':
      borderClass = classes.publish;
      break;

    case 'InvocationTransaction':
      borderClass = classes.invocation;
      break;

    case 'StateTransaction':
      borderClass = classes.state;
      break;

    default:
      // eslint-disable-next-line
      type;
      break;
  }

  return borderClass;
};

function TransactionHeaderBackground({
  transaction,
  onClick,
  children,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    role: "presentation",
    className: external_classnames_default()(getBorderClassName(classes, transaction.type), className, {
      [classes.pointer]: onClick != null
    }),
    onClick: onClick
  }, children);
}

const TransactionHeaderBackground_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(130);

    if (node.hash && node.hash !== "326fb3e339b14cad16630d57a0a4ef07") {
      console.error("The definition of 'TransactionHeaderBackground_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(130);
  }
}), withStyles(TransactionHeaderBackground_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionHeaderBackground = (TransactionHeaderBackground_enhance(TransactionHeaderBackground));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/getIcon.js
/* harmony default export */ var getIcon = (type => {
  let icon;

  switch (type) {
    case 'MinerTransaction':
      icon = 'build';
      break;

    case 'IssueTransaction':
      icon = 'account_balance';
      break;

    case 'ClaimTransaction':
      icon = 'redeem';
      break;

    case 'EnrollmentTransaction':
      icon = 'supervisor_account';
      break;

    case 'RegisterTransaction':
      icon = 'assignment';
      break;

    case 'ContractTransaction':
      icon = 'payment';
      break;

    case 'PublishTransaction':
      icon = 'description';
      break;

    case 'InvocationTransaction':
      icon = 'play_arrow';
      break;

    case 'StateTransaction':
      icon = 'perm_identity';
      break;

    default:
      // eslint-disable-next-line
      type;
      break;
  }

  return icon;
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/getTitle.js
const TRANSACTION_LENGTH = 'Transaction'.length;
/* harmony default export */ var getTitle = (type => type.substring(0, type.length - TRANSACTION_LENGTH));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionTypeAndLink.js











const TransactionTypeAndLink_styles = theme => ({
  root: {
    alignItems: 'center',
    display: 'flex',
    minWidth: '148.63px'
  },
  title: {
    maxWidth: '76.63px',
    width: '76.63px',
    minWidth: '76.63px',
    fontSize: '0.875rem',
    color: '#000',
    fontWeight: '500'
  },
  margin: {
    marginRight: theme.spacing.unit
  },
  svg: {
    minWidth: 14
  }
});

function TransactionTypeAndLink({
  transaction,
  titleComponent,
  titleVariant,
  hashComponent,
  hashVariant,
  className,
  classes
}) {
  const icon = getIcon(transaction.type);
  const title = getTitle(transaction.type);
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className)
  }, external_react_["createElement"]("svg", {
    className: external_classnames_default()(classes.margin, classes.svg),
    width: "14",
    height: "18",
    viewBox: "0 0 14 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, external_react_["createElement"]("path", {
    d: "M5.81018 14.6762C5.62504 14.765 5.41733 14.821 5.20058 14.821C4.40582 14.821 3.76008 14.1531 3.76008 13.3311C3.76008 12.5092 4.40582 11.8413 5.20058 11.8413C5.52571 11.8413 5.81924 11.9534 6.05857 12.1402L6.74945 11.5517C6.33852 11.1688 5.79665 10.9259 5.20058 10.9259C3.91813 10.9259 2.87952 12.0001 2.87952 13.3265C2.87952 14.6529 3.91813 15.7271 5.20058 15.7271C5.61602 15.7271 5.99986 15.6056 6.33854 15.4095L5.81018 14.6762Z",
    fill: "#3CBFEF"
  }), external_react_["createElement"]("path", {
    d: "M7.05198 11.9057L6.37316 12.4846C6.53155 12.7246 6.62206 13.0165 6.62206 13.3271C6.62206 13.7507 6.45463 14.1272 6.18311 14.4002L6.70351 15.1391C7.18773 14.6967 7.50452 14.0519 7.50452 13.3271C7.50452 12.7952 7.33255 12.3058 7.05198 11.9057Z",
    fill: "#3CBFEF"
  }), external_react_["createElement"]("path", {
    d: "M2.87499 4.37501H11V3.50001H2.87499V4.37501Z",
    fill: "#3CBFEF"
  }), external_react_["createElement"]("path", {
    d: "M11 6.87499H2.87499V5.99999H11V6.87499Z",
    fill: "#3CBFEF"
  }), external_react_["createElement"]("path", {
    d: "M2.87499 9.375H11V8.5H2.87499V9.375Z",
    fill: "#3CBFEF"
  }), external_react_["createElement"]("path", {
    "fill-rule": "evenodd",
    "clip-rule": "evenodd",
    d: "M13.875 12.8692L13.8692 12.875H13.875L8.75 18V17.9942L8.74416 18H2.7546C1.23327 18 0 16.7637 0 15.2386V2.76136C0 1.23631 1.23327 0 2.7546 0H11.1204C12.6417 0 13.875 1.2363 13.875 2.76136V12.8692ZM2.7546 1.28864H11.1204C11.9318 1.28864 12.5895 1.948 12.5895 2.76136V12.875H11.8665C10.1453 12.875 8.75 14.2737 8.75 15.9992V16.7114H2.7546C1.94322 16.7114 1.28548 16.052 1.28548 15.2386V2.76136C1.28548 1.948 1.94322 1.28864 2.7546 1.28864Z",
    fill: "#3CBFEF"
  })), external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.title, classes.margin),
    component: titleComponent,
    variant: titleVariant || 'subheading'
  }, title), external_react_["createElement"](link_Link, {
    component: hashComponent,
    variant: hashVariant || 'body1',
    path: makeTransaction(transaction.hash),
    title: transaction.hash
  }));
}

const TransactionTypeAndLink_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(131);

    if (node.hash && node.hash !== "97c14a8c89b675143ae5191806361821") {
      console.error("The definition of 'TransactionTypeAndLink_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(131);
  }
}), withStyles(TransactionTypeAndLink_styles), external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionTypeAndLink = (TransactionTypeAndLink_enhance(TransactionTypeAndLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSummaryHeader.js










const TransactionSummaryHeader_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    }
  },
  root: {
    alignItems: 'center',
    // borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    justifyContent: 'space-between',
    paddingBottom: 11,
    paddingTop: 11,
    borderLeft: 'none'
  },
  leftHeader: {
    flex: '1 100 auto',
    marginRight: theme.spacing.unit,
    minWidth: 150
  },
  rightHeader: {
    alignItems: 'center',
    display: 'flex',
    flex: '1 1 208px',
    justifyContent: 'flex-end',
    minWidth: '0',
    maxWidth: 200
  },
  // TODO: Keep in sync with ExpandoCard and/or extract out
  chevronButton: {
    width: theme.spacing.unit * 5,
    height: theme.spacing.unit * 5,
    marginBottom: -theme.spacing.unit,
    marginRight: -theme.spacing.unit,
    marginTop: -theme.spacing.unit
  },
  blockTime: {
    marginRight: 'auto'
  }
});

function TransactionSummaryHeader({
  transaction,
  showBody,
  onShowBody,
  onHideBody,
  alwaysExpand,
  className,
  classes
}) {
  let chevron = null;
  let onClickChevron;

  if (!alwaysExpand) {
    onClickChevron = showBody ? onHideBody : onShowBody;
    chevron = external_react_["createElement"](IconButton, {
      className: classes.chevronButton,
      onClick: onClickChevron
    }, external_react_["createElement"](animated_Chevron, {
      up: !showBody
    }));
  }

  return external_react_["createElement"](lib_TransactionHeaderBackground, {
    className: external_classnames_default()(classes.root, className),
    transaction: transaction,
    onClick: onClickChevron
  }, external_react_["createElement"](lib_TransactionTypeAndLink, {
    className: classes.leftHeader,
    transaction: transaction
  }), external_react_["createElement"]("div", {
    className: classes.rightHeader
  }, external_react_["createElement"](lib_BlockTime, {
    className: classes.blockTime,
    blockTime: transaction.block_time
  }), chevron));
}

const TransactionSummaryHeader_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(132);

    if (node.hash && node.hash !== "813c539ce522231abe530c052c5cd8ca") {
      console.error("The definition of 'TransactionSummaryHeader_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(132);
  }
}), withStyles(TransactionSummaryHeader_styles), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSummaryHeader = (TransactionSummaryHeader_enhance(TransactionSummaryHeader));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/summary/TransactionSummary.js








function TransactionSummary({
  transaction,
  addressHash,
  alwaysExpand,
  dense,
  className,
  showBody,
  onShowBody,
  onHideBody
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](summary_TransactionSummaryHeader, {
    transaction: transaction,
    showBody: showBody,
    onShowBody: onShowBody,
    onHideBody: onHideBody,
    alwaysExpand: alwaysExpand
  }), external_react_["createElement"](Collapse, {
    in: showBody || alwaysExpand || false,
    timeout: "auto",
    unmountOnExit: true
  }, external_react_["createElement"](summary_TransactionSummaryBodyFooter, {
    transactionHash: transaction.hash,
    addressHash: addressHash,
    dense: dense
  })));
}

const TransactionSummary_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(155);

    if (node.hash && node.hash !== "2181b2932df1a1aa8462c2e0cda103d4") {
      console.error("The definition of 'TransactionSummary_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(155);
  }
}), Object(external_recompose_["withStateHandlers"])(({
  initialShowBody
}) => ({
  showBody: initialShowBody || false
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onShowBody: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showBody: true
  })),
  onHideBody: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showBody: false
  }))
}), external_recompose_["pure"]);
/* harmony default export */ var summary_TransactionSummary = (TransactionSummary_enhance(TransactionSummary));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/TransactionTable.js






function TransactionTable({
  transactions,
  addressHash,
  dense,
  className
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, transactions.map(transaction => external_react_["createElement"](summary_TransactionSummary, {
    key: getID_getID(transaction.id),
    transaction: transaction,
    addressHash: addressHash,
    dense: dense
  })));
}

const TransactionTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transactions: function () {
    const node = __webpack_require__(156);

    if (node.hash && node.hash !== "3480e90d25a902ba3bea06d783e3c885") {
      console.error("The definition of 'TransactionTable_transactions' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(156);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var transaction_TransactionTable = (TransactionTable_enhance(TransactionTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/TransactionPagingView.js







function TransactionPagingView({
  transactions,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  addressHash,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](transaction_TransactionTable, {
      transactions: transactions,
      addressHash: addressHash
    }),
    isInitialLoad: !!isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    page: page,
    pageSize: pageSize,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    currentPageSize: transactions == null ? null : transactions.length,
    onUpdatePage: onUpdatePage
  });
}

const TransactionPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transactions: function () {
    const node = __webpack_require__(163);

    if (node.hash && node.hash !== "540a4ffa16dde8ff7ecb57c01c8e19c8") {
      console.error("The definition of 'TransactionPagingView_transactions' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(163);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var transaction_TransactionPagingView = (TransactionPagingView_enhance(TransactionPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressTransactionPagingView.js


 // $FlowFixMe





const AddressTransactionPagingView_PAGE_SIZE = 10;

function AddressTransactionPagingView({
  address,
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transactions = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const currentAddress = currentProps == null ? null : currentProps.address;

  if (currentAddress != null) {
    transactions = currentAddress.transactions.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentAddress.transactions.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](transaction_TransactionPagingView, {
    className: className,
    transactions: transactions,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: AddressTransactionPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage,
    addressHash: address == null ? undefined : getID_getID(address.id)
  });
}

const AddressTransactionPagingView_mapPropsToVariables = ({
  address,
  page
}) => address == null ? null : {
  hash: getID_getID(address.id),
  ...getPagingVariables(AddressTransactionPagingView_PAGE_SIZE, page)
};

const AddressTransactionPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(164);

    if (node.hash && node.hash !== "68d556b946f7a81a2f8f6ef8865349be") {
      console.error("The definition of 'AddressTransactionPagingView_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(164);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(165);

  if (node.hash && node.hash !== "4a91dd5c45d7bd840e46b623076a7b27") {
    console.error("The definition of 'AddressTransactionPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(165);
}, {
  mapPropsToVariables: {
    client: AddressTransactionPagingView_mapPropsToVariables
  },
  skipNullVariables: true
}), external_recompose_["pure"]);
/* harmony default export */ var address_AddressTransactionPagingView = (AddressTransactionPagingView_enhance(AddressTransactionPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/lib/TransactionLink.js





function TransactionLink({
  transactionHash,
  newTab,
  component,
  className
}) {
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    component: component,
    newTab: newTab,
    path: makeTransaction(transactionHash),
    title: transactionHash
  });
}

const TransactionLink_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_TransactionLink = (TransactionLink_enhance(TransactionLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transfer/lib/TransferLink.js






function TransferLink({
  transfer,
  className
}) {
  // TODO: Make this link directly to action on transaction page
  const transactionHash = transfer.transaction_hash;
  return external_react_["createElement"](lib_TransactionLink, {
    className: className,
    transactionHash: transactionHash
  });
}

const TransferLink_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transfer: function () {
    const node = __webpack_require__(166);

    if (node.hash && node.hash !== "c6c6f9d7c178facb3cbafc26eb840530") {
      console.error("The definition of 'TransferLink_transfer' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(166);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var lib_TransferLink = (TransferLink_enhance(TransferLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/table/Column.js
/* eslint-disable react/no-array-index-key */





const Column_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    paddingLeft: {
      paddingLeft: theme.spacing.unit
    },
    firstCol: {
      paddingLeft: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    paddingLeft: {
      paddingLeft: theme.spacing.unit * 3
    },
    firstCol: {
      paddingLeft: theme.spacing.unit * 2
    }
  },
  [theme.breakpoints.up('md')]: {
    paddingLeft: {
      paddingLeft: theme.spacing.unit * 5
    }
  },
  root: {
    flex: '1 1 auto',
    flexDirection: 'column'
  },
  minWidth: {
    minWidth: '0'
  },
  alwaysVisible: {
    display: 'flex'
  },
  baseRow: {
    display: 'flex',
    alignItems: 'center',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    height: 58
  },
  row: {
    fontFamily: theme.typography.fontFamily,
    fontSize: 14,
    fontWeight: theme.typography.fontWeightRegular,
    color: theme.palette.text.primary
  },
  header: {
    fontFamily: theme.typography.fontFamily,
    fontSize: 14,
    color: '#fff',
    fontWeight: theme.typography.fontWeightMedium
  },
  headerWrap: {
    height: 32,
    backgroundColor: 'rgba(7, 134, 213, 0.46)'
  },
  textRowBase: {
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  oddRow: {
    backgroundColor: 'rgba(7, 134, 213, 0.07)'
  },
  numeric: {},
  paddingLeft: {},
  firstCol: {
    '&:not(:first-child) p:before': {
      display: 'inline-block',
      content: '""',
      backgroundImage: 'url(/public/icon-block.svg)',
      width: 13,
      height: 13,
      verticalAlign: 'middle',
      marginRight: 8,
      marginTop: -2
    }
  },
  firstColHeader: {
    paddingLeft: 21
  }
});

function Column({
  name,
  values,
  numeric,
  minWidth,
  visibleAt,
  firstCol,
  getRowHeight: getRowHeightIn,
  className,
  classes
}) {
  // eslint-disable-next-line
  const getRowHeight = getRowHeightIn || (idx => null);

  const wrapValue = value => typeof value === 'string' ? external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.textRowBase, classes.row),
    variant: "body1"
  }, value) : value;

  const cells = values.map((value, idx) => {
    let style;
    const rowHeight = getRowHeight(idx);

    if (rowHeight != null) {
      style = {
        height: rowHeight
      };
    }

    return external_react_["createElement"]("div", {
      key: idx,
      className: external_classnames_default()({
        [classes.paddingLeft]: !firstCol,
        [classes.firstCol]: firstCol,
        [classes.baseRow]: true,
        [classes.row]: true,
        [classes.oddRow]: idx % 2 === 1,
        [classes.numeric]: !!numeric
      }),
      style: style
    }, wrapValue(value));
  });
  const element = external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.root]: true,
      [classes.alwaysVisible]: true,
      [classes.minWidth]: !minWidth
    }, className)
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()({
      [classes.paddingLeft]: !firstCol,
      [classes.firstCol]: firstCol,
      [classes.baseRow]: true,
      [classes.numeric]: !!numeric
    }, classes.headerWrap)
  }, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.textRowBase, classes.header, firstCol ? classes.firstColHeader : null),
    variant: "body1"
  }, name)), cells); // flowlint-next-line sketchy-null-string:off

  if (true) {
    return element;
  }

  return external_react_["createElement"](Hidden, {
    xsDown: visibleAt === 'xs',
    smDown: visibleAt === 'sm',
    mdDown: visibleAt === 'md',
    lgDown: visibleAt === 'lg',
    xlDown: visibleAt === 'xl',
    implementation: "js"
  }, element);
}

const Column_enhance = Object(external_recompose_["compose"])(withStyles(Column_styles), external_recompose_["pure"]);
/* harmony default export */ var table_Column = (Column_enhance(Column));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/table/Table.js






const Table_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      '& > div:last-child > div': {
        paddingRight: theme.spacing.unit
      }
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      '& > div:last-child > div': {
        paddingRight: theme.spacing.unit * 2
      }
    }
  },
  root: {
    display: 'flex'
  }
});

function Table({
  columns,
  getRowHeight,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, columns.map((col, idx) => external_react_["createElement"](table_Column, {
    key: col.name,
    className: col.className,
    name: col.name,
    values: col.values,
    numeric: col.numeric,
    visibleAt: col.visibleAt,
    firstCol: idx === 0,
    minWidth: col.minWidth,
    getRowHeight: getRowHeight
  })));
}

const Table_enhance = Object(external_recompose_["compose"])(withStyles(Table_styles), external_recompose_["pure"]);
/* harmony default export */ var table_Table = (Table_enhance(Table));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transfer/TransferTable.js












const TransferTable_styles = () => ({
  shrinkMaxCol: {
    flex: '1 100 auto',
    minWidth: 60
  },
  shrinkCol: {
    flex: '1 10 auto'
  }
});

function TransferTable({
  transfers,
  addressHash,
  className,
  classes
}) {
  const transferValues = [];
  const fromValues = [];
  const toValues = [];
  const valueValues = [];
  const assetValues = [];
  const timeValues = [];
  transfers.forEach(transfer => {
    transferValues.push(external_react_["createElement"](lib_TransferLink, {
      transfer: transfer
    }));
    fromValues.push(transfer.from_address_id == null ? external_react_["createElement"]("div", null) : external_react_["createElement"](lib_AddressLink, {
      addressHash: transfer.from_address_id,
      highlighted: transfer.from_address_id === addressHash
    }));
    toValues.push(transfer.to_address_id == null ? external_react_["createElement"]("div", null) : external_react_["createElement"](lib_AddressLink, {
      addressHash: transfer.to_address_id,
      highlighted: transfer.to_address_id === addressHash
    }));
    valueValues.push(external_react_["createElement"](lib_TransactionValue, {
      value: transfer.value
    }));
    assetValues.push(external_react_["createElement"](lib_AssetNameLink, {
      asset: transfer.asset
    }));
    timeValues.push(external_react_["createElement"](lib_BlockTime, {
      blockTime: transfer.block_time
    }));
  });
  const columns = [{
    name: 'Transfer',
    values: transferValues,
    className: classes.shrinkMaxCol
  }, {
    name: 'From',
    values: fromValues,
    className: classes.shrinkCol
  }, {
    name: 'To',
    values: toValues,
    className: classes.shrinkCol
  }, {
    name: 'Value',
    values: valueValues,
    numeric: true,
    minWidth: true
  }, {
    name: 'Asset',
    values: assetValues,
    minWidth: true
  }, {
    name: 'Time',
    values: timeValues,
    visibleAt: 'md',
    minWidth: true,
    numeric: true
  }];
  return external_react_["createElement"](table_Table, {
    className: className,
    columns: columns
  });
}

const TransferTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transfers: function () {
    const node = __webpack_require__(167);

    if (node.hash && node.hash !== "b2ee8cf22e56817d6c66c4f23d20b32c") {
      console.error("The definition of 'TransferTable_transfers' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(167);
  }
}), withStyles(TransferTable_styles), external_recompose_["pure"]);
/* harmony default export */ var transfer_TransferTable = (TransferTable_enhance(TransferTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transfer/TransferPagingView.js







function TransferPagingView({
  transfers,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  addressHash,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](transfer_TransferTable, {
      transfers: transfers,
      addressHash: addressHash
    }),
    isInitialLoad: !!isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    page: page,
    currentPageSize: transfers == null ? null : transfers.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: pageSize,
    onUpdatePage: onUpdatePage
  });
}

const TransferPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transfers: function () {
    const node = __webpack_require__(168);

    if (node.hash && node.hash !== "1625b7afad7dee8b0b0978c55b40b618") {
      console.error("The definition of 'TransferPagingView_transfers' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(168);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var transfer_TransferPagingView = (TransferPagingView_enhance(TransferPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressTransferPagingView.js


 // $FlowFixMe





const AddressTransferPagingView_PAGE_SIZE = 10;

function AddressTransferPagingView({
  address,
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transfers = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const currentAddress = currentProps == null ? null : currentProps.address;

  if (currentAddress != null) {
    transfers = currentAddress.transfers.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentAddress.transfers.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](transfer_TransferPagingView, {
    className: className,
    transfers: transfers,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: AddressTransferPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage,
    addressHash: address == null ? undefined : getID_getID(address.id)
  });
}

const AddressTransferPagingView_mapPropsToVariables = ({
  address,
  page
}) => address == null ? null : {
  hash: getID_getID(address.id),
  ...getPagingVariables(AddressTransferPagingView_PAGE_SIZE, page)
};

const AddressTransferPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(169);

    if (node.hash && node.hash !== "62d33f2b6b8e38668f33e175d07304d9") {
      console.error("The definition of 'AddressTransferPagingView_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(169);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(170);

  if (node.hash && node.hash !== "effcce37157ad1a5d4121bb9cd669d91") {
    console.error("The definition of 'AddressTransferPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(170);
}, {
  mapPropsToVariables: {
    client: AddressTransferPagingView_mapPropsToVariables
  },
  skipNullVariables: true
}), external_recompose_["pure"]);
/* harmony default export */ var address_AddressTransferPagingView = (AddressTransferPagingView_enhance(AddressTransferPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressViewExtra.js











const AddressViewExtra_styles = () => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function AddressViewExtra({
  address,
  className,
  classes
}) {
  let firstTransaction = null;

  if (address != null && address.first_transaction != null) {
    firstTransaction = external_react_["createElement"](card_ExpandoCard, {
      title: "First Transaction",
      content: external_react_["createElement"](summary_TransactionSummary, {
        transaction: address.first_transaction,
        addressHash: getID_getID(address.id),
        alwaysExpand: true
      })
    });
  }

  const transactions = external_react_["createElement"](card_ExpandoCard, {
    title: "Transactions",
    content: external_react_["createElement"](address_AddressTransactionPagingView, {
      address: address
    })
  });
  const transfers = external_react_["createElement"](card_ExpandoCard, {
    title: "Transfers",
    content: external_react_["createElement"](address_AddressTransferPagingView, {
      address: address
    })
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, firstTransaction, transactions, transfers);
}

const AddressViewExtra_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(171);

    if (node.hash && node.hash !== "01c13c763ebbd21178e4f24a4b031de6") {
      console.error("The definition of 'AddressViewExtra_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(171);
  }
}), withStyles(AddressViewExtra_styles), external_recompose_["pure"]);
/* harmony default export */ var address_AddressViewExtra = (AddressViewExtra_enhance(AddressViewExtra));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressView.js














const AddressView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    upsell: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    upsell: {
      padding: theme.spacing.unit * 2
    }
  },
  upsell: {
    borderTop: `1px solid ${theme.custom.lightDivider}`
  }
});

function AddressView({
  hash,
  address,
  className,
  classes
}) {
  const coins = address == null ? [] : address.coins.edges.map(edge => edge.node);
  const sortedCoins = getSortedCoins(coins);
  const unclaimed = address == null ? ZERO_GAS_COIN : address.claim_value_available_coin;
  const columns = [['Hash', hash], ['Balance', external_react_["createElement"](lib_CoinTable, {
    coins: coins
  }), sortedCoins.length * COIN_TABLE_ROW_HEIGHT], ['Unclaimed', external_react_["createElement"](lib_Coin, {
    coin: unclaimed
  })]];

  if (address != null) {
    columns.push(['Created', external_react_["createElement"](lib_TransactionTimeLink, {
      transactionHash: address.transaction_hash,
      blockTime: address.block_time
    })]);
  }

  columns.push(['Transactions', formatNumber(address == null ? 0 : address.transaction_count)]);
  columns.push(['Transfers', formatNumber(address == null ? 0 : address.transfer_count)]);
  return external_react_["createElement"](view_PageView, {
    className: className,
    id: hash,
    title: "Address",
    name: "Address",
    pluralName: "Addresses",
    searchRoute: makeAddressSearch(1),
    bodyColumns: columns,
    extraCard: external_react_["createElement"](upsell_WalletPageUpsell, {
      className: classes.upsell,
      source: "ADDRESS"
    }),
    extra: external_react_["createElement"](address_AddressViewExtra, {
      address: address
    })
  });
}

const AddressView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(172);

    if (node.hash && node.hash !== "e1baa2863d319f3e8e39d4b4cbb7cc2d") {
      console.error("The definition of 'AddressView_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(172);
  }
}), withStyles(AddressView_styles), external_recompose_["pure"]);
/* harmony default export */ var address_AddressView = (AddressView_enhance(AddressView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/error/Error404.js
/* eslint-disable react/jsx-curly-brace-presence */





const Error404_styles = () => ({
  root: {
    padding: 16
  },
  card: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    padding: 24
  },
  headline: {
    paddingBottom: 8
  }
});

const Error404 = ({
  classes
}) => external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, '404')), external_react_["createElement"](Grid, {
  className: classes.root,
  container: true,
  justify: "center"
}, external_react_["createElement"](Grid, {
  item: true,
  xs: 12,
  md: 8,
  lg: 4
}, external_react_["createElement"](Card, {
  className: classes.card
}, external_react_["createElement"](Typography, {
  variant: "headline",
  className: classes.headline
}, "Sorry, that page was not found."), external_react_["createElement"](Typography, {
  variant: "subheading"
}, "Try going back to where you were or heading to the home page.")))));

const Error404_enhance = Object(external_recompose_["compose"])(withStyles(Error404_styles), external_recompose_["pure"]);
/* harmony default export */ var error_Error404 = (Error404_enhance(Error404));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Address.js
/* eslint-disable react/jsx-curly-brace-presence */











function Address_Address({
  props,
  error,
  retry,
  match,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  let hash = match.params.addressHash;

  try {
    Object(client_["addressToScriptHash"])(hash);
  } catch (err) {
    hash = null;
  }

  if (hash == null) {
    return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Address')), external_react_["createElement"](error_Error404, null));
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, `Address ${hash}`)), external_react_["createElement"](address_AddressView, {
    hash: hash,
    address: props.address
  }));
}

const Address_mapPropsToVariables = ({
  match
}) => ({
  hash: match.params.addressHash
});

/* harmony default export */ var pages_Address = (queryRenderer(function () {
  const node = __webpack_require__(173);

  if (node.hash && node.hash !== "51c3731b6bd28ae1927cbd3bb77c025b") {
    console.error("The definition of 'AddressQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(173);
}, {
  mapPropsToVariables: {
    client: Address_mapPropsToVariables,
    server: Address_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), external_recompose_["pure"])(Address_Address)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressTable.js









function AddressTable({
  addresses,
  renderCoin,
  getRowHeight,
  className
}) {
  const addressValues = [];
  const createdAtValues = [];
  const lastTransactionValues = [];
  const transactionsValues = [];
  const coinValues = [];
  addresses.forEach(address => {
    addressValues.push(external_react_["createElement"](lib_AddressLink, {
      addressHash: getID_getID(address.id)
    }));
    createdAtValues.push(external_react_["createElement"](lib_TransactionTimeLink, {
      transactionHash: address.transaction_hash,
      blockTime: address.block_time
    }));
    lastTransactionValues.push(external_react_["createElement"](lib_TransactionTimeLink, {
      transactionHash: address.last_transaction_hash,
      blockTime: address.last_transaction_time
    }));
    transactionsValues.push(formatNumber(address.transaction_count));
    coinValues.push(renderCoin(getID_getID(address.id)));
  });
  const columns = [{
    name: 'Address',
    values: addressValues
  }, {
    name: 'Created',
    values: createdAtValues,
    visibleAt: 'sm'
  }, {
    name: 'Last Transaction',
    values: lastTransactionValues,
    visibleAt: 'sm'
  }, {
    name: 'Transactions',
    numeric: true,
    values: transactionsValues,
    visibleAt: 'xs'
  }, {
    name: 'Coins',
    numeric: true,
    values: coinValues,
    minWidth: true
  }];
  return external_react_["createElement"](table_Table, {
    className: className,
    columns: columns,
    getRowHeight: getRowHeight
  });
}

const AddressTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  addresses: function () {
    const node = __webpack_require__(159);

    if (node.hash && node.hash !== "77ee13850d14636c20560d3877ec6d17") {
      console.error("The definition of 'AddressTable_addresses' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(159);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var address_AddressTable = (AddressTable_enhance(AddressTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/address/AddressPagingView.js







function AddressPagingView({
  addresses,
  renderCoin,
  getRowHeight,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](address_AddressTable, {
      addresses: addresses,
      renderCoin: renderCoin,
      getRowHeight: getRowHeight
    }),
    isInitialLoad: !!isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    page: page,
    pageSize: pageSize,
    currentPageSize: addresses == null ? null : addresses.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    onUpdatePage: onUpdatePage
  });
}

const AddressPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  addresses: function () {
    const node = __webpack_require__(160);

    if (node.hash && node.hash !== "85443bcedd4e9fe8aa5f69f59e98a3ee") {
      console.error("The definition of 'AddressPagingView_addresses' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(160);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var address_AddressPagingView = (AddressPagingView_enhance(AddressPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/CommonHeader.js







const CommonHeader_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    },
    leftHeader: {
      marginBottom: theme.spacing.unit
    },
    rightHeader: {
      marginBottom: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2
    },
    leftHeader: {
      marginBottom: theme.spacing.unit * 2
    },
    rightHeader: {
      marginBottom: theme.spacing.unit * 2
    }
  },
  root: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap',
    justifyContent: 'space-between'
  },
  leftHeader: {
    alignItems: 'center',
    display: 'flex'
  },
  rightHeader: {
    alignItems: 'center',
    display: 'flex'
  },
  static: {
    overflow: 'initial'
  },
  margin: {
    marginRight: theme.spacing.unit
  },
  text: {
    color: '#001E7F'
  },
  link: {
    color: '#001E7F',
    textDecoration: 'underline',
    '&:hover': {
      opacity: 0.8
    }
  },
  linkSelected: {
    color: '#001E7F',
    opacity: 0.8,
    textDecoration: 'underline'
  },
  backgroundColor: {
    backgroundColor: 'rgba(255, 255, 255, 0.85)'
  }
});

// TODO: INTL
function CommonHeader({
  id,
  title,
  name,
  pluralName,
  searchRoute,
  icon,
  backgroundColorClassName,
  className,
  classes
}) {
  const breadcrumbVariant = 'body1';
  const slash = external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.text, classes.margin, classes.static),
    variant: breadcrumbVariant
  }, "/");
  let iconElement = null;

  if (icon != null) {
    iconElement = external_react_["createElement"](base_Icon, {
      className: external_classnames_default()(classes.margin, classes.text)
    }, icon);
  }

  let idElement = null;
  let infoElement = null;
  let searchElement = external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.linkSelected, classes.static),
    variant: breadcrumbVariant
  }, pluralName);

  if (id != null && searchRoute != null) {
    idElement = external_react_["createElement"](Typography, {
      className: classes.text,
      variant: "body2"
    }, id);
    searchElement = external_react_["createElement"](link_Link, {
      className: external_classnames_default()(classes.link, classes.margin, classes.static),
      variant: breadcrumbVariant,
      path: searchRoute,
      title: pluralName
    });
    infoElement = external_react_["createElement"](Typography, {
      className: external_classnames_default()(classes.linkSelected, classes.static),
      variant: breadcrumbVariant
    }, name, " Information");
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className, backgroundColorClassName == null ? classes.backgroundColor : backgroundColorClassName)
  }, external_react_["createElement"]("div", {
    className: classes.leftHeader
  }, iconElement, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.margin, classes.text),
    component: "h1",
    variant: "title"
  }, title == null ? pluralName : title), idElement), external_react_["createElement"]("div", {
    className: classes.rightHeader
  }, external_react_["createElement"](link_Link, {
    className: external_classnames_default()(classes.link, classes.margin, classes.static),
    variant: breadcrumbVariant,
    path: HOME,
    title: "Home"
  }), slash, searchElement, infoElement == null ? null : slash, infoElement));
}

const CommonHeader_enhance = Object(external_recompose_["compose"])(withStyles(CommonHeader_styles), external_recompose_["pure"]);
/* harmony default export */ var view_CommonHeader = (CommonHeader_enhance(CommonHeader));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/common/view/SearchView.js






function SearchView({
  name,
  pluralName,
  content,
  className
}) {
  return external_react_["createElement"](layout_CenteredView, {
    className: className
  }, external_react_["createElement"](Card, {
    className: "transaction-page-table"
  }, external_react_["createElement"](view_CommonHeader, {
    name: name,
    pluralName: pluralName
  }), content));
}

const SearchView_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var view_SearchView = (SearchView_enhance(SearchView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/commonSearch.js
// $FlowFixMe

const commonSearch_PAGE_SIZE = 20;
const getPage = match => match.params.page == null ? 1 : tryParseInt({
  value: match.params.page,
  default: 1
});
const commonSearch_mapPropsToVariables = pageSize => ({
  match
}) => {
  const page = getPage(match);
  return {
    first: pageSize,
    after: page === 1 ? null : ((page - 1) * pageSize - 1).toString()
  };
};
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/AddressSearch.js
/* eslint-disable react/jsx-curly-brace-presence */















function AddressSearch({
  props,
  error,
  retry,
  lastProps,
  match,
  onUpdatePage,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let addresses = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const addressesMap = {};
  const rowHeightMap = {};

  const renderCoin = hash => external_react_["createElement"](lib_CoinTable, {
    coins: addressesMap[hash].coins.edges.map(coinEdge => coinEdge.node)
  });

  const getRowHeight = idx => rowHeightMap[idx];

  const page = getPage(match);

  if (currentProps != null) {
    addresses = currentProps.addresses.edges.map(edge => edge.node);
    currentProps.addresses.edges.forEach((edge, idx) => {
      addressesMap[getID_getID(edge.node.id)] = edge.node;
      const sortedCoins = getSortedCoins(edge.node.coins.edges.map(coinEdge => coinEdge.node));
      rowHeightMap[idx] = sortedCoins.length * COIN_TABLE_ROW_HEIGHT;
    }); // eslint-disable-next-line

    hasNextPage = currentProps.addresses.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Browse Addresses')), external_react_["createElement"](view_SearchView, {
    className: className,
    name: "Address",
    pluralName: "Addresses",
    content: external_react_["createElement"](address_AddressPagingView, {
      addresses: addresses,
      renderCoin: renderCoin,
      isInitialLoad: currentProps == null,
      isLoadingMore: props == null,
      page: page,
      hasNextPage: hasNextPage,
      hasPreviousPage: hasPreviousPage,
      pageSize: commonSearch_PAGE_SIZE,
      onUpdatePage: onUpdatePage,
      getRowHeight: getRowHeight
    })
  }));
}

/* harmony default export */ var pages_AddressSearch = (queryRenderer(function () {
  const node = __webpack_require__(161);

  if (node.hash && node.hash !== "f393a032080f1d13e44a484710244ff9") {
    console.error("The definition of 'AddressSearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(161);
}, {
  mapPropsToVariables: {
    client: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE),
    server: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE)
  }
})(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withHandlers"])({
  onUpdatePage: ({
    history
  }) => page => history.push(makeAddressSearch(page))
}), external_recompose_["pure"])(AddressSearch)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetAddressPagingView.js


 // $FlowFixMe






const AssetAddressPagingView_PAGE_SIZE = 10;

function AssetAddressPagingView({
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let coins = [];
  let addresses = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const asset = currentProps == null ? null : currentProps.asset;

  if (asset != null) {
    coins = asset.coins.edges.map(edge => edge.node);
    addresses = coins.map(coin => coin.address); // eslint-disable-next-line

    hasNextPage = asset.coins.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  const coinMap = {};
  coins.forEach(coin => {
    coinMap[getID_getID(coin.address.id)] = coin;
  });
  return external_react_["createElement"](address_AddressPagingView, {
    className: className,
    addresses: addresses,
    renderCoin: hash => external_react_["createElement"](lib_Coin, {
      coin: coinMap[hash]
    }),
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: AssetAddressPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const AssetAddressPagingView_mapPropsToVariables = ({
  asset,
  page
}) => ({
  hash: getID_getID(asset.id),
  ...getPagingVariables(AssetAddressPagingView_PAGE_SIZE, page)
});

const AssetAddressPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(177);

    if (node.hash && node.hash !== "c555b39b11659e816a0549cae4e0fb52") {
      console.error("The definition of 'AssetAddressPagingView_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(177);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(178);

  if (node.hash && node.hash !== "b2a4ce85cf41d3041da37a0910bb16e7") {
    console.error("The definition of 'AssetAddressPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(178);
}, {
  mapPropsToVariables: {
    client: AssetAddressPagingView_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetAddressPagingView = (AssetAddressPagingView_enhance(AssetAddressPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetTransactionPagingView.js


 // $FlowFixMe





const AssetTransactionPagingView_PAGE_SIZE = 10;

function AssetTransactionPagingView({
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transactions = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const asset = currentProps == null ? null : currentProps.asset;

  if (asset != null) {
    transactions = asset.transactions.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = asset.transactions.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](transaction_TransactionPagingView, {
    className: className,
    transactions: transactions,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: AssetTransactionPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const AssetTransactionPagingView_mapPropsToVariables = ({
  asset,
  page
}) => ({
  hash: getID_getID(asset.id),
  ...getPagingVariables(AssetTransactionPagingView_PAGE_SIZE, page)
});

const AssetTransactionPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(179);

    if (node.hash && node.hash !== "98290771581249e8e5e32fcefd92a4a1") {
      console.error("The definition of 'AssetTransactionPagingView_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(179);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(180);

  if (node.hash && node.hash !== "bd69ebc207cd3673b421e0c694e60d9f") {
    console.error("The definition of 'AssetTransactionPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(180);
}, {
  mapPropsToVariables: {
    client: AssetTransactionPagingView_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetTransactionPagingView = (AssetTransactionPagingView_enhance(AssetTransactionPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetTransferPagingView.js


 // $FlowFixMe





const AssetTransferPagingView_PAGE_SIZE = 10;

function AssetTransferPagingView({
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transfers = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const asset = currentProps == null ? null : currentProps.asset;

  if (asset != null) {
    transfers = asset.transfers.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = asset.transfers.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](transfer_TransferPagingView, {
    className: className,
    transfers: transfers,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: AssetTransferPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const AssetTransferPagingView_mapPropsToVariables = ({
  asset,
  page
}) => ({
  hash: getID_getID(asset.id),
  ...getPagingVariables(AssetTransferPagingView_PAGE_SIZE, page)
});

const AssetTransferPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(181);

    if (node.hash && node.hash !== "2543daa0b6f60fe74c0de677ac0280c1") {
      console.error("The definition of 'AssetTransferPagingView_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(181);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(182);

  if (node.hash && node.hash !== "950fd2e7c5dbf9d70d6d57ad308a8d5f") {
    console.error("The definition of 'AssetTransferPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(182);
}, {
  mapPropsToVariables: {
    client: AssetTransferPagingView_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetTransferPagingView = (AssetTransferPagingView_enhance(AssetTransferPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetViewExtra.js












const AssetViewExtra_styles = () => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function AssetViewExtra({
  asset,
  className,
  classes
}) {
  const addresses = external_react_["createElement"](card_ExpandoCard, {
    title: "Addresses",
    content: external_react_["createElement"](asset_AssetAddressPagingView, {
      asset: asset
    })
  });
  const registerTransaction = external_react_["createElement"](card_ExpandoCard, {
    title: "Registered",
    content: external_react_["createElement"](summary_TransactionSummary, {
      transaction: asset.register_transaction,
      alwaysExpand: true
    })
  });
  const transactions = external_react_["createElement"](card_ExpandoCard, {
    title: "Transactions",
    content: external_react_["createElement"](asset_AssetTransactionPagingView, {
      asset: asset
    })
  });
  let transfers;

  if (asset.type === 'NEP5') {
    transfers = external_react_["createElement"](card_ExpandoCard, {
      title: "Transfers",
      content: external_react_["createElement"](asset_AssetTransferPagingView, {
        asset: asset
      })
    });
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, registerTransaction, addresses, transactions, transfers);
}

const AssetViewExtra_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(183);

    if (node.hash && node.hash !== "d428eaae6588d99708739ab463f7948e") {
      console.error("The definition of 'AssetViewExtra_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(183);
  }
}), withStyles(AssetViewExtra_styles), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetViewExtra = (AssetViewExtra_enhance(AssetViewExtra));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetView.js
// $FlowFixMe













function AssetView({
  asset,
  className
}) {
  let supply = formatNumber(asset.amount);

  if (asset.type === 'NEP5') {
    supply = formatNumber(asset.issued);
  }

  const columns = [['Hash', getID_getID(asset.id)], ['Type', asset.type], ['Name', lib_getName(asset.name, getID_getID(asset.id))], ['Symbol', lib_getName(asset.symbol, getID_getID(asset.id))], ['Supply', supply], getID_getID(asset.id) === constants["a" /* GAS_ASSET_HASH */] ? ['Available', formatNumber(asset.available)] : null, ['Issued', formatNumber(asset.issued)], ['Precision', formatNumber(asset.precision)], asset.admin_address_id != null ? ['Owner', external_react_["createElement"](lib_AddressLink, {
    addressHash: asset.admin_address_id
  })] : null, ['Created', external_react_["createElement"](lib_TransactionTimeLink, {
    transactionHash: asset.transaction_hash,
    blockTime: asset.block_time
  })], ['Transactions', formatNumber(asset.transaction_count)], asset.type === 'NEP5' ? ['Transfers', formatNumber(asset.transfer_count)] : null, ['Addresses', formatNumber(asset.address_count)]].filter(Boolean);
  return external_react_["createElement"](view_PageView, {
    className: className,
    id: getID_getID(asset.id),
    title: "Asset",
    name: "Asset",
    pluralName: "Assets",
    searchRoute: makeAssetSearch(1),
    bodyColumns: columns,
    extra: external_react_["createElement"](asset_AssetViewExtra, {
      asset: asset
    })
  });
}

const AssetView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  asset: function () {
    const node = __webpack_require__(184);

    if (node.hash && node.hash !== "d443fd0ab5f6cf93050eaaadbf27d489") {
      console.error("The definition of 'AssetView_asset' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(184);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetView = (AssetView_enhance(AssetView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Asset.js
/* eslint-disable react/jsx-curly-brace-presence */











function Asset_Asset({
  props,
  error,
  retry,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  if (props.asset == null) {
    return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Asset')), external_react_["createElement"](error_Error404, null));
  }

  const name = lib_getName(props.asset.symbol, getID_getID(props.asset.id));
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, `${name}`)), external_react_["createElement"](asset_AssetView, {
    asset: props.asset
  }));
}

const Asset_mapPropsToVariables = ({
  match
}) => ({
  hash: match.params.assetHash
});

/* harmony default export */ var pages_Asset = (queryRenderer(function () {
  const node = __webpack_require__(185);

  if (node.hash && node.hash !== "34d2ec6a309946235e640aa255f6323b") {
    console.error("The definition of 'AssetQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(185);
}, {
  mapPropsToVariables: {
    client: Asset_mapPropsToVariables,
    server: Asset_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(external_recompose_["pure"])(Asset_Asset)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetTable.js









function AssetTable({
  assets,
  className
}) {
  const assetValues = [];
  const typeValues = [];
  const supplyValues = [];
  const issuedValues = [];
  const addressCountValues = [];
  const transactionCountValues = [];
  const registeredAt = [];
  assets.forEach(asset => {
    let supply = asset.amount === '-0.00000001' ? 'Unlimited' : formatNumber(asset.amount);

    if (asset.type === 'NEP5') {
      supply = formatNumber(asset.issued);
    }

    assetValues.push(external_react_["createElement"](lib_AssetNameLink, {
      asset: asset
    }));
    typeValues.push(asset.type);
    supplyValues.push(supply);
    issuedValues.push(formatNumber(asset.issued));
    addressCountValues.push(formatNumber(asset.address_count));
    transactionCountValues.push(formatNumber(asset.transaction_count));
    registeredAt.push(external_react_["createElement"](lib_TransactionTimeLink, {
      transactionHash: asset.transaction_hash,
      blockTime: asset.block_time
    }));
  });
  const columns = [{
    name: 'Asset',
    values: assetValues
  }, {
    name: 'Type',
    values: typeValues
  }, {
    name: 'Supply',
    numeric: true,
    values: supplyValues,
    visibleAt: 'sm',
    minWidth: true
  }, {
    name: 'Issued',
    numeric: true,
    values: issuedValues,
    visibleAt: 'sm',
    minWidth: true
  }, {
    name: 'Addresses',
    numeric: true,
    values: addressCountValues,
    visibleAt: 'xs'
  }, {
    name: 'Transactions',
    numeric: true,
    values: transactionCountValues
  }, {
    name: 'Registered',
    values: registeredAt,
    visibleAt: 'md'
  }];
  return external_react_["createElement"](table_Table, {
    className: className,
    columns: columns
  });
}

const AssetTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  assets: function () {
    const node = __webpack_require__(174);

    if (node.hash && node.hash !== "b235794ee6547d1973c7309861ef7bbf") {
      console.error("The definition of 'AssetTable_assets' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(174);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetTable = (AssetTable_enhance(AssetTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/asset/AssetPagingView.js







function AssetPagingView({
  assets,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  pageSize,
  hasPreviousPage,
  hasNextPage,
  onUpdatePage,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](asset_AssetTable, {
      assets: assets
    }),
    isLoadingMore: isLoadingMore,
    isInitialLoad: !!isInitialLoad,
    error: error,
    page: page,
    currentPageSize: assets == null ? null : assets.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: pageSize,
    onUpdatePage: onUpdatePage
  });
}

const AssetPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  assets: function () {
    const node = __webpack_require__(175);

    if (node.hash && node.hash !== "e6eb9e2ca8fb1d990c6fc3868d6d3819") {
      console.error("The definition of 'AssetPagingView_assets' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(175);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var asset_AssetPagingView = (AssetPagingView_enhance(AssetPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/AssetSearch.js
/* eslint-disable react/jsx-curly-brace-presence */












function AssetSearch({
  props,
  error,
  retry,
  lastProps,
  match,
  onUpdatePage,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let assets = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const page = getPage(match);

  if (currentProps != null) {
    assets = currentProps.assets.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentProps.assets.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Browse Assets')), external_react_["createElement"](view_SearchView, {
    className: className,
    name: "Asset",
    pluralName: "Assets",
    content: external_react_["createElement"](asset_AssetPagingView, {
      assets: assets,
      isInitialLoad: currentProps == null,
      isLoadingMore: props == null,
      page: page,
      hasNextPage: hasNextPage,
      hasPreviousPage: hasPreviousPage,
      pageSize: commonSearch_PAGE_SIZE,
      onUpdatePage: onUpdatePage
    })
  }));
}

/* harmony default export */ var pages_AssetSearch = (queryRenderer(function () {
  const node = __webpack_require__(176);

  if (node.hash && node.hash !== "3ecfd4b96256e4f43f120ae4d2fac0ae") {
    console.error("The definition of 'AssetSearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(176);
}, {
  mapPropsToVariables: {
    client: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE),
    server: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE)
  }
})(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withHandlers"])({
  onUpdatePage: ({
    history
  }) => page => history.push(makeAssetSearch(page))
}), external_recompose_["pure"])(AssetSearch)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/lib/getBlockSize.js

/* harmony default export */ var getBlockSize = (size => `${formatNumber(size)} Bytes`);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/lib/BlockHashLink.js





function BlockHashLink({
  blockHash,
  className
}) {
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: makeBlockHash(blockHash),
    title: blockHash
  });
}

const BlockHashLink_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_BlockHashLink = (BlockHashLink_enhance(BlockHashLink));
// EXTERNAL MODULE: external "@neo-one/client-core"
var client_core_ = __webpack_require__(87);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/script/Script.js
/* eslint-disable */






const Script_styles = theme => ({
  script: {
    backgroundColor: theme.palette.grey[200],
    ...theme.custom.code.text,
    maxHeight: 400,
    maxWidth: '100%',
    resize: 'vertical',
    overflow: 'auto',
    padding: theme.spacing.unit,
    border: `1px solid ${theme.custom.lightDivider}`,
    margin: 0
  },
  scriptSmall: {
    height: 80
  },
  scriptLarge: {
    height: 160
  },
  opCodesScript: {
    whiteSpace: 'nowrap'
  },
  byteCodesScript: {
    wordBreak: 'break-word',
    wordWrap: 'break-word',
    whiteSpace: 'pre-wrap'
  },
  opCodes: {
    display: 'flex'
  },
  firstOpCodesCol: {
    flex: '0 0 auto',
    marginRight: theme.spacing.unit
  },
  opCodesCol: {
    display: 'flex',
    flexDirection: 'column'
  },
  footer: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end',
    paddingTop: theme.spacing.unit
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function script_Script_Script({
  script,
  className,
  showOpCodes,
  onShowByteCodes,
  onShowOpCodes,
  opCodes,
  classes
}) {
  let scriptClass;
  let scriptElement;
  let onClick;
  let buttonText;

  if (showOpCodes) {
    if (opCodes != null) {
      scriptClass = classes.opCodesScript;
      scriptElement = external_react_["createElement"]("div", {
        className: classes.opCodes
      }, external_react_["createElement"]("div", {
        className: external_classnames_default()(classes.firstOpCodesCol, classes.opCodesCol)
      }, opCodes.map(([value, opCode], idx) => external_react_["createElement"]("div", {
        key: idx
      }, value))), external_react_["createElement"]("div", {
        className: classes.opCodesCol
      }, opCodes.map(([value, opCode], idx) => external_react_["createElement"]("div", {
        key: idx
      }, opCode))));
    } else {
      scriptElement = 'Failed to decompile byte codes.';
    }

    onClick = onShowByteCodes;
    buttonText = 'VIEW BYTECODE';
  } else {
    scriptClass = classes.byteCodesScript;
    scriptElement = script;
    onClick = onShowOpCodes;
    buttonText = 'VIEW OPCODE';
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"]("pre", {
    className: external_classnames_default()(classes.script, scriptClass, {
      [classes.scriptLarge]: opCodes != null && opCodes.length >= 8,
      [classes.scriptSmall]: opCodes == null || opCodes.length < 8
    })
  }, scriptElement), external_react_["createElement"]("div", {
    className: classes.footer
  }, external_react_["createElement"](Button, {
    color: "primary",
    variant: "raised",
    onClick: onClick
  }, external_react_["createElement"](Typography, {
    variant: "body1",
    className: classes.buttonText
  }, buttonText))));
}

const Script_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withPropsOnChange"])(['script'], ({
  script
}) => {
  try {
    return {
      opCodes: Object(client_core_["disassembleByteCode"])(Buffer.from(script, 'hex')).map(({
        value: original
      }) => {
        const [idx, value] = original.split(':');
        return [`${idx}:`, value];
      }),
      error: null
    };
  } catch (error) {
    return {
      opCodes: null,
      error
    };
  }
}), Object(external_recompose_["withState"])('state', 'setState', () => ({
  showOpCodes: true
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onShowOpCodes: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showOpCodes: true
  })),
  onShowByteCodes: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    showOpCodes: false
  }))
}), withStyles(Script_styles), external_recompose_["pure"]);
/* harmony default export */ var script_Script = (Script_enhance(script_Script_Script));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/BlockTransactionPagingView.js


 // $FlowFixMe





const BlockTransactionPagingView_PAGE_SIZE = 10;

function BlockTransactionPagingView({
  className,
  props,
  error,
  lastProps,
  page,
  onUpdatePage
}) {
  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transactions = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const block = currentProps == null ? null : currentProps.block;

  if (block != null) {
    transactions = block.transactions.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = block.transactions.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"](transaction_TransactionPagingView, {
    className: className,
    transactions: transactions,
    isInitialLoad: currentProps == null,
    isLoadingMore: props == null,
    error: error == null ? null : sanitizeError(error).clientMessage,
    page: page,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: BlockTransactionPagingView_PAGE_SIZE,
    onUpdatePage: onUpdatePage
  });
}

const BlockTransactionPagingView_mapPropsToVariables = ({
  block,
  page
}) => ({
  index: getNumericID(block.id),
  ...getPagingVariables(BlockTransactionPagingView_PAGE_SIZE, page)
});

const BlockTransactionPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  block: function () {
    const node = __webpack_require__(188);

    if (node.hash && node.hash !== "ed887ca91cf4a69f6ceac3fea21c1903") {
      console.error("The definition of 'BlockTransactionPagingView_block' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(188);
  }
}), Object(external_recompose_["withStateHandlers"])(() => ({
  page: 1
}), {
  onUpdatePage: prevState => page => ({ ...prevState,
    page
  })
}), queryRenderer(function () {
  const node = __webpack_require__(189);

  if (node.hash && node.hash !== "f99bc674b14c73bce54abcd354dfddec") {
    console.error("The definition of 'BlockTransactionPagingViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(189);
}, {
  mapPropsToVariables: {
    client: BlockTransactionPagingView_mapPropsToVariables
  }
}), external_recompose_["pure"]);
/* harmony default export */ var block_BlockTransactionPagingView = (BlockTransactionPagingView_enhance(BlockTransactionPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/BlockViewExtra.js










const BlockViewExtra_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {},
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function BlockViewExtra({
  block,
  className,
  classes
}) {
  const transactions = external_react_["createElement"](card_ExpandoCard, {
    title: "Transactions",
    content: external_react_["createElement"](block_BlockTransactionPagingView, {
      block: block
    })
  });
  const invocation = external_react_["createElement"](card_ExpandoCard, {
    title: "Invocation Script",
    content: external_react_["createElement"](script_Script, {
      className: classes.padding,
      script: block.script.invocation_script
    })
  });
  const verification = external_react_["createElement"](card_ExpandoCard, {
    title: "Verification Script",
    content: external_react_["createElement"](script_Script, {
      className: classes.padding,
      script: block.script.verification_script
    })
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, transactions, invocation, verification);
}

const BlockViewExtra_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  block: function () {
    const node = __webpack_require__(190);

    if (node.hash && node.hash !== "3f2bb3e8a16d7e3a6460d5c9c37bffdd") {
      console.error("The definition of 'BlockViewExtra_block' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(190);
  }
}), withStyles(BlockViewExtra_styles), external_recompose_["pure"]);
/* harmony default export */ var block_BlockViewExtra = (BlockViewExtra_enhance(BlockViewExtra));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/BlockView.js











function BlockView({
  block,
  className
}) {
  const columns = [['Hash', block.hash], ['Index', formatNumber(getID_getID(block.id))], ['Time', external_react_["createElement"](lib_BlockTime, {
    blockTime: block.time
  })]];

  if (block.validator_address_id != null) {
    columns.push(...[['Validator', external_react_["createElement"](lib_AddressLink, {
      addressHash: block.validator_address_id
    })]]);
  }

  columns.push(...[['Size', getBlockSize(block.size)], ['Version', formatNumber(block.version)], ['Merkle Root', block.merkle_root], ['Transactions', formatNumber(block.transaction_count)]]);

  if (block.previous_block_hash != null) {
    columns.push(['Previous Block', external_react_["createElement"](lib_BlockHashLink, {
      blockHash: block.previous_block_hash
    })]);
  }

  if (block.next_block_hash != null) {
    columns.push(['Next Block', external_react_["createElement"](lib_BlockHashLink, {
      blockHash: block.next_block_hash
    })]);
  }

  return external_react_["createElement"](view_PageView, {
    className: className,
    id: block.hash,
    title: "Block",
    name: "Block",
    pluralName: "Blocks",
    searchRoute: makeBlockSearch(1),
    bodyColumns: columns,
    extra: external_react_["createElement"](block_BlockViewExtra, {
      block: block
    })
  });
}

const BlockView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  block: function () {
    const node = __webpack_require__(191);

    if (node.hash && node.hash !== "952cf7784552d0246a6908510315ff36") {
      console.error("The definition of 'BlockView_block' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(191);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var block_BlockView = (BlockView_enhance(BlockView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Block.js
/* eslint-disable react/jsx-curly-brace-presence */










function Block_Block({
  props,
  error,
  retry,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  if (props.block == null) {
    return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Block')), external_react_["createElement"](error_Error404, null));
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, `Block ${getNumericID(props.block.id)}`)), external_react_["createElement"](block_BlockView, {
    block: props.block
  }));
}

const Block_mapPropsToVariables = ({
  match
}) => ({
  hash: match.params.blockHash,
  index: match.params.blockIndex
});

/* harmony default export */ var pages_Block = (queryRenderer(function () {
  const node = __webpack_require__(192);

  if (node.hash && node.hash !== "5ee7a69c4768655426b47561cad77bba") {
    console.error("The definition of 'BlockQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(192);
}, {
  mapPropsToVariables: {
    client: Block_mapPropsToVariables,
    server: Block_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(external_recompose_["pure"])(Block_Block)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/lib/BlockIndexLink.js






function BlockIndexLink({
  blockIndex,
  className
}) {
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: makeBlockIndex(blockIndex),
    title: formatNumber(blockIndex)
  });
}

const BlockIndexLink_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_BlockIndexLink = (BlockIndexLink_enhance(BlockIndexLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/BlockTable.js










const BlockTable_styles = () => ({
  transactionsCol: {
    flex: '1 100 auto',
    maxWidth: 80
  },
  validatorCol: {
    flex: '1 100 auto'
  }
});

function BlockTable({
  blocks,
  sizeVisibleAt,
  validatorVisibleAt,
  className,
  classes
}) {
  const heightValues = [];
  const timeValues = [];
  const transactionsValues = [];
  const validatorValues = [];
  const sizeValues = [];
  blocks.forEach(block => {
    heightValues.push(external_react_["createElement"](lib_BlockIndexLink, {
      blockIndex: getNumericID(block.id)
    }));
    timeValues.push(external_react_["createElement"](lib_BlockTime, {
      blockTime: block.time
    }));
    transactionsValues.push(formatNumber(block.transaction_count));
    validatorValues.push(block.validator_address_id == null ? 'Genesis' : external_react_["createElement"](lib_AddressLink, {
      addressHash: block.validator_address_id
    }));
    sizeValues.push(getBlockSize(block.size));
  });
  const columns = [{
    name: 'Index',
    values: heightValues,
    minWidth: true
  }, {
    name: 'Time',
    values: timeValues,
    minWidth: true
  }, {
    name: 'Transactions',
    numeric: true,
    values: transactionsValues,
    className: classes.transactionsCol
  }, {
    name: 'Validator',
    values: validatorValues,
    visibleAt: validatorVisibleAt,
    className: classes.validatorCol
  }, {
    name: 'Size',
    values: sizeValues,
    visibleAt: sizeVisibleAt
  }];
  return external_react_["createElement"](table_Table, {
    className: className,
    columns: columns
  });
}

const BlockTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  blocks: function () {
    const node = __webpack_require__(129);

    if (node.hash && node.hash !== "fd69e0df7270a37b71222ff2d6a3011f") {
      console.error("The definition of 'BlockTable_blocks' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(129);
  }
}), withStyles(BlockTable_styles), external_recompose_["pure"]);
/* harmony default export */ var block_BlockTable = (BlockTable_enhance(BlockTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/block/BlockPagingView.js







function BlockPagingView({
  blocks,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  hasPreviousPage,
  hasNextPage,
  pageSize,
  onUpdatePage,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](block_BlockTable, {
      blocks: blocks,
      sizeVisibleAt: "xs",
      validatorVisibleAt: "sm"
    }),
    isInitialLoad: !!isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    page: page,
    currentPageSize: blocks == null ? null : blocks.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: pageSize,
    onUpdatePage: onUpdatePage
  });
}

const BlockPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  blocks: function () {
    const node = __webpack_require__(186);

    if (node.hash && node.hash !== "6f1fdd679d5091689aa26209e3830778") {
      console.error("The definition of 'BlockPagingView_blocks' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(186);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var block_BlockPagingView = (BlockPagingView_enhance(BlockPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/BlockSearch.js
/* eslint-disable react/jsx-curly-brace-presence */












function BlockSearch({
  props,
  error,
  retry,
  lastProps,
  match,
  onUpdatePage,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  const page = getPage(match);
  let blocks = [];
  let hasNextPage = false;
  let hasPreviousPage = false;

  if (currentProps != null) {
    blocks = currentProps.blocks.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentProps.blocks.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Browse Blocks')), external_react_["createElement"](view_SearchView, {
    className: className,
    name: "Block",
    pluralName: "Blocks",
    content: external_react_["createElement"](block_BlockPagingView, {
      blocks: blocks,
      isInitialLoad: currentProps == null,
      isLoadingMore: props == null,
      page: page,
      hasNextPage: hasNextPage,
      hasPreviousPage: hasPreviousPage,
      pageSize: commonSearch_PAGE_SIZE,
      onUpdatePage: onUpdatePage
    })
  }));
}

/* harmony default export */ var pages_BlockSearch = (queryRenderer(function () {
  const node = __webpack_require__(187);

  if (node.hash && node.hash !== "6688219afee81069bf3d564ccafc8307") {
    console.error("The definition of 'BlockSearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(187);
}, {
  mapPropsToVariables: {
    client: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE),
    server: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE)
  }
})(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withHandlers"])({
  onUpdatePage: ({
    history
  }) => page => history.push(makeBlockSearch(page))
}), external_recompose_["pure"])(BlockSearch)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/ContractViewExtra.js










const ContractViewExtra_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {},
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function ContractViewExtra({
  contract,
  className,
  classes
}) {
  const publishTransaction = external_react_["createElement"](card_ExpandoCard, {
    title: "Publish Transaction",
    content: external_react_["createElement"](summary_TransactionSummary, {
      transaction: contract.transaction,
      alwaysExpand: true
    })
  });
  const script = external_react_["createElement"](card_ExpandoCard, {
    title: "Script",
    content: external_react_["createElement"](script_Script, {
      className: classes.padding,
      script: contract.script
    })
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, publishTransaction, script);
}

const ContractViewExtra_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contract: function () {
    const node = __webpack_require__(196);

    if (node.hash && node.hash !== "6cadf5222dc2039b1b562e0ca765134d") {
      console.error("The definition of 'ContractViewExtra_contract' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(196);
  }
}), withStyles(ContractViewExtra_styles), external_recompose_["pure"]);
/* harmony default export */ var contract_ContractViewExtra = (ContractViewExtra_enhance(ContractViewExtra));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/ContractView.js








function ContractView({
  contract,
  className
}) {
  const columns = [['Hash', getID_getID(contract.id)], ['Name', contract.name], ['Version', contract.version], ['Parameters', contract.parameters_raw], ['Return Type', contract.return_type], ['Uses Storage', contract.needs_storage ? 'Yes' : 'No'], ['Author', contract.author], ['Email', contract.email], ['Description', contract.description]];
  return external_react_["createElement"](view_PageView, {
    className: className,
    id: getID_getID(contract.id),
    title: "Contract",
    name: "Contract",
    pluralName: "Contracts",
    searchRoute: makeContractSearch(1),
    bodyColumns: columns,
    extra: external_react_["createElement"](contract_ContractViewExtra, {
      contract: contract
    })
  });
}

const ContractView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contract: function () {
    const node = __webpack_require__(197);

    if (node.hash && node.hash !== "e5664fffbe8b65537b47a17720cd5f6c") {
      console.error("The definition of 'ContractView_contract' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(197);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var contract_ContractView = (ContractView_enhance(ContractView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Contract.js
/* eslint-disable react/jsx-curly-brace-presence */










function Contract_Contract({
  props,
  error,
  retry,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  if (props.contract == null) {
    return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Contract')), external_react_["createElement"](error_Error404, null));
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, `Contract ${props.contract.name}`)), external_react_["createElement"](contract_ContractView, {
    contract: props.contract
  }));
}

const Contract_mapPropsToVariables = ({
  match
}) => ({
  hash: match.params.contractHash
});

/* harmony default export */ var pages_Contract = (queryRenderer(function () {
  const node = __webpack_require__(198);

  if (node.hash && node.hash !== "8c98408ee303d4da40179a46eb1378b9") {
    console.error("The definition of 'ContractQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(198);
}, {
  mapPropsToVariables: {
    client: Contract_mapPropsToVariables,
    server: Contract_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(external_recompose_["pure"])(Contract_Contract)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/lib/ContractLink.js





function ContractLink({
  contractHash,
  className
}) {
  return external_react_["createElement"](link_Link, {
    className: className,
    variant: "body1",
    path: makeContract(contractHash),
    title: contractHash
  });
}

const ContractLink_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var lib_ContractLink = (ContractLink_enhance(ContractLink));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/ContractTable.js









const ContractTable_styles = () => ({
  contractValue: {
    flex: '1 100 auto'
  },
  nameValue: {
    flex: '1 1 auto',
    minWidth: 136
  },
  authorValue: {
    flex: '1 10 auto'
  },
  authorAddressValue: {
    flex: '1 50 auto'
  },
  registeredAtValue: {
    flex: '1 50 auto'
  }
});

function ContractTable({
  contracts,
  className,
  classes
}) {
  const contractValues = [];
  const nameValues = [];
  const authorValues = [];
  const registeredAt = [];
  contracts.forEach(contract => {
    contractValues.push(external_react_["createElement"](lib_ContractLink, {
      contractHash: getID_getID(contract.id)
    }));
    nameValues.push(contract.name);
    authorValues.push(contract.author);
    registeredAt.push(external_react_["createElement"](lib_TransactionTimeLink, {
      transactionHash: contract.transaction_hash,
      blockTime: contract.block_time
    }));
  });
  const columns = [{
    name: 'Contract',
    values: contractValues,
    className: classes.contractValue
  }, {
    name: 'Name',
    values: nameValues,
    className: classes.nameValue,
    minWidth: true
  }, {
    name: 'Author',
    values: authorValues,
    className: classes.authorValue,
    visibleAt: 'xs'
  }, {
    name: 'Registered',
    values: registeredAt,
    visibleAt: 'sm',
    className: classes.registeredAtValue
  }];
  return external_react_["createElement"](table_Table, {
    className: className,
    columns: columns
  });
}

const ContractTable_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contracts: function () {
    const node = __webpack_require__(193);

    if (node.hash && node.hash !== "4a5e77019882be5072e6ecde2bc51400") {
      console.error("The definition of 'ContractTable_contracts' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(193);
  }
}), withStyles(ContractTable_styles), external_recompose_["pure"]);
/* harmony default export */ var contract_ContractTable = (ContractTable_enhance(ContractTable));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/contract/ContractPagingView.js







function ContractPagingView({
  contracts,
  isInitialLoad,
  isLoadingMore,
  error,
  page,
  hasPreviousPage,
  hasNextPage,
  pageSize,
  onUpdatePage,
  className
}) {
  return external_react_["createElement"](view_PagingView, {
    className: className,
    content: external_react_["createElement"](contract_ContractTable, {
      contracts: contracts
    }),
    isInitialLoad: !!isInitialLoad,
    isLoadingMore: isLoadingMore,
    error: error,
    page: page,
    currentPageSize: contracts == null ? null : contracts.length,
    hasPreviousPage: hasPreviousPage,
    hasNextPage: hasNextPage,
    pageSize: pageSize,
    onUpdatePage: onUpdatePage
  });
}

const ContractPagingView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  contracts: function () {
    const node = __webpack_require__(194);

    if (node.hash && node.hash !== "2e2e5672ab90a007f96ce7d7c540eeb1") {
      console.error("The definition of 'ContractPagingView_contracts' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(194);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var contract_ContractPagingView = (ContractPagingView_enhance(ContractPagingView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/ContractSearch.js
/* eslint-disable react/jsx-curly-brace-presence */












function ContractSearch({
  props,
  error,
  retry,
  lastProps,
  match,
  onUpdatePage,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let contracts = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const page = getPage(match);

  if (currentProps != null) {
    contracts = currentProps.contracts.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentProps.contracts.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Browse Contracts')), external_react_["createElement"](view_SearchView, {
    className: className,
    name: "Contract",
    pluralName: "Contracts",
    content: external_react_["createElement"](contract_ContractPagingView, {
      contracts: contracts,
      isInitialLoad: currentProps == null,
      isLoadingMore: props == null,
      page: page,
      hasNextPage: hasNextPage,
      hasPreviousPage: hasPreviousPage,
      pageSize: commonSearch_PAGE_SIZE,
      onUpdatePage: onUpdatePage
    })
  }));
}

/* harmony default export */ var pages_ContractSearch = (queryRenderer(function () {
  const node = __webpack_require__(195);

  if (node.hash && node.hash !== "49137734fa329ca563e9d6e498bfd773") {
    console.error("The definition of 'ContractSearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(195);
}, {
  mapPropsToVariables: {
    client: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE),
    server: commonSearch_mapPropsToVariables(commonSearch_PAGE_SIZE)
  }
})(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withHandlers"])({
  onUpdatePage: ({
    history
  }) => page => history.push(makeContractSearch(page))
}), external_recompose_["pure"])(ContractSearch)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/GenericErrorPage.js
/* eslint-disable react/jsx-curly-brace-presence */





const GenericErrorPage_styles = () => ({
  root: {
    padding: 16
  },
  card: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    padding: 24
  },
  headline: {
    paddingBottom: 8
  }
});

const GenericErrorPage = ({
  classes
}) => external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Something Went Wrong')), external_react_["createElement"](Grid, {
  className: classes.root,
  container: true,
  justify: "center"
}, external_react_["createElement"](Grid, {
  item: true,
  xs: 12,
  md: 8,
  lg: 4
}, external_react_["createElement"](Card, {
  className: classes.card
}, external_react_["createElement"](Typography, {
  variant: "headline",
  className: classes.headline
}, "Something went wrong!"), external_react_["createElement"](Typography, {
  variant: "subheading"
}, "Try going back to where you were or heading to the home page.")))));

const GenericErrorPage_enhance = Object(external_recompose_["compose"])(withStyles(GenericErrorPage_styles), external_recompose_["pure"]);
/* harmony default export */ var pages_GenericErrorPage = (GenericErrorPage_enhance(GenericErrorPage));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/createSafeRetry.js
const RETRY_INTERVAL = 30000;
/* harmony default export */ var createSafeRetry = ((retryInterval = RETRY_INTERVAL) => {
  let retrying = false;
  let timer;

  const retry = retryFunc => {
    if (!retrying) {
      retrying = true;
      timer = setTimeout(() => {
        retrying = false;
        timer = null;
        retryFunc();
      }, retryInterval);
    }
  };

  retry.cancel = () => {
    if (timer) {
      clearTimeout(timer);
      retrying = false;
      timer = null;
    }
  };

  return retry;
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Home.js

















const Home_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      padding: theme.spacing.unit
    },
    marketCard: {
      marginBottom: theme.spacing.unit
    },
    blocks: {
      marginBottom: theme.spacing.unit
    },
    cardHeader: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      padding: theme.spacing.unit * 2
    },
    marketCard: {
      marginBottom: theme.spacing.unit * 2
    },
    cardHeader: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    }
  },
  [theme.breakpoints.down('md')]: {
    blocksAndTransactions: {
      flexWrap: 'wrap'
    },
    blocks: {
      width: '100%',
      marginBottom: theme.spacing.unit * 2
    },
    transactions: {
      width: '100%'
    }
  },
  [theme.breakpoints.up('md')]: {
    blocks: {
      width: '50%'
    },
    blocksSpacer: {
      paddingRight: theme.spacing.unit
    },
    transactions: {
      width: '50%'
    },
    transactionsSpacer: {
      paddingLeft: theme.spacing.unit
    }
  },
  root: {
    display: 'flex',
    flexDirection: 'column'
  },
  blocksAndTransactions: {
    display: 'flex'
  },
  marketCard: {},
  blocks: {
    flex: '1 1 auto'
  },
  transactions: {
    flex: '1 1 auto'
  },
  card: {
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: 'transparent',
    borderRadius: 0
  },
  cardHeader: {
    alignItems: 'center',
    // borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    backgroundColor: 'rgba(255, 255, 255, 0.85)',
    justifyContent: 'space-between',
    paddingBottom: theme.spacing.unit * 2,
    paddingTop: theme.spacing.unit * 2
  },
  link: {
    textDecoration: 'none'
  },
  blocksSpacer: {},
  transactionsSpacer: {},
  viewMoreButton: {
    height: 37,
    marginBottom: -8,
    marginTop: -8,
    paddingBottom: 0,
    paddingTop: 0,
    backgroundColor: '#FFD401 !important',
    borderRadius: 20,
    border: '1px solid #fff',
    width: 104,
    transition: 'opacity 0.2s ease-out',
    '&:hover': {
      opacity: 0.8
    }
  },
  viewMoreText: {
    color: '#001E7F',
    fontWeight: '500',
    marginBottom: -3
  },
  typography: {
    color: '#001E7F',
    fontSize: '1.25rem'
  },
  tableContentBlock: {
    backgroundColor: '#fff'
  },
  tableContentBlockTransactions: {
    '& > *:nth-child(even)': {
      backgroundColor: 'rgba(7, 134, 213, 0.07)'
    }
  }
});

const safeRetry = createSafeRetry();

function Home({
  props: propsIn,
  lastProps,
  error,
  retry,
  className,
  classes
}) {
  const props = propsIn || lastProps;

  if (props == null && error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (error != null) {
    safeRetry(retry);
  } else {
    safeRetry.cancel();
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  const renderCard = (title, rightElement, content, cardClassName, cardSpacerClassName) => external_react_["createElement"]("div", {
    className: cardClassName
  }, external_react_["createElement"]("div", {
    className: cardSpacerClassName
  }, external_react_["createElement"](Card, {
    className: classes.card
  }, external_react_["createElement"]("div", {
    className: classes.cardHeader
  }, external_react_["createElement"](Typography, {
    className: classes.typography,
    variant: "title"
  }, title), rightElement), content)));

  const makeViewAllButton = path => external_react_["createElement"](external_react_router_dom_["Link"], {
    className: classes.link,
    to: path
  }, external_react_["createElement"](Button, {
    className: classes.viewMoreButton,
    size: "small",
    variant: "raised",
    color: "primary"
  }, external_react_["createElement"](Typography, {
    className: classes.viewMoreText,
    variant: "body1"
  }, "VIEW ALL")));

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.blocksAndTransactions
  }, renderCard('Explore Blocks', makeViewAllButton(makeBlockSearch(1)), external_react_["createElement"](block_BlockTable, {
    blocks: props.blocks.edges.map(edge => edge.node),
    sizeVisibleAt: "xs",
    validatorVisibleAt: "md",
    className: classes.tableContentBlock
  }), classes.blocks, classes.blocksSpacer), renderCard('Explore Transactions', makeViewAllButton(makeTransactionSearch(1)), external_react_["createElement"](transaction_TransactionTable, {
    transactions: props.transactions.edges.map(edge => edge.node),
    dense: true,
    className: external_classnames_default()(classes.tableContentBlock, classes.tableContentBlockTransactions)
  }), classes.transactions, classes.transactionsSpacer)));
}

/* harmony default export */ var pages_Home = (queryRenderer(function () {
  const node = __webpack_require__(157);

  if (node.hash && node.hash !== "c21c6e732bfd9e3192eae7fc06275db3") {
    console.error("The definition of 'HomeQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(157);
})(Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  relayEnvironment: () => null
}), external_recompose_["pure"], withStyles(Home_styles))(Home)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Search.js
/* eslint-disable react/jsx-curly-brace-presence */





 // $FlowFixMe








function Search({
  props,
  error,
  retry,
  match
}) {
  let element;

  if (error != null) {
    element = external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  } else if (props == null) {
    element = external_react_["createElement"](loading_PageLoading, null);
  } else {
    const {
      address,
      asset,
      block,
      contract,
      transaction
    } = props;

    if (address != null) {
      element = external_react_["createElement"](external_react_router_["Redirect"], {
        to: makeAddress(getID_getID(address.id))
      });
    } else if (asset != null) {
      element = external_react_["createElement"](external_react_router_["Redirect"], {
        to: makeAsset(getID_getID(asset.id))
      });
    } else if (block != null) {
      element = external_react_["createElement"](external_react_router_["Redirect"], {
        to: makeBlockIndex(getNumericID(block.id))
      });
    } else if (contract != null) {
      element = external_react_["createElement"](external_react_router_["Redirect"], {
        to: makeContract(getID_getID(contract.id))
      });
    } else if (transaction != null) {
      element = external_react_["createElement"](external_react_router_["Redirect"], {
        to: makeTransaction(transaction.hash)
      });
    } else {
      try {
        const {
          value
        } = match.params;
        Object(client_["addressToScriptHash"])(value);
        element = external_react_["createElement"](external_react_router_["Redirect"], {
          to: makeAddress(value)
        });
      } catch (err) {
        element = external_react_["createElement"](error_Error404, null);
      }
    }
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Search')), element);
}

const MAX_INDEX = 100000000;

const Search_mapPropsToVariables = ({
  match
}) => {
  const {
    value
  } = match.params; // On the server we use index first if it's non-null

  let index = tryParseInt({
    value,
    default: null
  });

  if (index > MAX_INDEX) {
    index = null;
  }

  return {
    value,
    index
  };
};

/* harmony default export */ var pages_Search = (queryRenderer(function () {
  const node = __webpack_require__(199);

  if (node.hash && node.hash !== "200bb22a5672885a2a75490b1c024ad2") {
    console.error("The definition of 'SearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(199);
}, {
  mapPropsToVariables: {
    client: Search_mapPropsToVariables,
    server: Search_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), external_recompose_["pure"])(Search)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/TransactionViewExtra.js
/* eslint-disable react/no-array-index-key */









const TransactionViewExtra_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {},
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function TransactionViewExtra({
  transaction,
  className,
  classes
}) {
  // TODO: These should be right after one another, not split into 2 sections
  const elements = [];
  transaction.scripts.forEach((script, idx) => {
    elements.push(external_react_["createElement"](card_ExpandoCard, {
      key: `invocation:${idx}`,
      title: "Invocation Script",
      content: external_react_["createElement"](script_Script, {
        className: classes.padding,
        script: script.invocation_script
      })
    }));
  });
  transaction.scripts.forEach((script, idx) => {
    elements.push(external_react_["createElement"](card_ExpandoCard, {
      key: `verification:${idx}`,
      title: "Verification Script",
      content: external_react_["createElement"](script_Script, {
        className: classes.padding,
        script: script.verification_script
      })
    }));
  });

  if (transaction.type === 'InvocationTransaction' && transaction.script != null) {
    elements.push(external_react_["createElement"](card_ExpandoCard, {
      key: "script",
      title: "Script",
      content: external_react_["createElement"](script_Script, {
        className: classes.padding,
        script: transaction.script
      })
    }));
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, elements);
} // TODO: Should transfers be ordered?


const TransactionViewExtra_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(201);

    if (node.hash && node.hash !== "5e9f2f42652387dc009f7b7ade1ace4b") {
      console.error("The definition of 'TransactionViewExtra_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(201);
  }
}), withStyles(TransactionViewExtra_styles), external_recompose_["pure"]);
/* harmony default export */ var transaction_TransactionViewExtra = (TransactionViewExtra_enhance(TransactionViewExtra));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/explorer/transaction/TransactionView.js















const TransactionView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    upsell: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    upsell: {
      padding: theme.spacing.unit * 2
    }
  },
  upsell: {},
  extraCard: {
    display: 'flex',
    flexDirection: 'column'
  },
  summary: {
    borderTop: `1px solid ${theme.custom.lightDivider}`
  },
  ...TransactionHeaderBackground_styles(theme)
});

function TransactionView({
  transaction,
  className,
  classes
}) {
  const columns = [['Hash', transaction.hash], ['Time', external_react_["createElement"](lib_BlockTime, {
    blockTime: transaction.block_time
  })], ['Network Fee', `${formatNumber(transaction.network_fee)} CRON`], ['System Fee', `${formatNumber(transaction.system_fee)} CRON`], ['Size', getBlockSize(transaction.size)], ['Block', external_react_["createElement"](lib_BlockIndexLink, {
    blockIndex: transaction.block_id
  })]];
  return external_react_["createElement"](view_PageView, {
    className: className,
    id: transaction.hash,
    title: getTitle(transaction.type),
    name: "Transaction",
    pluralName: "Transactions",
    searchRoute: makeTransactionSearch(1),
    headerIcon: getIcon(transaction.type),
    headerBackgroundColorClassName: getBackgroundClassName(classes, transaction.type),
    bodyColumns: columns,
    extraCard: external_react_["createElement"]("div", {
      className: classes.extraCard
    }, external_react_["createElement"](summary_TransactionSummaryBody, {
      className: classes.summary,
      transaction: transaction
    }), external_react_["createElement"](upsell_WalletPageUpsell, {
      className: classes.upsell,
      source: "TRANSACTION"
    })),
    extra: external_react_["createElement"](transaction_TransactionViewExtra, {
      transaction: transaction
    })
  });
}

const TransactionView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  transaction: function () {
    const node = __webpack_require__(202);

    if (node.hash && node.hash !== "eeb712619bc10ea19ec8e8a7bae352b5") {
      console.error("The definition of 'TransactionView_transaction' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(202);
  }
}), withStyles(TransactionView_styles), external_recompose_["pure"]);
/* harmony default export */ var transaction_TransactionView = (TransactionView_enhance(TransactionView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Transaction.js
/* eslint-disable react/jsx-curly-brace-presence */










function Transaction_Transaction({
  props,
  error,
  retry,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  if (props == null) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  if (props.transaction == null) {
    return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Transaction')), external_react_["createElement"](error_Error404, null));
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, `Transaction ${props.transaction.hash}`)), external_react_["createElement"](transaction_TransactionView, {
    transaction: props.transaction
  }));
}

const Transaction_mapPropsToVariables = ({
  match
}) => ({
  hash: match.params.transactionHash
});

/* harmony default export */ var pages_Transaction = (queryRenderer(function () {
  const node = __webpack_require__(203);

  if (node.hash && node.hash !== "496b9e735d6768b6a046e818d2814d21") {
    console.error("The definition of 'TransactionQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(203);
}, {
  mapPropsToVariables: {
    client: Transaction_mapPropsToVariables,
    server: Transaction_mapPropsToVariables
  }
})(Object(external_recompose_["compose"])(external_recompose_["pure"])(Transaction_Transaction)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/TransactionSearch.js
/* eslint-disable react/jsx-curly-brace-presence */











const TransactionSearch_PAGE_SIZE = 10;

function TransactionSearch({
  props,
  error,
  retry,
  lastProps,
  match,
  onUpdatePage,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_PageError, {
      error: error,
      retry: retry
    });
  }

  let currentProps;

  if (props != null) {
    currentProps = props;
  } else if (lastProps != null) {
    currentProps = lastProps;
  }

  let transactions = [];
  let hasNextPage = false;
  let hasPreviousPage = false;
  const page = getPage(match);

  if (currentProps != null) {
    transactions = currentProps.transactions.edges.map(edge => edge.node); // eslint-disable-next-line

    hasNextPage = currentProps.transactions.pageInfo.hasNextPage;
    hasPreviousPage = page > 1;
  }

  return external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Browse Transactions')), external_react_["createElement"](view_SearchView, {
    className: className,
    name: "Transaction",
    pluralName: "Transactions",
    content: external_react_["createElement"](transaction_TransactionPagingView, {
      transactions: transactions,
      isInitialLoad: currentProps == null,
      isLoadingMore: props == null,
      page: page,
      pageSize: TransactionSearch_PAGE_SIZE,
      hasNextPage: hasNextPage,
      hasPreviousPage: hasPreviousPage,
      onUpdatePage: onUpdatePage
    })
  }));
}

/* harmony default export */ var pages_TransactionSearch = (queryRenderer(function () {
  const node = __webpack_require__(200);

  if (node.hash && node.hash !== "4860721ba4e9f38229ff36fc7e9905a5") {
    console.error("The definition of 'TransactionSearchQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(200);
}, {
  mapPropsToVariables: {
    client: commonSearch_mapPropsToVariables(TransactionSearch_PAGE_SIZE),
    server: commonSearch_mapPropsToVariables(TransactionSearch_PAGE_SIZE)
  }
})(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withHandlers"])({
  onUpdatePage: ({
    history
  }) => page => history.push(makeTransactionSearch(page))
}), external_recompose_["pure"])(TransactionSearch)));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/Maintenance.js
/* eslint-disable react/jsx-curly-brace-presence */







const Maintenance_styles = () => ({
  root: {
    padding: 16
  },
  card: {
    alignItems: 'center',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    padding: 24
  },
  headline: {
    paddingBottom: 8
  },
  link: {
    display: 'inline'
  }
});

const Maintenance_GenericErrorPage = ({
  classes
}) => external_react_["createElement"]("div", null, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Maintenance')), external_react_["createElement"](Grid, {
  className: classes.root,
  container: true,
  justify: "center"
}, external_react_["createElement"](Grid, {
  item: true,
  xs: 12,
  md: 8,
  lg: 4
}, external_react_["createElement"](Card, {
  className: classes.card
}, external_react_["createElement"](logo_Logo, {
  id: "PageLoading",
  width: 48,
  height: 56
}), external_react_["createElement"](Typography, {
  variant: "headline",
  className: classes.headline
}, "Down for Maintenance"), external_react_["createElement"](Typography, {
  variant: "subheading"
}, "CRON Tracker is currently down for maintenance."), external_react_["createElement"](Typography, {
  variant: "body1"
}, "Follow us on", ' ', external_react_["createElement"](link_Link, {
  className: classes.link,
  path: "",
  title: "Twitter",
  absolute: true,
  newTab: true
}), ' ', "for updates.")))));

const Maintenance_enhance = Object(external_recompose_["compose"])(withStyles(Maintenance_styles), external_recompose_["pure"]);
/* harmony default export */ var Maintenance = (Maintenance_enhance(Maintenance_GenericErrorPage));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/layout/TitleCard.js




const TitleCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    header: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    header: {
      padding: theme.spacing.unit * 2
    }
  },
  header: {
    alignItems: 'center',
    borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex'
  }
});

function TitleCard({
  title,
  children,
  titleComponent: titleComponentIn,
  titleVariant: titleVariantIn,
  className,
  classes
}) {
  const titleComponent = titleComponentIn == null ? 'h1' : titleComponentIn;
  const titleVariant = titleVariantIn == null ? 'title' : titleVariantIn;
  return external_react_["createElement"](Card, {
    className: className
  }, external_react_["createElement"]("div", {
    className: classes.header
  }, external_react_["createElement"](Typography, {
    component: titleComponent,
    variant: titleVariant
  }, title)), children);
}

const TitleCard_enhance = Object(external_recompose_["compose"])(withStyles(TitleCard_styles), external_recompose_["pure"]);
/* harmony default export */ var layout_TitleCard = (TitleCard_enhance(TitleCard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/clipboard.js


const isSupported = userAgent => {
  if (typeof document === 'undefined') {
    return userAgent.browser.name === 'Firefox' && ua_ua.checkVersion(userAgent.browser.version, '>=', '41') || userAgent.browser.name === 'IE' || userAgent.browser.name === 'Edge' || userAgent.browser.name === 'Chrome' && ua_ua.checkVersion(userAgent.browser.version, '>=', '43') || userAgent.browser.name === 'Safari' && ua_ua.checkVersion(userAgent.browser.version, '>=', '10') || userAgent.browser.name === 'Opera' && ua_ua.checkVersion(userAgent.browser.version, '>=', '30') || userAgent.browser.name === 'Android Browser' && ua_ua.checkVersion(userAgent.browser.version, '>=', '4.4');
  }

  return document.queryCommandSupported instanceof Function && document.queryCommandSupported('copy') && // Firefox & iOS reports true for queryCommandSupported, but doesn't work
  // see http://caniuse.com/#feat=clipboard
  !(userAgent.browser.name === 'Firefox' && ua_ua.checkVersion(userAgent.browser.version, '<', '41') || userAgent.os.name === 'iOS') || // Chrome reports false for queryCommandSupported, but actually works
  userAgent.browser.name === 'Chrome' && ua_ua.checkVersion(userAgent.browser.version, '>=', '43');
};

const copy = (data, userAgent) => {
  if (typeof document === 'undefined' || !document.addEventListener) {
    return Promise.reject(new ClientError["b" /* ClientError */](ClientError["c" /* SOMETHING_WENT_WRONG */]));
  }

  if (!isSupported(userAgent)) {
    return Promise.reject(new ClientError["b" /* ClientError */](ClientError["a" /* COPY_UNSUPPORTED_BROWSER */]));
  }

  const _data = {
    'text/plain': data
  };
  let _bogusSelection = false;

  const listener = e => {
    for (const [key, value] of Object.entries(_data)) {
      // $FlowFixMe
      e.clipboardData.setData(key, value);
    }

    e.preventDefault();
  };

  const cleanup = () => {
    document.removeEventListener('copy', listener);

    if (_bogusSelection) {
      window.getSelection().removeAllRanges();
    }

    _bogusSelection = false;
  };

  const bogusSelect = () => {
    const sel = document.getSelection(); // If "nothing" is selected...

    if ( // $FlowFixMe
    !document.queryCommandEnabled('copy') && sel != null && sel.isCollapsed) {
      // ... temporarily select the entire body.
      //
      // We select the entire body because:
      // - it's guaranteed to exist,
      // - it works (unlike, say, document.head, or phantom element that is
      //   not inserted into the DOM),
      // - it doesn't seem to flicker (due to the synchronous copy event), and
      // - it avoids modifying the DOM (can trigger mutation observers).
      //
      // Because we can't do proper feature detection (we already checked
      // document.queryCommandEnabled("copy") , which actually gives a false
      // negative for Blink when nothing is selected) and UA sniffing is not
      // reliable (a lot of UA strings contain "Safari"), this will also
      // happen for some browsers other than Safari. :-()
      const range = document.createRange();
      range.selectNodeContents(document.body);
      sel.removeAllRanges();
      sel.addRange(range);
      _bogusSelection = true;
    }
  };

  document.addEventListener('copy', listener);
  return new Promise((resolve, reject) => {
    const triggerCopy = tryBogusSelect => {
      try {
        if (document.execCommand('copy')) {
          // document.execCommand is synchronous: http://www.w3.org/TR/2015/WD-clipboard-apis-20150421/#integration-with-rich-text-editing-apis
          // So we can call resolve() back here.
          cleanup();
          resolve();
        } else if (!tryBogusSelect) {
          bogusSelect();
          triggerCopy(true);
        } else {
          cleanup();
          throw new ClientError["b" /* ClientError */](ClientError["c" /* SOMETHING_WENT_WRONG */]);
        }
      } catch (e) {
        cleanup();
        reject(e);
      }
    };

    triggerCopy(false);
  });
};

/* harmony default export */ var clipboard = ({
  isSupported,
  copy
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/common/CopyField.js
function CopyField_extends() { CopyField_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return CopyField_extends.apply(this, arguments); }



 // $FlowFixMe






function CopyField({
  onClick: onClickIn,
  appContext,
  name,
  ...props
}) {
  let onClick;

  if (clipboard.isSupported(appContext.userAgent)) {
    onClick = onClickIn;
  }

  return (// $FlowFixMe
    external_react_["createElement"](base_TextField, CopyField_extends({}, props, {
      onClick: onClick,
      readOnly: true
    }))
  );
}

const CopyField_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_react_redux_["connect"])(null, dispatch => ({
  showSnackbar: ({
    message
  }) => dispatch(setSnackbar({
    message
  })),
  showSnackbarError: ({
    error
  }) => dispatch(setSnackbar({
    message: sanitizeError(error).clientMessage
  }))
})), Object(external_recompose_["withHandlers"])({
  onClick: ({
    value,
    name,
    onClick,
    appContext: appContextIn,
    showSnackbar,
    showSnackbarError
  }) => event => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CLICK_SOURCE]: name
    }).captureLog(() => clipboard.copy(value, appContext.userAgent), {
      name: 'browser_copy',
      level: 'verbose',
      error: {}
    }).then(() => {
      showSnackbar({
        message: `${name} Copied`
      });
    }).catch(error => {
      showSnackbarError({
        error
      });
    });

    if (onClick) {
      onClick(event);
    }
  }
}), external_recompose_["pure"]);
/* harmony default export */ var common_CopyField = (CopyField_enhance(CopyField));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/common/PasswordField.js
function PasswordField_extends() { PasswordField_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return PasswordField_extends.apply(this, arguments); }








const PasswordField_styles = theme => ({
  root: {
    display: 'flex'
  },
  visibleButtonSubtext: {
    marginTop: theme.spacing.unit
  },
  visibleButtonLabelOnly: {
    marginTop: theme.spacing.unit / 2
  }
});

function PasswordField({
  value,
  label,
  autoComplete,
  validation: validationIn,
  hasSubtext: hasSubtextIn,
  copyOnClickName,
  onEnter,
  onChange,
  className,
  visible,
  onHidePassword,
  onShowPassword,
  classes,
  ...other
}) {
  const type = visible ? 'text' : 'password';
  const validation = value === '' ? null : validationIn;
  const hasSubtext = !!hasSubtextIn;
  let field = // $FlowFixMe
  external_react_["createElement"](base_TextField, PasswordField_extends({}, other, {
    value: value,
    type: type,
    autoComplete: autoComplete,
    error: validation != null,
    subtext: validation,
    hasSubtext: hasSubtext,
    label: label,
    onChange: onChange,
    onEnter: onEnter
  }));

  if (copyOnClickName != null && visible) {
    field = // $FlowFixMe
    external_react_["createElement"](common_CopyField, PasswordField_extends({}, other, {
      value: value,
      type: type,
      autoComplete: autoComplete,
      error: validation != null,
      subtext: validation,
      hasSubtext: hasSubtext,
      label: label,
      onChange: onChange,
      onEnter: onEnter,
      name: copyOnClickName
    }));
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, field, external_react_["createElement"](IconButton, {
    className: external_classnames_default()({
      [classes.visibleButtonSubtext]: hasSubtext,
      [classes.visibleButtonLabelOnly]: !hasSubtext && label != null
    }),
    onClick: visible ? onHidePassword : onShowPassword
  }, external_react_["createElement"](base_Icon, null, visible ? 'visibility_off' : 'visibility')));
}

const PasswordField_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', () => ({
  visible: false
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onHidePassword: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    visible: false
  })),
  onShowPassword: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    visible: true
  }))
}), withStyles(PasswordField_styles), external_recompose_["pure"]);
/* harmony default export */ var common_PasswordField = (PasswordField_enhance(PasswordField));
// EXTERNAL MODULE: external "react-jss"
var external_react_jss_ = __webpack_require__(57);

// EXTERNAL MODULE: external "jss"
var external_jss_ = __webpack_require__(109);

// EXTERNAL MODULE: external "jss-preset-default"
var external_jss_preset_default_ = __webpack_require__(110);
var external_jss_preset_default_default = /*#__PURE__*/__webpack_require__.n(external_jss_preset_default_);

// EXTERNAL MODULE: ./packages/neotracker-shared-web/src/errors/CodedClientError.js
var CodedClientError = __webpack_require__(367);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PaperWalletHeader.js




function PaperWalletHeader({
  className
}) {
  return external_react_["createElement"]("img", {
    alt: "CRON Tracker",
    className: className,
    src: makePublic('/paper-wallet-sidebar.png'),
    height: "100%",
    width: "auto"
  });
}

const PaperWalletHeader_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var paper_PaperWalletHeader = (PaperWalletHeader_enhance(PaperWalletHeader));
// EXTERNAL MODULE: external "qr-image"
var external_qr_image_ = __webpack_require__(297);
var external_qr_image_default = /*#__PURE__*/__webpack_require__.n(external_qr_image_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/qr/QRCode.js




function QRCode({
  value,
  size,
  alt,
  className
}) {
  const buffer = external_qr_image_default.a.imageSync(value, {
    margin: 0
  });
  const dataURI = `data:image/png;base64,${buffer.toString('base64')}`;
  return external_react_["createElement"]("img", {
    alt: alt,
    className: className,
    src: dataURI,
    width: `${size}px`,
    height: `${size}px`
  });
}

const QRCode_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var qr_QRCode = (QRCode_enhance(QRCode));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PaperWalletLabeled.js





const PaperWalletLabeled_styles = theme => ({
  root: {
    display: 'flex'
  },
  label: {
    color: theme.palette.primary[500],
    display: 'flex',
    justifyContent: 'center',
    paddingRight: theme.spacing.unit,
    transform: 'rotate(-180deg)',
    writingMode: 'vertical-rl'
  },
  borderBox: {
    boxSizing: 'border-box'
  }
});

function PaperWalletLabeled({
  element,
  label,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, classes.borderBox, className)
  }, element, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.label, classes.borderBox),
    variant: "body1",
    component: "p"
  }, label));
}

const PaperWalletLabeled_enhance = Object(external_recompose_["compose"])(withStyles(PaperWalletLabeled_styles), external_recompose_["pure"]);
/* harmony default export */ var paper_PaperWalletLabeled = (PaperWalletLabeled_enhance(PaperWalletLabeled));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PaperWalletLabelLine.js





const PaperWalletLabelLine_styles = () => ({
  borderBox: {
    boxSizing: 'border-box'
  }
});

function PaperWalletLabelLine({
  label,
  value,
  className,
  classes
}) {
  return external_react_["createElement"](Typography, {
    className: external_classnames_default()(className, classes.borderBox),
    variant: "body1",
    component: "p"
  }, external_react_["createElement"]("span", {
    className: classes.borderBox
  }, label), external_react_["createElement"]("br", {
    className: classes.borderBox
  }), external_react_["createElement"]("span", {
    className: classes.borderBox
  }, value));
}

const PaperWalletLabelLine_enhance = Object(external_recompose_["compose"])(withStyles(PaperWalletLabelLine_styles), external_recompose_["pure"]);
/* harmony default export */ var paper_PaperWalletLabelLine = (PaperWalletLabelLine_enhance(PaperWalletLabelLine));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PaperWalletContent.js










const PaperWalletContent_styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column',
    padding: theme.spacing.unit
  },
  box: {
    height: theme.spacing.unit * 19,
    width: theme.spacing.unit * 19
  },
  notes: {
    backgroundColor: theme.palette.grey[200]
  },
  codes: {
    alignItems: 'center',
    display: 'flex'
  },
  lines: {
    display: 'flex',
    flexDirection: 'column',
    paddingLeft: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2
  },
  privateKey: {
    paddingTop: theme.spacing.unit
  },
  firstBox: {
    paddingBottom: theme.spacing.unit * 2,
    paddingLeft: theme.spacing.unit * 2,
    paddingTop: theme.spacing.unit * 2
  },
  secondBox: {
    padding: theme.spacing.unit * 2
  },
  thirdBox: {
    paddingBottom: theme.spacing.unit * 2,
    paddingRight: theme.spacing.unit * 2,
    paddingTop: theme.spacing.unit * 2
  }
});

const SIZE = 152;

function PaperWalletContent({
  address,
  privateKey,
  className,
  classes
}) {
  const privateKeyHex = Object(client_["privateKeyToWIF"])(privateKey);
  const addressHex = address;
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.codes
  }, external_react_["createElement"](paper_PaperWalletLabeled, {
    className: classes.firstBox,
    element: external_react_["createElement"](qr_QRCode, {
      alt: "Address QR Code",
      size: SIZE,
      value: addressHex
    }),
    label: "YOUR ADDRESS"
  }), external_react_["createElement"](paper_PaperWalletLabeled, {
    className: classes.secondBox,
    element: external_react_["createElement"]("img", {
      alt: "Notes Area",
      src: makePublic('/notes-bg.png'),
      width: `${SIZE}px`,
      height: `${SIZE}px`
    }),
    label: "AMOUNT / NOTES"
  }), external_react_["createElement"](paper_PaperWalletLabeled, {
    className: classes.thirdBox,
    element: external_react_["createElement"](qr_QRCode, {
      alt: "Private Key QR Code",
      size: SIZE,
      value: privateKeyHex
    }),
    label: "YOUR PRIVATE KEY"
  })), external_react_["createElement"]("div", {
    className: classes.lines
  }, external_react_["createElement"](paper_PaperWalletLabelLine, {
    value: addressHex,
    label: "Your Address:"
  }), external_react_["createElement"](paper_PaperWalletLabelLine, {
    className: classes.privateKey,
    value: privateKeyHex,
    label: "Your Private Key:"
  })));
}

const PaperWalletContent_enhance = Object(external_recompose_["compose"])(withStyles(PaperWalletContent_styles), external_recompose_["pure"]);
/* harmony default export */ var paper_PaperWalletContent = (PaperWalletContent_enhance(PaperWalletContent));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PaperWallet.js







const PaperWallet_styles = theme => ({
  root: {
    border: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    height: 290,
    width: 739,
    boxSizing: 'border-box'
  }
});

function PaperWallet({
  address,
  privateKey,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](paper_PaperWalletHeader, null), external_react_["createElement"](paper_PaperWalletContent, {
    address: address,
    privateKey: privateKey
  }));
}

const PaperWallet_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withContext"])({
  appContext: () => null
}, ({
  appContext
}) => ({
  appContext
})), withStyles(PaperWallet_styles), external_recompose_["pure"]);
/* harmony default export */ var paper_PaperWallet = (PaperWallet_enhance(PaperWallet));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/createPaperWallet.js
// $FlowFixMe











const createPaperWallet_stylesheetTag = sheet => `<link rel="stylesheet" href="${sheet}" type="text/css" />`;

const createPaperWallet = ({
  privateKey,
  address,
  theme,
  appContext
}) => {
  if (typeof window === 'undefined') {
    return;
  }

  const sheetsRegistry = new external_react_jss_["SheetsRegistry"]();
  const jss = Object(external_jss_["create"])(external_jss_preset_default_default()());
  jss.options.createGenerateClassName = createGenerateClassName_default.a;
  const app = external_react_["createElement"](external_react_jss_["JssProvider"], {
    registry: sheetsRegistry,
    jss: jss
  }, external_react_["createElement"](ThemeProvider, {
    theme: theme,
    sheetsManager: new Map()
  }, external_react_["createElement"](paper_PaperWallet, {
    appContext: appContext,
    address: address,
    privateKey: privateKey
  })));
  const reactAppString = Object(server_["renderToString"])(app);
  const appStyles = sheetsRegistry.toString();
  const html = `
    <html>
      <head>
        ${appContext.css.map(sheet => createPaperWallet_stylesheetTag(sheet)).join('')}
      </head>
      <body style="background-color: white;">
        <div id="app">${reactAppString}</div>
        <style>${appStyles}</style>
        <script
          ${appContext.nonce != null ? `nonce="${appContext.nonce}"` : ''}
          type="text/javascript"
        >
          setTimeout(function () { window.print(); }, 2000);
        </script>
      </body>
    </html>
  `;
  const win = window.open('about:blank', '_blank');

  if (win == null) {
    throw new CodedClientError["a" /* default */](CodedClientError["a" /* default */].CREATE_PAPER_WALLET_WINDOW_OPEN_ERROR);
  } else {
    win.document.write(html);
  }
};

/* harmony default export */ var paper_createPaperWallet = (({
  privateKey,
  address,
  theme,
  showSnackbarError,
  appContext
}) => {
  try {
    appContext.monitor.captureLog(() => createPaperWallet({
      privateKey,
      address,
      theme,
      appContext
    }), {
      name: 'neotracker_wallet_create_paper_wallet',
      level: 'verbose'
    });
  } catch (error) {
    showSnackbarError({
      error: error instanceof ClientError["b" /* ClientError */] ? error : new ClientError["b" /* ClientError */]('Something went wrong while creating your paper wallet. Please ' + 'try again or refresh the page.')
    });
  }
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/paper/PrintPaperWalletButton.js


 // $FlowFixMe






const PrintPaperWalletButton_styles = theme => ({
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function PrintPaperWalletButton({
  className,
  onPrintPaperWallet,
  classes
}) {
  return external_react_["createElement"](Button, {
    className: className,
    variant: "raised",
    color: "primary",
    onClick: onPrintPaperWallet
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "PRINT PAPER WALLET"));
}

const PrintPaperWalletButton_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), withStyles(PrintPaperWalletButton_styles, {
  withTheme: true
}), Object(external_react_redux_["connect"])(null, dispatch => ({
  showSnackbarError: ({
    error
  }) => dispatch(setSnackbar({
    message: sanitizeError(error).clientMessage
  }))
})), Object(external_recompose_["withHandlers"])({
  onPrintPaperWallet: ({
    onPrint,
    privateKey,
    address,
    theme,
    showSnackbarError,
    appContext
  }) => () => {
    paper_createPaperWallet({
      privateKey,
      address,
      theme,
      showSnackbarError,
      appContext
    });

    if (onPrint != null) {
      onPrint();
    }
  }
}), external_recompose_["pure"]);
/* harmony default export */ var paper_PrintPaperWalletButton = (PrintPaperWalletButton_enhance(PrintPaperWalletButton));
// EXTERNAL MODULE: ./packages/neotracker-shared-web/src/wallet/index.js
var src_wallet = __webpack_require__(16);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/GenerateKeystore.js






const GenerateKeystore_styles = theme => ({
  link: {
    textDecoration: 'none'
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function GenerateKeystore({
  replace,
  className,
  classes
}) {
  return external_react_["createElement"](external_react_router_dom_["Link"], {
    className: classes.link,
    replace: !!replace,
    to: WALLET_CREATE_KEYSTORE
  }, external_react_["createElement"](Button, {
    className: className,
    variant: "raised",
    color: "primary"
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "CREATE KEYSTORE")));
}

const GenerateKeystore_enhance = Object(external_recompose_["compose"])(withStyles(GenerateKeystore_styles), external_recompose_["pure"]);
/* harmony default export */ var keystore_GenerateKeystore = (GenerateKeystore_enhance(GenerateKeystore));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/SaveKeystoreFileBlob.js
// $FlowFixMe







const SaveKeystoreFileBlob_styles = theme => ({
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function SaveKeystoreFileBlob({
  className,
  onClickSave,
  classes
}) {
  return external_react_["createElement"](Button, {
    className: className,
    onClick: onClickSave,
    variant: "raised",
    color: "primary"
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "DOWNLOAD ENCRYPTED KEY"));
}

const SaveKeystoreFileBlob_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_react_redux_["connect"])(null, dispatch => ({
  showSnackbarError: ({
    error
  }) => dispatch(setSnackbar({
    message: sanitizeError(error).clientMessage
  }))
})), Object(external_recompose_["withHandlers"])({
  onClickSave: ({
    nep2,
    filename,
    onSave,
    appContext: appContextIn,
    onError,
    showSnackbarError
  }) => event => {
    const appContext = appContextIn;

    try {
      appContext.monitor.captureLog(() => {
        const blob = new Blob([nep2], {
          type: 'text/plain;charset=utf-8'
        });
        appContext.fileSaver.saveAs(blob, filename);
      }, {
        name: 'neotracker_wallet_keystore_save_file',
        level: 'verbose',
        error: {}
      });
    } catch (error) {
      showSnackbarError({
        error: new ClientError["b" /* ClientError */]('Something went wrong saving the encrypted key file. Try again or try ' + 'copying the encrypted key string to a file on your computer.')
      });
      onError();
    }

    if (onSave != null) {
      onSave(event);
    }
  }
}), withStyles(SaveKeystoreFileBlob_styles), external_recompose_["pure"]);
/* harmony default export */ var keystore_SaveKeystoreFileBlob = (SaveKeystoreFileBlob_enhance(SaveKeystoreFileBlob));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/SaveKeystoreFileText.js





function SaveKeystoreFileText({
  nep2,
  onSave,
  className
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Save Encrypted Key:"), external_react_["createElement"](common_CopyField, {
    id: "skft-keystore",
    value: nep2,
    name: "Keystore",
    onClick: onSave
  }));
}

const SaveKeystoreFileText_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var keystore_SaveKeystoreFileText = (SaveKeystoreFileText_enhance(SaveKeystoreFileText));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/SaveKeystoreFile.js







const SaveKeystoreFile_styles = () => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  }
});

let isFileSaverSupported;

try {
  isFileSaverSupported = !!new Blob();
} catch (e) {// ignore errors
}

function SaveKeystoreFile({
  nep2,
  filename,
  onSave,
  className,
  onError,
  error,
  classes
}) {
  if (isFileSaverSupported) {
    if (error) {
      return external_react_["createElement"]("div", {
        className: external_classnames_default()(className, classes.root)
      }, external_react_["createElement"](keystore_SaveKeystoreFileBlob, {
        nep2: nep2,
        filename: filename,
        onSave: onSave,
        onError: onError
      }), external_react_["createElement"](keystore_SaveKeystoreFileText, {
        nep2: nep2,
        onSave: onSave
      }));
    }

    return external_react_["createElement"](keystore_SaveKeystoreFileBlob, {
      className: className,
      nep2: nep2,
      filename: filename,
      onSave: onSave,
      onError: onError
    });
  }

  return external_react_["createElement"](keystore_SaveKeystoreFileText, {
    className: className,
    nep2: nep2,
    onSave: onSave
  });
}

const SaveKeystoreFile_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"], Object(external_recompose_["withState"])('state', 'setState', () => ({
  error: false
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onError: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    error: true
  }))
}), withStyles(SaveKeystoreFile_styles));
/* harmony default export */ var keystore_SaveKeystoreFile = (SaveKeystoreFile_enhance(SaveKeystoreFile));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/SaveOrGenerateKeystore.js






function SaveOrGenerateKeystore({
  wallet,
  className,
  filename
}) {
  if (wallet.nep2 == null) {
    return external_react_["createElement"](keystore_GenerateKeystore, {
      className: className
    });
  }

  return external_react_["createElement"](keystore_SaveKeystoreFile, {
    className: className,
    nep2: wallet.nep2,
    filename: filename
  });
}

const SaveOrGenerateKeystore_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withPropsOnChange"])(['wallet'], ({
  wallet
}) => ({
  filename: src_wallet["api"].createKeystoreFilename({
    address: wallet.account.id.address
  })
})), external_recompose_["pure"]);
/* harmony default export */ var keystore_SaveOrGenerateKeystore = (SaveOrGenerateKeystore_enhance(SaveOrGenerateKeystore));
// EXTERNAL MODULE: ./node_modules/react-tippy/dist/tippy.css
var tippy = __webpack_require__(331);

// EXTERNAL MODULE: external "react-tippy"
var external_react_tippy_ = __webpack_require__(289);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/tooltip/Tooltip.js


/* harmony default export */ var Tooltip = (external_react_tippy_["Tooltip"]);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/help/Help.js





const Help_styles = () => ({
  root: {
    cursor: 'pointer'
  }
});

function Help({
  tooltip,
  className,
  classes
}) {
  return external_react_["createElement"](Tooltip, {
    className: classes.root,
    title: tooltip,
    position: "bottom"
  }, external_react_["createElement"](base_Icon, {
    className: className
  }, "help_outline"));
}

const Help_enhance = Object(external_recompose_["compose"])(withStyles(Help_styles), external_recompose_["pure"]);
/* harmony default export */ var help_Help = (Help_enhance(Help));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/info/InfoLabeled.js





const InfoLabeled_styles = theme => ({
  labelArea: {
    alignItems: 'center',
    display: 'flex'
  },
  label: {
    marginLeft: theme.spacing.unit
  },
  element: {
    marginLeft: theme.spacing.unit * 4,
    marginTop: theme.spacing.unit
  }
});

function InfoLabeled({
  label,
  tooltip,
  element,
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"]("div", {
    className: classes.labelArea
  }, external_react_["createElement"](help_Help, {
    tooltip: tooltip
  }), external_react_["createElement"](Typography, {
    className: classes.label,
    variant: "body2"
  }, label)), external_react_["createElement"]("div", {
    className: classes.element
  }, element));
}

const InfoLabeled_enhance = Object(external_recompose_["compose"])(withStyles(InfoLabeled_styles), external_recompose_["pure"]);
/* harmony default export */ var info_InfoLabeled = (InfoLabeled_enhance(InfoLabeled));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/info/InfoView.js









const InfoView_styles = theme => ({
  marginTop: {
    marginTop: theme.spacing.unit
  },
  textField: {
    maxWidth: theme.spacing.unit * 70
  },
  unlockText: {
    marginLeft: theme.spacing.unit * 4,
    marginTop: theme.spacing.unit * 2
  }
});

const ADDRESS_TOOLTIP = 'Your Address can also be known as you Account # or your Public Key. ' + 'It is what you share with people so they can send you NEO, GAS or other tokens. ' + 'Make sure it matches your paper wallet & whenever you enter your ' + 'address somewhere.';
const KEYSTORE_TOOLTIP = 'Your Keystore file stores your Private Key in an encrypted format using ' + 'a password. It is recommended to always use the Keystore file to unlock ' + 'your wallet.';
const PRIVATE_KEY_TOOLTIP = 'This is the unencrypted text version of your private key, meaning no ' + 'password is necessary. If someone were to find your unencrypted private ' + 'key, they could access your wallet without a password. For this reason, ' + 'encrypted versions such as the Keystore are typically recommended';
const PAPER_WALLET_TOOLTIP = 'A paper wallet is a form of cold storage. Simply print it out and keep it ' + 'somewhere safe.';

function InfoView({
  account,
  wallet,
  className,
  classes
}) {
  let content = external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Open or create a wallet to view wallet details.");

  if (account != null) {
    const address = external_react_["createElement"](info_InfoLabeled, {
      key: "address",
      label: "Your Address",
      tooltip: ADDRESS_TOOLTIP,
      element: external_react_["createElement"](common_CopyField, {
        id: "iv-address",
        className: classes.textField,
        value: account.id.address,
        name: "Address"
      })
    });

    if (wallet != null) {
      if (wallet.type === 'locked') {
        content = [address, external_react_["createElement"](Typography, {
          key: "unlock",
          className: classes.unlockText,
          variant: "body1"
        }, "Unlock your wallet to see more wallet details.")];
      } else {
        content = [address, external_react_["createElement"](info_InfoLabeled, {
          key: "keystore",
          className: classes.marginTop,
          label: "Keystore File",
          tooltip: KEYSTORE_TOOLTIP,
          element: external_react_["createElement"](keystore_SaveOrGenerateKeystore, {
            wallet: wallet
          })
        }), external_react_["createElement"](info_InfoLabeled, {
          key: "private-key",
          className: classes.marginTop,
          label: "Your Private Key",
          tooltip: PRIVATE_KEY_TOOLTIP,
          element: external_react_["createElement"](common_PasswordField, {
            id: "iv-private-key",
            className: classes.textField,
            value: Object(client_["privateKeyToWIF"])(wallet.privateKey),
            copyOnClickName: "Private Key"
          })
        }), external_react_["createElement"](info_InfoLabeled, {
          key: "print",
          className: classes.marginTop,
          label: "Print Paper Wallet",
          tooltip: PAPER_WALLET_TOOLTIP,
          element: external_react_["createElement"](paper_PrintPaperWalletButton, {
            address: account.id.address,
            privateKey: wallet.privateKey
          })
        })];
      }
    }
  }

  return external_react_["createElement"]("div", {
    className: className
  }, content);
}

const InfoView_enhance = Object(external_recompose_["compose"])(withStyles(InfoView_styles), external_recompose_["pure"]);
/* harmony default export */ var info_InfoView = (InfoView_enhance(InfoView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/info/InfoCard.js






const InfoCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    content: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    content: {
      padding: theme.spacing.unit * 2
    }
  },
  content: {}
});

function InfoCard({
  account,
  wallet,
  className,
  classes
}) {
  return external_react_["createElement"](layout_TitleCard, {
    className: className,
    title: "Details",
    titleComponent: "h2"
  }, external_react_["createElement"]("div", {
    className: classes.content
  }, external_react_["createElement"](info_InfoView, {
    account: account,
    wallet: wallet
  })));
}

const InfoCard_enhance = Object(external_recompose_["compose"])(withStyles(InfoCard_styles), external_recompose_["pure"]);
/* harmony default export */ var info_InfoCard = (InfoCard_enhance(InfoCard));
// EXTERNAL MODULE: external "@material-ui/core/Select"
var Select_ = __webpack_require__(287);
var Select_default = /*#__PURE__*/__webpack_require__.n(Select_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Select.js

/* harmony default export */ var Select = (Select_default.a);
// EXTERNAL MODULE: external "@material-ui/core/MenuItem"
var MenuItem_ = __webpack_require__(288);
var MenuItem_default = /*#__PURE__*/__webpack_require__.n(MenuItem_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/MenuItem.js

/* harmony default export */ var MenuItem = (MenuItem_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/selector/Selector.js





const Selector_styles = theme => ({
  root: {
    flex: '1 1 auto',
    background: theme.palette.background.paper
  },
  list: {
    paddingBottom: 0,
    paddingTop: 0
  },
  listItemTextRoot: {
    minWidth: 0,
    '& > h3': {
      overflow: 'hidden',
      textOverflow: 'ellipsis',
      whiteSpace: 'no-wrap'
    }
  },
  menuRoot: {
    maxWidth: '80%'
  }
});

const NULL_VALUE = '';

function Selector({
  id: idIn,
  label,
  selectText: selectTextIn,
  options,
  selectedID,
  helperText,
  className,
  onChange,
  classes
}) {
  const id = `selector-${idIn}`;
  const selectText = selectTextIn || '';
  return external_react_["createElement"](FormControl, {
    className: external_classnames_default()(className, classes.root)
  }, label === undefined ? null : external_react_["createElement"](InputLabel, {
    htmlFor: id
  }, label), external_react_["createElement"](Select, {
    value: selectedID == null ? NULL_VALUE : selectedID,
    renderValue: value => {
      const selectedOption = options.find(option => option.id === value);
      return selectedOption == null ? selectText : selectedOption.text;
    },
    onChange: onChange,
    input: external_react_["createElement"](base_Input, {
      id: id
    })
  }, options.map(option => external_react_["createElement"](MenuItem, {
    key: option.id,
    value: option.id
  }, option.text))), helperText === undefined ? null : external_react_["createElement"](FormHelperText, null, helperText));
}

const Selector_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withHandlers"])({
  onChange: ({
    onSelect,
    options
  }) => event => onSelect(options.find(option => option.id === event.target.value))
}), withStyles(Selector_styles), external_recompose_["pure"]);
/* harmony default export */ var selector_Selector = (Selector_enhance(Selector));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/SendTransaction.js
// $FlowFixMe















const SendTransaction_styles = theme => ({
  assetArea: {
    alignItems: 'center',
    display: 'flex',
    paddingTop: theme.spacing.unit
  },
  selector: {
    flex: '0 0 auto'
  },
  marginLeft: {
    marginLeft: theme.spacing.unit
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function SendTransaction({
  coins,
  className,
  toAddress,
  toAddressValidation,
  amount,
  amountValidation,
  selectedAssetHash,
  onChangeAddress,
  onChangeAmount,
  onSelect,
  onConfirmSend,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](base_TextField, {
    id: "st-address",
    value: toAddress,
    error: toAddressValidation != null && toAddress !== '',
    subtext: toAddress === '' ? null : toAddressValidation,
    hasSubtext: true,
    onChange: onChangeAddress,
    label: "To Address"
  }), external_react_["createElement"]("div", {
    className: classes.assetArea
  }, external_react_["createElement"](base_TextField, {
    id: "st-amount",
    value: amount,
    error: amountValidation != null && amount !== '',
    subtext: amount === '' ? null : amountValidation,
    hasSubtext: true,
    onChange: onChangeAmount,
    label: "Amount"
  }), external_react_["createElement"](selector_Selector, {
    className: external_classnames_default()(classes.selector, classes.marginLeft),
    id: "select-asset",
    label: null,
    helperText: "Select Asset",
    options: coins.map(coin => coin.asset).map(asset => ({
      id: getID_getID(asset.id),
      text: lib_getName(asset.symbol, getID_getID(asset.id)),
      asset
    })),
    selectedID: selectedAssetHash,
    onSelect: onSelect
  }), external_react_["createElement"](Button, {
    className: classes.marginLeft,
    variant: "raised",
    color: "primary",
    disabled: toAddressValidation != null || amountValidation != null,
    onClick: onConfirmSend
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "SEND"))));
}

const SendTransaction_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(208);

    if (node.hash && node.hash !== "c292c6bfc5ce1b8aa1c21d4133363939") {
      console.error("The definition of 'SendTransaction_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(208);
  }
}), Object(external_recompose_["withPropsOnChange"])(['address'], ({
  address
}) => ({
  coins: getSortedCoins(address == null ? [] : address.coins.edges.map(edge => edge.node))
})), Object(external_recompose_["withStateHandlers"])(() => ({
  toAddress: '',
  toAddressValidation: null,
  amount: '',
  amountValidation: null,
  selectedAssetHash: constants["a" /* GAS_ASSET_HASH */]
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_react_redux_["connect"])(null, dispatch => ({
  dispatch
})), Object(external_recompose_["withHandlers"])({
  onChangeAddress: ({
    setState
  }) => event => {
    const toAddress = event.target.value;
    let toAddressValidation;

    try {
      Object(client_["addressToScriptHash"])(toAddress);
    } catch (error) {
      toAddressValidation = sanitizeError(error).clientMessage;
    }

    setState(prevState => ({ ...prevState,
      toAddress,
      toAddressValidation
    }));
  },
  onChangeAmount: ({
    setState,
    coins,
    selectedAssetHash
  }) => event => {
    const amount = event.target.value;
    const amountValidation = src_wallet["api"].validateAmount(amount, coins.find(coin => getID_getID(coin.asset.id) === selectedAssetHash));
    setState(prevState => ({ ...prevState,
      amount,
      amountValidation
    }));
  },
  onSelect: ({
    setState,
    amount,
    coins
  }) => option => {
    const selectedAssetHash = option == null ? constants["a" /* GAS_ASSET_HASH */] : option.id;
    const amountValidation = src_wallet["api"].validateAmount(amount, coins.find(coin => getID_getID(coin.asset.id) === selectedAssetHash));
    setState(prevState => ({ ...prevState,
      selectedAssetHash,
      amountValidation
    }));
  },
  onConfirmSend: ({
    account,
    toAddress,
    amount,
    selectedAssetHash,
    coins,
    dispatch
  }) => () => {
    const coin = coins.find(c => getID_getID(c.asset.id) === selectedAssetHash);

    if (coin != null) {
      dispatch(wallet_confirmTransaction({
        account,
        address: toAddress,
        amount,
        asset: coin.asset
      }));
    }
  }
}), withStyles(SendTransaction_styles), external_recompose_["pure"]);
/* harmony default export */ var account_SendTransaction = (SendTransaction_enhance(SendTransaction));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/TransferView.js








function TransferView({
  account,
  address,
  loading,
  error,
  retry,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_ErrorView, {
      error: error,
      retry: retry,
      allowRetry: true
    });
  }

  if (loading) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  return external_react_["createElement"](account_SendTransaction, {
    className: className,
    account: account,
    address: address
  });
}

const TransferView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(209);

    if (node.hash && node.hash !== "8d02dabec2d7824bb6e6cecf8a69a158") {
      console.error("The definition of 'TransferView_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(209);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var account_TransferView = (TransferView_enhance(TransferView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/TransferCard.js









const TransferCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    content: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    content: {
      padding: theme.spacing.unit * 2
    }
  },
  content: {}
});

function TransferCard({
  account,
  wallet,
  address,
  loading,
  error,
  retry,
  className,
  classes,
  appOptions
}) {
  let content = external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Open or create a account to send CRONIUM, CRON and other tokens.");

  if (account != null) {
    if (wallet != null && wallet.type === 'locked') {
      content = external_react_["createElement"](Typography, {
        variant: "body1"
      }, "Unlock your account to send CRONIUM, CRON and other tokens.");
    } else if (appOptions.disableWalletModify) {
      content = external_react_["createElement"](Typography, {
        variant: "body1"
      }, "Wallet Maintenance: Transfer and claim disabled.");
    } else {
      content = external_react_["createElement"](account_TransferView, {
        address: address,
        account: account,
        loading: loading,
        error: error,
        retry: retry
      });
    }
  }

  return external_react_["createElement"](layout_TitleCard, {
    className: className,
    title: "Transfer"
  }, external_react_["createElement"]("div", {
    className: classes.content
  }, content));
}

const TransferCard_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(210);

    if (node.hash && node.hash !== "0bd437c0a4e8562ca65da75348f724ed") {
      console.error("The definition of 'TransferCard_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(210);
  }
}), mapAppOptions, withStyles(TransferCard_styles), external_recompose_["pure"]);
/* harmony default export */ var account_TransferCard = (TransferCard_enhance(TransferCard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/ClaimGASButton.js



 // $FlowFixMe






const ClaimGASButton_styles = theme => ({
  root: {
    alignItems: 'center',
    display: 'flex'
  },
  button: {
    marginRight: theme.spacing.unit
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function ClaimGASButton({
  className,
  claiming,
  onClaimGas,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](Button, {
    className: classes.button,
    disabled: claiming,
    onClick: onClaimGas,
    variant: "raised",
    color: "primary"
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "CLAIM CRON")));
}

const ClaimGASButton_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_react_redux_["connect"])((state, {
  account
}) => ({
  claiming: redux_selectClaiming(state)[account.id.address]
}), dispatch => ({
  dispatch
})), Object(external_recompose_["withHandlers"])({
  onClaimGas: options => () => {
    const {
      account,
      dispatch,
      onClaimConfirmed,
      appContext
    } = options;
    dispatch(startClaiming({
      address: account.id.address
    }));
    src_wallet["api"].claimAllGAS({
      appContext,
      account: account.id,
      onProgress: progress => {
        dispatch(claimProgress({
          address: account.id.address,
          progress
        }));

        switch (progress.type) {
          case 'fetch-unspent-sending':
            break;

          case 'fetch-unspent-done':
            break;

          case 'spend-all-sending':
            break;

          case 'spend-all-confirming':
            break;

          case 'spend-all-confirmed':
            break;

          case 'spend-all-skip':
            break;

          case 'fetch-unclaimed-sending':
            break;

          case 'fetch-unclaimed-done':
            break;

          case 'claim-gas-sending':
            break;

          case 'claim-gas-confirming':
            break;

          case 'claim-gas-confirmed':
            if (onClaimConfirmed) {
              onClaimConfirmed();
            }

            break;

          case 'claim-gas-skip':
            break;

          default:
            // eslint-disable-next-line
            progress.type;
            break;
        }
      }
    }).then(() => {
      dispatch(endClaiming({
        address: account.id.address
      }));
    }).catch(error => {
      dispatch(endClaiming({
        address: account.id.address
      }));
      dispatch(claim_claimError({
        address: account.id.address,
        error: 'Claiming all CRON failed: ' + `${sanitizeError(error).clientMessage}. ` + 'Please try again or refresh the page.'
      }));
    });
  }
}), withStyles(ClaimGASButton_styles), external_recompose_["pure"]);
/* harmony default export */ var account_ClaimGASButton = (ClaimGASButton_enhance(ClaimGASButton));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/ClaimGASStep.js








const ClaimGASStep_styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  },
  main: {
    alignItems: 'center',
    display: 'flex'
  },
  hash: {
    marginLeft: theme.spacing.unit * 2,
    paddingTop: theme.spacing.unit / 2
  },
  done: {
    color: theme.palette.primary[700]
  },
  inProgress: {
    color: theme.palette.primary[500]
  },
  tooltip: {
    cursor: 'pointer'
  },
  failed: {
    color: theme.palette.error[500]
  },
  margin: {
    marginRight: theme.spacing.unit
  }
});

function ClaimGASStep({
  stepDescription,
  tooltip,
  done,
  inProgress,
  error,
  transactionHash,
  className,
  classes
}) {
  let errorElement;

  if (error != null) {
    errorElement = external_react_["createElement"](Tooltip, {
      className: external_classnames_default()(classes.tooltip, classes.margin),
      title: error,
      position: "bottom"
    }, external_react_["createElement"](base_Icon, {
      className: classes.failed
    }, "warning"));
  }

  let hashElement;

  if (transactionHash != null) {
    hashElement = external_react_["createElement"](lib_TransactionLink, {
      className: classes.hash,
      transactionHash: transactionHash
    });
  }

  let checkElement;

  if (done) {
    checkElement = external_react_["createElement"](base_Icon, {
      className: external_classnames_default()(classes.done, classes.margin)
    }, "check_circle");
  }

  let loadingElement;

  if (inProgress) {
    loadingElement = external_react_["createElement"](CircularProgress, {
      className: classes.margin,
      size: 24,
      thickness: 5
    });
  }

  const color = external_classnames_default()({
    [classes.done]: done,
    [classes.inProgress]: inProgress,
    [classes.failed]: error != null
  });
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.main
  }, external_react_["createElement"](Typography, {
    className: external_classnames_default()(color, classes.margin),
    variant: "body1"
  }, stepDescription), checkElement, errorElement, loadingElement, external_react_["createElement"](help_Help, {
    className: color,
    tooltip: tooltip
  })), hashElement);
}

const ClaimGASStep_enhance = Object(external_recompose_["compose"])(withStyles(ClaimGASStep_styles), external_recompose_["pure"]);
/* harmony default export */ var account_ClaimGASStep = (ClaimGASStep_enhance(ClaimGASStep));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/ClaimGASSteps.js








const ClaimGASSteps_styles = theme => ({
  root: {
    display: 'flex',
    flexDirection: 'column'
  },
  padding: {
    paddingBottom: theme.spacing.unit / 2
  }
});

function ClaimGASSteps({
  className,
  progress,
  error,
  spendConfirmTransactionHash,
  claimConfirmTransactionHash,
  classes
}) {
  let spendInProgress = false;
  let spendError = null;
  let spendConfirmInProgress = false;
  let spendConfirmError = null;
  let claimInProgress = false;
  let claimError = null;
  let claimConfirmInProgress = false;
  let claimConfirmError = null;

  if (progress != null) {
    switch (progress.type) {
      case 'fetch-unspent-sending':
      case 'fetch-unspent-done':
      case 'spend-all-sending':
        if (error == null) {
          spendInProgress = true;
        } else {
          spendError = error;
        }

        break;

      case 'spend-all-confirming':
        if (error == null) {
          spendConfirmInProgress = true;
        } else {
          spendConfirmError = error;
        }

        break;

      case 'spend-all-confirmed':
      case 'spend-all-skip':
      case 'fetch-unclaimed-sending':
      case 'fetch-unclaimed-done':
      case 'claim-gas-sending':
        if (error == null) {
          claimInProgress = true;
        } else {
          claimError = error;
        }

        break;

      case 'claim-gas-confirming':
        if (error == null) {
          claimConfirmInProgress = true;
        } else {
          claimConfirmError = error;
        }

        break;

      case 'claim-gas-confirmed':
      case 'claim-gas-skip':
        if (error != null) {
          claimConfirmError = error;
        }

        break;

      default:
        break;
    }
  }

  const spendDone = !spendInProgress && spendError == null;
  const spendConfirmDone = spendDone && !spendConfirmInProgress && spendConfirmError == null;
  const claimDone = spendDone && spendConfirmDone && !claimInProgress && claimError == null;
  const claimConfirmDone = spendDone && spendConfirmDone && claimDone && !claimConfirmInProgress && claimConfirmError == null;
  return external_react_["createElement"](Collapse, {
    in: progress != null,
    timeout: "auto"
  }, external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](account_ClaimGASStep, {
    className: classes.padding,
    stepDescription: "1. Send CRONIUM to account address.",
    tooltip: 'In order to claim CRON we must "spend" it, so we create a ' + 'transaction that sends all CRONIUM back to the account address.',
    done: spendDone,
    inProgress: spendInProgress,
    error: spendError
  }), external_react_["createElement"](account_ClaimGASStep, {
    className: classes.padding,
    stepDescription: "2. Wait for confirmation of transfer.",
    tooltip: 'Wait for the transfer transaction that will "spend" all to be ' + 'confirmed. Confirming a transaction can take up to a minute to process.',
    done: spendConfirmDone,
    inProgress: spendConfirmInProgress,
    error: spendConfirmError,
    transactionHash: spendConfirmTransactionHash
  }), external_react_["createElement"](account_ClaimGASStep, {
    className: classes.padding,
    stepDescription: "3. Claim CRON.",
    tooltip: 'Claim all CRON for "spent" transactions including the ones we ' + '"spent" in the previous steps. ',
    done: claimDone,
    inProgress: claimInProgress,
    error: claimError
  }), external_react_["createElement"](account_ClaimGASStep, {
    stepDescription: "4. Wait for confirmation of claim.",
    tooltip: 'Wait for the CRON claim transaction for the ' + '"spent" CRONIUM transactions to be confirmed. Confirming a ' + 'transaction can take up to a minute to process.',
    done: claimConfirmDone,
    inProgress: claimConfirmInProgress,
    error: claimConfirmError,
    transactionHash: claimConfirmTransactionHash
  })));
}

const ClaimGASSteps_enhance = Object(external_recompose_["compose"])(Object(external_react_redux_["connect"])((state, {
  account
}) => ({
  progress: redux_selectClaimProgress(state)[account.id.address],
  error: redux_selectClaimError(state)[account.id.address],
  spendConfirmTransactionHash: redux_selectClaimSpendConfirmHash(state)[account.id.address],
  claimConfirmTransactionHash: redux_selectClaimClaimConfirmHash(state)[account.id.address]
})), withStyles(ClaimGASSteps_styles), external_recompose_["pure"]);
/* harmony default export */ var account_ClaimGASSteps = (ClaimGASSteps_enhance(ClaimGASSteps));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/AccountViewBase.js












const AccountViewBase_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingBottom: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    },
    padding: {
      paddingLeft: theme.spacing.unit,
      paddingRight: theme.spacing.unit
    },
    margin: {
      marginLeft: theme.spacing.unit,
      marginRight: theme.spacing.unit
    },
    marginLeft: {
      marginLeft: theme.spacing.unit
    },
    marginTop: {
      marginTop: theme.spacing.unit
    },
    table: {
      paddingBottom: theme.spacing.unit
    },
    steps: {
      paddingTop: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingBottom: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2
    },
    padding: {
      paddingLeft: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit * 2
    },
    margin: {
      marginLeft: theme.spacing.unit * 2,
      marginRight: theme.spacing.unit * 2
    },
    marginLeft: {
      marginLeft: theme.spacing.unit * 2
    },
    marginTop: {
      marginTop: theme.spacing.unit * 2
    },
    table: {
      paddingBottom: theme.spacing.unit * 2
    },
    steps: {
      paddingTop: theme.spacing.unit * 2
    }
  },
  root: {},
  padding: {},
  margin: {},
  marginLeft: {},
  marginTop: {},
  table: {},
  steps: {},
  textColor: {
    color: theme.typography.body1.color
  },
  unclaimed: {
    display: 'flex'
  },
  borderTop: {
    borderTop: `1px solid ${theme.custom.lightDivider}`
  },
  claimArea: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap'
  },
  availableClaim: {
    marginRight: theme.spacing.unit / 2
  },
  bottomElement: {
    paddingTop: theme.spacing.unit
  },
  transferText: {
    paddingTop: theme.spacing.unit,
    paddingBottom: theme.spacing.unit
  },
  linkText: {
    display: 'inline'
  }
});

function AccountViewBase({
  account,
  wallet,
  address,
  forward,
  onClaimConfirmed,
  className,
  classes,
  appOptions
}) {
  let confirmedCoins = [];
  let claimValueAvailable = '0';

  if (address != null) {
    confirmedCoins = address.coins.edges.map(edge => edge.node);
    claimValueAvailable = address.claim_value_available_coin.value;
  }

  let forwardElement;

  if (forward) {
    forwardElement = external_react_["createElement"]("div", {
      className: external_classnames_default()(classes.marginTop, classes.borderTop)
    }, external_react_["createElement"](upsell_WalletPageUpsell, {
      className: external_classnames_default()(classes.marginLeft, classes.marginTop),
      source: "HOME"
    }));
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](lib_CoinTable, {
    className: external_classnames_default()(classes.table, classes.margin),
    coins: confirmedCoins,
    variant: "display1",
    component: "p",
    textClassName: classes.textColor
  }), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.claimArea, classes.borderTop)
  }, external_react_["createElement"](Typography, {
    className: external_classnames_default()(classes.availableClaim, classes.marginLeft, classes.marginTop),
    variant: "subheading",
    component: "p"
  }, "CRON available to claim:"), external_react_["createElement"](lib_CoinValue, {
    className: external_classnames_default()(classes.marginTop),
    variant: "subheading",
    component: "p",
    value: claimValueAvailable
  }), appOptions.disableWalletModify || wallet != null && wallet.type === 'locked' ? null : external_react_["createElement"](account_ClaimGASButton, {
    className: external_classnames_default()(classes.marginLeft, classes.marginTop),
    account: account,
    onClaimConfirmed: onClaimConfirmed
  })), external_react_["createElement"](account_ClaimGASSteps, {
    className: external_classnames_default()(classes.steps, classes.margin),
    account: account
  }), forwardElement);
}

const AccountViewBase_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(205);

    if (node.hash && node.hash !== "38dd63f96713136654e5e3774333acd6") {
      console.error("The definition of 'AccountViewBase_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(205);
  }
}), mapAppOptions, withStyles(AccountViewBase_styles), external_recompose_["pure"]);
/* harmony default export */ var account_AccountViewBase = (AccountViewBase_enhance(AccountViewBase));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/AccountView.js








function AccountView({
  account,
  wallet,
  address,
  loading,
  error,
  retry,
  forward,
  className
}) {
  if (error != null) {
    return external_react_["createElement"](error_ErrorView, {
      error: error,
      retry: retry,
      allowRetry: true
    });
  }

  if (loading) {
    return external_react_["createElement"](loading_PageLoading, null);
  }

  return external_react_["createElement"](account_AccountViewBase, {
    className: className,
    account: account,
    wallet: wallet,
    address: address,
    onClaimConfirmed: retry,
    forward: forward
  });
}

const AccountView_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(206);

    if (node.hash && node.hash !== "c225b160f40579bdde5032d2776c4e1b") {
      console.error("The definition of 'AccountView_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(206);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var account_AccountView = (AccountView_enhance(AccountView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/addShowSnackbarError.js
 // $FlowFixMe



/* harmony default export */ var addShowSnackbarError = (Object(external_react_redux_["connect"])(null, dispatch => ({
  showSnackbarError: error => dispatch(setSnackbar({
    message: sanitizeError(error).clientMessage
  }))
})));
// EXTERNAL MODULE: external "@material-ui/core/Menu"
var Menu_ = __webpack_require__(296);
var Menu_default = /*#__PURE__*/__webpack_require__.n(Menu_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Menu.js

/* harmony default export */ var Menu = (Menu_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Dialog"
var Dialog_ = __webpack_require__(292);
var Dialog_default = /*#__PURE__*/__webpack_require__.n(Dialog_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Dialog.js





const Dialog_styles = theme => ({
  [theme.breakpoints.down('xs')]: {
    xs: {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: '100%',
      borderRadius: 0
    }
  },
  [theme.breakpoints.down('sm')]: {
    sm: {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: '100%',
      borderRadius: 0
    }
  },
  [theme.breakpoints.down('md')]: {
    md: {
      margin: 0,
      width: '100%',
      maxWidth: '100%',
      height: '100%',
      maxHeight: '100%',
      borderRadius: 0
    }
  },
  xs: {},
  sm: {},
  md: {}
});

function Dialog({
  className,
  maxWidth,
  classes,
  ...props
}) {
  let muiClasses;

  if (maxWidth != null) {
    muiClasses = {
      paper: classes[maxWidth]
    };
  }

  return external_react_["createElement"](Dialog_default.a, {
    disableBackdropClick: props.disableBackdropClick,
    disableEscapeKeyDown: props.disableEscapeKeyDown,
    fullScreen: props.fullScreen,
    fullWidth: props.fullWidth,
    onBackdropClick: props.onBackdropClick,
    onClose: props.onClose,
    onEnter: props.onEnter,
    onEntered: props.onEntered,
    onEntering: props.onEntering,
    onEscapeKeyDown: props.onEscapeKeyDown,
    onExit: props.onExit,
    onExited: props.onExited,
    onExiting: props.onExiting,
    open: props.open,
    PaperProps: props.PaperProps,
    TransitionComponent: props.TransitionComponent,
    transitionDuration: props.transitionDuration,
    className: className,
    classes: muiClasses,
    maxWidth: maxWidth
  }, props.children);
}

const Dialog_enhance = Object(external_recompose_["compose"])(withStyles(Dialog_styles), external_recompose_["pure"]);
/* harmony default export */ var base_Dialog = (Dialog_enhance(Dialog));
// EXTERNAL MODULE: external "@material-ui/core/DialogTitle"
var DialogTitle_ = __webpack_require__(293);
var DialogTitle_default = /*#__PURE__*/__webpack_require__.n(DialogTitle_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/DialogTitle.js

/* harmony default export */ var DialogTitle = (DialogTitle_default.a);
// EXTERNAL MODULE: external "@material-ui/core/DialogContent"
var DialogContent_ = __webpack_require__(294);
var DialogContent_default = /*#__PURE__*/__webpack_require__.n(DialogContent_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/DialogContent.js

/* harmony default export */ var DialogContent = (DialogContent_default.a);
// EXTERNAL MODULE: external "@material-ui/core/DialogActions"
var DialogActions_ = __webpack_require__(295);
var DialogActions_default = /*#__PURE__*/__webpack_require__.n(DialogActions_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/DialogActions.js

/* harmony default export */ var DialogActions = (DialogActions_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/select/ChangeNameDialog.js


// $FlowFixMe





const ChangeNameDialog_styles = theme => ({
  content: {
    display: 'flex',
    flexDirection: 'column'
  },
  changeNameField: {
    marginTop: theme.spacing.unit * 2
  }
});

const CHANGE_NAME_TEXT = 'Change the name of this wallet. Wallet name is an alias stored ' + 'local to your computer to make it easier to manage multiple ' + 'wallets.';

function ChangeNameDialog({
  open,
  onClose,
  className,
  name,
  validation,
  onChange,
  onConfirm,
  classes
}) {
  const disabled = validation != null;
  return external_react_["createElement"](base_Dialog, {
    className: className,
    maxWidth: "sm",
    open: open,
    onClose: onClose
  }, external_react_["createElement"](DialogTitle, null, "Change Wallet Name"), external_react_["createElement"](DialogContent, null, external_react_["createElement"]("div", {
    className: classes.content
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, CHANGE_NAME_TEXT), external_react_["createElement"](base_TextField, {
    id: "change-name",
    className: classes.changeNameField,
    value: name,
    error: validation != null,
    subtext: validation,
    maxCharacters: src_wallet["api"].MAX_NAME_CHARACTERS,
    hasSubtext: true,
    label: "Wallet Name",
    onChange: onChange,
    onEnter: disabled ? undefined : onConfirm
  }))), external_react_["createElement"](DialogActions, null, external_react_["createElement"](Button, {
    onClick: onClose,
    color: "primary"
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CANCEL")), external_react_["createElement"](Button, {
    disabled: disabled,
    onClick: onConfirm,
    color: "primary"
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CONFIRM"))));
}

const ChangeNameDialog_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), addShowSnackbarError, Object(external_recompose_["withStateHandlers"])(({
  account
}) => ({
  name: account.name,
  validation: null
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onChangeName: ({
    setState
  }) => name => {
    let validation;

    try {
      src_wallet["api"].validateName(name);
    } catch (error) {
      validation = sanitizeError(error).clientMessage;
    }

    setState(prevState => ({ ...prevState,
      name,
      validation
    }));
  }
}), Object(external_recompose_["withHandlers"])({
  onChange: ({
    onChangeName
  }) => event => {
    onChangeName(event.target.value);
  },
  onConfirm: options => () => {
    const {
      account,
      name,
      appContext,
      onClose,
      showSnackbarError
    } = options;
    appContext.monitor.captureSpan(span => src_wallet["api"].updateName({
      appContext,
      id: account.id,
      name
    }).then(() => onClose()).catch(error => {
      span.logError({
        name: 'neotracker_wallet_change_name',
        error
      });
      throw error;
    }), {
      name: 'neotracker_wallet_change_name'
    }).catch(error => {
      showSnackbarError(error);
    });
  }
}), withStyles(ChangeNameDialog_styles), Object(external_recompose_["lifecycle"])({
  componentWillReceiveProps(nextProps) {
    if (this.props.account !== nextProps.account) {
      nextProps.onChangeName(nextProps.account.name);
    }
  }

}), external_recompose_["pure"]);
/* harmony default export */ var select_ChangeNameDialog = (ChangeNameDialog_enhance(ChangeNameDialog));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/select/SelectCardMenu.js
function SelectCardMenu_extends() { SelectCardMenu_extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return SelectCardMenu_extends.apply(this, arguments); }











const SelectCardMenu_styles = theme => ({
  buttonText: {
    color: theme.custom.colors.common.white
  },
  link: {
    color: 'inherit',
    textDecoration: 'none'
  }
});

function SelectCardMenu({
  account,
  wallet,
  className,
  open,
  anchorEl,
  openChangeName,
  onClickMenu,
  onCloseMenu,
  onClickChangeName,
  onCloseChangeNameDialog,
  onClickDeleteWallet,
  classes
}) {
  const makeMenuItem = ({
    path,
    onClick,
    text,
    tooltip,
    disabled: disabledIn
  }) => {
    const disabled = !!disabledIn;
    let menuItem = text;

    if (path != null && !disabled) {
      menuItem = external_react_["createElement"](external_react_router_dom_["Link"], {
        className: classes.link,
        to: path
      }, menuItem);
    }

    const TooltipMenuItem = props => external_react_["createElement"](Tooltip, {
      title: tooltip,
      position: "bottom"
    }, external_react_["createElement"](MenuItem, SelectCardMenu_extends({
      key: text,
      onClick: disabled ? undefined : onClick,
      disabled: disabled
    }, props), menuItem));

    return external_react_["createElement"](TooltipMenuItem, null);
  };

  let changeNameDialog;
  const canChangeName = account != null && account.configurableName;

  if (account != null && canChangeName) {
    changeNameDialog = external_react_["createElement"](select_ChangeNameDialog, {
      account: account,
      open: openChangeName,
      onClose: onCloseChangeNameDialog
    });
  }

  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](Button, {
    "aria-owns": open ? 'select-card-menu' : null,
    "aria-haspopup": "true",
    variant: "raised",
    color: "primary",
    onClick: onClickMenu
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "MENU")), external_react_["createElement"](Menu, {
    id: "select-card-menu",
    anchorEl: anchorEl,
    open: open,
    onClose: onCloseMenu
  }, makeMenuItem({
    onClick: onClickChangeName,
    text: 'Change Name',
    tooltip: CHANGE_NAME_TEXT,
    disabled: !canChangeName
  }), makeMenuItem({
    path: WALLET_CREATE_KEYSTORE,
    text: 'Change Password',
    tooltip: 'Change the password used to unlock this account.',
    disabled: wallet == null || wallet.type === 'locked'
  }), makeMenuItem({
    onClick: onClickDeleteWallet,
    text: 'Close Wallet',
    tooltip: 'Remove the currently selected account from browser local ' + 'storage. This does not delete the address or the funds at the ' + 'address, it only removes it from storage local to your computer.',
    disabled: account == null || !account.deletable
  })), changeNameDialog);
}

const SelectCardMenu_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), addShowSnackbarError, Object(external_recompose_["withStateHandlers"])(() => ({
  anchorEl: null,
  open: false,
  openChangeName: false
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onClickMenu: ({
    setState
  }) => event => {
    const anchorEl = event.currentTarget;
    setState(prevState => ({ ...prevState,
      open: true,
      anchorEl
    }));
  },
  onCloseMenu: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    open: false
  })),
  onClickChangeName: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    open: false,
    openChangeName: true
  })),
  onCloseChangeNameDialog: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    openChangeName: false
  })),
  onClickDeleteWallet: options => () => {
    const {
      account,
      setState,
      appContext,
      showSnackbarError
    } = options;
    appContext.monitor.captureSpan(span => src_wallet["api"].deleteAccount({
      appContext,
      id: account.id
    }).catch(error => {
      span.logError({
        name: 'neotracker_wallet_delete',
        message: `Failed to delete wallet ${account.id.address}`,
        error
      });
      throw error;
    }), {
      name: 'neotracker_wallet_delete'
    }).then(() => {
      setState(prevState => ({ ...prevState,
        open: false
      }));
    }).catch(error => {
      showSnackbarError(error);
    });
  }
}), withStyles(SelectCardMenu_styles), external_recompose_["pure"]);
/* harmony default export */ var select_SelectCardMenu = (SelectCardMenu_enhance(SelectCardMenu));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/select/UnlockWallet.js


 // $FlowFixMe








const UnlockWallet_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      padding: theme.spacing.unit * 2
    }
  },
  root: {
    borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    flexDirection: 'column'
  },
  passwordArea: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap',
    marginTop: theme.spacing.unit,
    maxWidth: theme.spacing.unit * 70
  },
  passwordField: {
    flex: '1 1 auto',
    marginRight: theme.spacing.unit
  },
  spacer: {
    marginLeft: theme.spacing.unit,
    width: 32,
    height: 32
  },
  progress: {
    marginLeft: theme.spacing.unit
  },
  buttonText: {
    color: theme.custom.colors.common.white
  }
});

function UnlockWallet({
  className,
  password,
  error,
  loading,
  onChange,
  onSubmit,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Unlock your wallet to claim CRON."), external_react_["createElement"]("div", {
    className: classes.passwordArea
  }, external_react_["createElement"](common_PasswordField, {
    id: "unlock-wallet-password",
    className: classes.passwordField,
    value: password,
    hasSubtext: true,
    validation: error,
    onChange: onChange,
    onEnter: onSubmit,
    label: "Enter Password"
  }), external_react_["createElement"](Button, {
    variant: "raised",
    color: "primary",
    disabled: loading,
    onClick: onSubmit
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "UNLOCK")), loading ? external_react_["createElement"](CircularProgress, {
    className: classes.progress,
    size: 32,
    thickness: 5
  }) : external_react_["createElement"]("div", {
    className: classes.spacer
  })));
}

const UnlockWallet_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), external_react_router_dom_["withRouter"], Object(external_recompose_["withStateHandlers"])(() => ({
  password: '',
  loading: false,
  error: null
}), {
  onChange: prevState => event => {
    const password = event.target.value;
    return { ...prevState,
      password,
      error: null
    };
  },
  onLoading: prevState => () => ({ ...prevState,
    loading: true
  }),
  onDone: prevState => () => ({ ...prevState,
    loading: false
  }),
  onError: prevState => error => ({ ...prevState,
    loading: false,
    error: `Unlock failed: ${sanitizeError(error).clientMessage}`
  })
}), Object(external_recompose_["withHandlers"])({
  onSubmit: ({
    history,
    wallet,
    password,
    onLoading,
    onDone,
    onError,
    forward,
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    onLoading();
    appContext.monitor.captureLog(() => src_wallet["api"].unlockWallet({
      appContext,
      id: wallet.account.id,
      password
    }), {
      name: 'neotracker_wallet_unlock_keystore',
      level: 'verbose',
      error: {}
    }).then(() => {
      onDone();

      if (forward) {
        history.push(WALLET_HOME);
      }
    }).catch(error => {
      onError(error);
    });
  }
}), withStyles(UnlockWallet_styles), external_recompose_["pure"]);
/* harmony default export */ var select_UnlockWallet = (UnlockWallet_enhance(UnlockWallet));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/select/SelectCard.js


















const SelectCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    header: {
      paddingLeft: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    },
    content: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    header: {
      paddingLeft: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2,
      paddingRight: theme.spacing.unit,
      paddingBottom: theme.spacing.unit
    },
    content: {
      padding: theme.spacing.unit * 2
    }
  },
  content: {},
  header: {
    alignItems: 'center',
    borderBottom: `1px solid ${theme.custom.lightDivider}`,
    display: 'flex',
    justifyContent: 'space-between',
    flexWrap: 'wrap'
  },
  headerGroup: {
    alignItems: 'center',
    display: 'flex',
    minWidth: 0,
    flex: '1 1 auto',
    flexWrap: 'wrap'
  },
  selectorArea: {
    alignItems: 'center',
    display: 'flex',
    flex: '0 1 auto',
    height: 42,
    marginBottom: theme.spacing.unit,
    marginRight: theme.spacing.unit,
    minWidth: 0
  },
  buttonArea: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap'
  },
  title: {
    marginRight: theme.spacing.unit
  },
  selector: {
    marginTop: theme.spacing.unit / 2,
    maxWidth: theme.spacing.unit * 50,
    minWidth: 0
  },
  buttonText: {
    color: theme.custom.colors.common.white
  },
  buttonMargin: {
    marginBottom: theme.spacing.unit,
    marginRight: theme.spacing.unit
  },
  link: {
    display: 'block',
    textDecoration: 'none'
  }
});

function SelectCard({
  account,
  wallet,
  address,
  loading,
  error,
  retry,
  forward,
  className,
  accounts,
  onSelect,
  classes
}) {
  const selector = external_react_["createElement"]("div", {
    className: classes.selectorArea
  }, external_react_["createElement"](Typography, {
    className: classes.title,
    variant: "title",
    component: "h1"
  }, "Wallet"), accounts.length > 0 ? external_react_["createElement"](selector_Selector, {
    className: classes.selector,
    id: "select-account",
    selectText: "Select Wallet",
    options: accounts.map(accountOption => ({
      id: accountOption.id.address,
      text: accountOption.name,
      account: accountOption
    })),
    selectedID: account == null ? null : account.id.address,
    onSelect: onSelect
  }) : null);

  const makeButton = ({
    path,
    onClick,
    text,
    tooltip
  }) => {
    let button = external_react_["createElement"](Button, {
      className: external_classnames_default()({
        [classes.buttonMargin]: path == null
      }),
      variant: "raised",
      color: "primary",
      onClick: onClick
    }, external_react_["createElement"](Typography, {
      className: classes.buttonText,
      variant: "body1"
    }, text));

    if (path != null) {
      button = external_react_["createElement"](external_react_router_dom_["Link"], {
        className: external_classnames_default()(classes.link, classes.buttonMargin),
        to: path
      }, button);
    }

    return external_react_["createElement"](Tooltip, {
      title: tooltip,
      position: "bottom"
    }, button);
  };

  let content;

  if (account == null) {
    content = external_react_["createElement"](Typography, {
      className: classes.content,
      variant: "body1"
    }, "Open or create a account to view balance and claim CRON.");

    if (forward) {
      content = external_react_["createElement"](upsell_WalletPageUpsell, {
        className: classes.content,
        source: "HOME"
      });
    }
  } else {
    let unlock;

    if (wallet != null && wallet.type === 'locked') {
      unlock = external_react_["createElement"](select_UnlockWallet, {
        wallet: wallet,
        forward: forward
      });
    }

    content = external_react_["createElement"]("div", null, unlock, external_react_["createElement"](account_AccountView, {
      account: account,
      wallet: wallet,
      address: address,
      loading: loading,
      error: error,
      retry: retry,
      forward: forward
    }));
  }

  return external_react_["createElement"](Card, {
    className: className
  }, external_react_["createElement"]("div", {
    className: classes.header
  }, external_react_["createElement"]("div", {
    className: classes.headerGroup
  }, selector, external_react_["createElement"]("div", {
    className: classes.buttonArea
  }, makeButton({
    path: WALLET_NEW_WALLET,
    text: 'NEW WALLET',
    tooltip: 'Generate a new private key and address in order to interact ' + 'with the blockchain to receive CRONIUM, CRON or other tokens.'
  }), makeButton({
    path: WALLET_OPEN_WALLET,
    text: 'OPEN WALLET',
    tooltip: 'Open a account to interact with the blockchain in order to send ' + 'CRONIUM, CRON or other tokens.'
  }), external_react_["createElement"](select_SelectCardMenu, {
    className: classes.buttonMargin,
    account: account,
    wallet: wallet
  }))), external_react_["createElement"](link_Link, {
    className: classes.buttonMargin,
    path: WALLET_FAQ,
    title: "FAQ",
    variant: "subheading",
    component: "p"
  })), content);
}

const SelectCard_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), addShowSnackbarError, src_wallet["api"].mapAccounts, Object(external_recompose_["withHandlers"])({
  onSelect: ({
    appContext: appContextIn,
    showSnackbarError
  }) => option => {
    const appContext = appContextIn;
    appContext.monitor.captureLog(() => src_wallet["api"].selectAccount({
      appContext,
      id: option == null ? undefined : option.account.id
    }), {
      name: 'neotracker_wallet_select_account',
      level: 'verbose',
      error: {}
    }).catch(error => {
      showSnackbarError(error);
    });
  }
}), relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(207);

    if (node.hash && node.hash !== "468632a3387cc28b19cbb7d75ec69522") {
      console.error("The definition of 'SelectCard_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(207);
  }
}), withStyles(SelectCard_styles), external_recompose_["pure"]);
/* harmony default export */ var select_SelectCard = (SelectCard_enhance(SelectCard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/transaction/WalletTransactionsCard.js










const WalletTransactionsCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {}
});

function WalletTransactionsCard({
  account,
  address,
  loading,
  error,
  retry,
  className,
  classes
}) {
  const wrapContent = element => external_react_["createElement"]("div", {
    className: classes.padding
  }, element);

  let content = wrapContent(external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Open or create a wallet to view transaction history."));

  if (account != null) {
    if (error != null) {
      content = external_react_["createElement"](error_ErrorView, {
        error: error,
        retry: retry,
        allowRetry: true
      });
    } else if (loading) {
      content = external_react_["createElement"](loading_PageLoading, null);
    } else {
      content = external_react_["createElement"](address_AddressTransactionPagingView, {
        address: address
      });
    }
  }

  return external_react_["createElement"](layout_TitleCard, {
    className: className,
    title: "Transactions",
    titleComponent: "h2"
  }, content);
}

const WalletTransactionsCard_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(211);

    if (node.hash && node.hash !== "9b369c841c295b6f06dc855e0abf8603") {
      console.error("The definition of 'WalletTransactionsCard_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(211);
  }
}), withStyles(WalletTransactionsCard_styles), external_recompose_["pure"]);
/* harmony default export */ var transaction_WalletTransactionsCard = (WalletTransactionsCard_enhance(WalletTransactionsCard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/transfer/WalletTransfersCard.js










const WalletTransfersCard_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    padding: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    padding: {
      padding: theme.spacing.unit * 2
    }
  },
  padding: {}
});

function WalletTransfersCard({
  account,
  address,
  loading,
  error,
  retry,
  className,
  classes
}) {
  const wrapContent = element => external_react_["createElement"]("div", {
    className: classes.padding
  }, element);

  let content = wrapContent(external_react_["createElement"](Typography, {
    variant: "body1"
  }, "Open or create a wallet to view transfer history."));

  if (account != null) {
    if (error != null) {
      content = external_react_["createElement"](error_ErrorView, {
        error: error,
        retry: retry,
        allowRetry: true
      });
    } else if (loading) {
      content = external_react_["createElement"](loading_PageLoading, null);
    } else {
      content = external_react_["createElement"](address_AddressTransferPagingView, {
        address: address
      });
    }
  }

  return external_react_["createElement"](layout_TitleCard, {
    className: className,
    title: "Transfers",
    titleComponent: "h2"
  }, content);
}

const WalletTransfersCard_enhance = Object(external_recompose_["compose"])(relay_fragmentContainer({
  address: function () {
    const node = __webpack_require__(212);

    if (node.hash && node.hash !== "c1c90f1911ddb52fc464ea0b008a56e2") {
      console.error("The definition of 'WalletTransfersCard_address' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
    }

    return __webpack_require__(212);
  }
}), withStyles(WalletTransfersCard_styles), external_recompose_["pure"]);
/* harmony default export */ var transfer_WalletTransfersCard = (WalletTransfersCard_enhance(WalletTransfersCard));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/main/MainWalletView.js













const MainWalletView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    marginTop: {
      marginTop: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    marginTop: {
      marginTop: theme.spacing.unit * 2
    }
  },
  marginTop: {}
});

const MainWalletView_safeRetry = createSafeRetry();

function MainWalletView({
  account,
  wallet,
  props: propsIn,
  lastProps,
  error: errorIn,
  retry,
  className,
  classes
}) {
  if (errorIn != null && retry != null) {
    MainWalletView_safeRetry(retry);
  } else {
    MainWalletView_safeRetry.cancel();
  }

  const props = propsIn || lastProps;
  const error = props == null ? errorIn : null;
  const address = props == null ? null : props.address;
  const loading = props == null;
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"](select_SelectCard, {
    account: account,
    wallet: wallet,
    address: address || null,
    loading: loading,
    error: error,
    retry: retry
  }), external_react_["createElement"](account_TransferCard, {
    className: classes.marginTop,
    account: account,
    wallet: wallet,
    address: address || null,
    loading: loading,
    error: error,
    retry: retry
  }), external_react_["createElement"](transaction_WalletTransactionsCard, {
    className: classes.marginTop,
    account: account,
    address: address || null,
    loading: loading,
    error: error,
    retry: retry
  }), external_react_["createElement"](transfer_WalletTransfersCard, {
    className: classes.marginTop,
    account: account,
    address: address || null,
    loading: loading,
    error: error,
    retry: retry
  }), external_react_["createElement"](info_InfoCard, {
    className: classes.marginTop,
    account: account,
    wallet: wallet
  }));
}

const MainWalletView_enhance = Object(external_recompose_["compose"])(src_wallet["api"].mapCurrentLocalWallet, queryRenderer(function () {
  const node = __webpack_require__(213);

  if (node.hash && node.hash !== "647fdbf3ddc446138a9c15d55a74d0b9") {
    console.error("The definition of 'MainWalletViewQuery' appears to have changed. Run `relay-compiler` to update the generated files to receive the expected data.");
  }

  return __webpack_require__(213);
}, {
  skipNullVariables: true,
  mapPropsToVariables: {
    client: ({
      account
    }) => account == null ? null : {
      hash: account.id.address
    }
  },
  cacheConfig: {
    force: true
  }
}), Object(external_recompose_["getContext"])({
  relayEnvironment: () => null
}), withStyles(MainWalletView_styles), external_recompose_["pure"]);
/* harmony default export */ var main_MainWalletView = (MainWalletView_enhance(MainWalletView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/account/SendTransactionDialog.js
 // $FlowFixMe













const SendTransactionDialog_styles = theme => ({
  content: {
    display: 'flex',
    flexDirection: 'column'
  },
  inline: {
    display: 'inline-block'
  },
  confirmText: {
    paddingTop: theme.spacing.unit
  },
  progress: {
    minWidth: 32,
    width: 32
  }
});

function SendTransactionDialog({
  className,
  confirmTransaction: confirmTransactionIn,
  open,
  loading,
  confirmed,
  hash,
  error,
  onClose,
  onCancel,
  onConfirm,
  classes
}) {
  const cancel = external_react_["createElement"](Button, {
    onClick: onCancel,
    disabled: loading,
    color: "primary"
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CANCEL"));
  let content;
  let actions = external_react_["createElement"](DialogActions, null, loading ? external_react_["createElement"](CircularProgress, {
    className: classes.progress,
    size: 32,
    thickness: 5
  }) : external_react_["createElement"]("span", null), cancel, external_react_["createElement"](Button, {
    onClick: onConfirm,
    disabled: loading,
    color: "primary"
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CONFIRM")));

  if (confirmTransactionIn != null) {
    const confirmTransaction = confirmTransactionIn;

    const makeText = prelude => external_react_["createElement"](Typography, null, prelude, external_react_["createElement"](lib_CoinValue, {
      className: classes.inline,
      variant: "body2",
      component: "span",
      value: confirmTransaction.amount
    }), ' ', external_react_["createElement"](Typography, {
      className: classes.inline,
      variant: "body2",
      component: "span"
    }, lib_getName(confirmTransaction.asset.symbol, getID_getID(confirmTransaction.asset.id))), ' to address: ', external_react_["createElement"](lib_AddressLink, {
      addressHash: confirmTransaction.address,
      newTab: true,
      component: "span"
    }));

    if (confirmed && hash != null) {
      content = external_react_["createElement"]("div", {
        className: classes.content
      }, makeText('Transfer initiated to send '), external_react_["createElement"](Typography, {
        variant: "body1"
      }, 'Transactions typically take up to one minute to confirm and ' + 'appear on the explorer: '), external_react_["createElement"](lib_TransactionLink, {
        transactionHash: hash,
        newTab: true
      }));
      actions = external_react_["createElement"](DialogActions, null, external_react_["createElement"](Button, {
        onClick: onClose,
        color: "primary"
      }, external_react_["createElement"](Typography, {
        color: "inherit",
        variant: "body1"
      }, "CLOSE")));
    } else if (confirmed && error != null) {
      content = external_react_["createElement"]("div", {
        className: classes.content
      }, makeText('Transfer failed to send '), external_react_["createElement"](Typography, {
        variant: "body1"
      }, `Error: ${error}`));
      actions = external_react_["createElement"](DialogActions, null, cancel, external_react_["createElement"](Button, {
        onClick: onConfirm,
        color: "primary"
      }, external_react_["createElement"](Typography, {
        color: "inherit",
        variant: "body1"
      }, "RETRY")));
    } else if (loading) {
      content = external_react_["createElement"]("div", {
        className: classes.content
      }, makeText('Initiating transfer to send '));
    } else {
      content = external_react_["createElement"]("div", {
        className: classes.content
      }, makeText('You are about to send '), external_react_["createElement"](Typography, {
        className: classes.confirmText,
        variant: "title",
        component: "span"
      }, "Are you sure you want to do this?"));
    }
  }

  return external_react_["createElement"](base_Dialog, {
    className: className,
    maxWidth: "sm",
    disableBackdropClick: !confirmed,
    disableEscapeKeyDown: !confirmed,
    open: confirmTransactionIn != null && open,
    onClose: onClose
  }, external_react_["createElement"](DialogTitle, null, "Confirm Transfer"), external_react_["createElement"](DialogContent, null, content), actions);
}

const SendTransactionDialog_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_react_redux_["connect"])(state => ({
  confirmTransaction: redux_selectConfirmTransaction(state)
}), dispatch => ({
  dispatch
})), Object(external_recompose_["withStateHandlers"])(() => ({
  open: false,
  loading: false,
  confirmed: false,
  hash: null,
  error: null,
  timer: null
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onClose: ({
    dispatch,
    setState
  }) => () => {
    setState(prevState => ({ ...prevState,
      open: false,
      timer: setTimeout(() => {
        dispatch(clearConfirmTransaction());
        setState(prevStateInner => ({ ...prevStateInner,
          loading: false,
          confirmed: false,
          hash: null,
          error: null
        }));
      }, 1000)
    }));
  }
}), Object(external_recompose_["withHandlers"])({
  onCancel: ({
    appContext: appContextIn,
    onClose
  }) => () => {
    const appContext = appContextIn;
    onClose();
    appContext.monitor.log({
      name: 'neotracker_wallet_send_transaction_cancel',
      level: 'verbose'
    });
  },
  onConfirm: ({
    confirmTransaction,
    setState,
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    setState(prevState => ({ ...prevState,
      loading: true,
      confirmed: false,
      hash: null,
      error: null
    }));
    appContext.monitor.captureLog(() => src_wallet["api"].doSendAsset({
      appContext,
      account: confirmTransaction.account.id,
      toAddress: confirmTransaction.address,
      amount: new external_bignumber_js_default.a(confirmTransaction.amount),
      assetType: confirmTransaction.asset.type,
      assetHash: getID_getID(confirmTransaction.asset.id)
    }), {
      name: 'neotracker_wallet_send_transaction',
      level: 'verbose',
      error: {}
    }).then(hash => {
      setState(prevState => ({ ...prevState,
        loading: false,
        confirmed: true,
        hash,
        error: null
      }));
    }).catch(error => {
      setState(prevState => ({ ...prevState,
        loading: false,
        confirmed: true,
        hash: null,
        error: error instanceof ClientError["b" /* ClientError */] ? error.clientMessage : 'Unknown error.'
      }));
    });
  }
}), Object(external_recompose_["lifecycle"])({
  componentWillReceiveProps(nextProps) {
    if (this.props.confirmTransaction !== nextProps.confirmTransaction && nextProps.confirmTransaction != null) {
      if (nextProps.timer != null) {
        clearTimeout(nextProps.timer);
      }

      nextProps.setState(prevState => ({ ...prevState,
        open: true,
        loading: false,
        confirmed: false,
        hash: null,
        error: null
      }));
    }
  }

}), withStyles(SendTransactionDialog_styles), external_recompose_["pure"]);
/* harmony default export */ var account_SendTransactionDialog = (SendTransactionDialog_enhance(SendTransactionDialog));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/MainWallet.js
/* eslint-disable react/jsx-curly-brace-presence */







function MainWallet({
  className
}) {
  return external_react_["createElement"](layout_CenteredView, {
    className: className
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Wallet')), external_react_["createElement"](main_MainWalletView, null), external_react_["createElement"](account_SendTransactionDialog, null));
}

const MainWallet_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var pages_MainWallet = (MainWallet_enhance(MainWallet));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/layout/CardView.js





function CardView({
  title,
  children,
  extra,
  className
}) {
  return external_react_["createElement"](layout_CenteredView, {
    className: className
  }, external_react_["createElement"](layout_TitleCard, {
    title: title
  }, children), extra);
}

const CardView_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var layout_CardView = (CardView_enhance(CardView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/utils/validatePassword.js
/* harmony default export */ var validatePassword = (password => {
  if (password.length < 8) {
    return 'Password must be at least 8 characters long.';
  }

  return undefined;
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/CreateKeystoreView.js



 // $FlowFixMe






const CreateKeystoreView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    content: {
      padding: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    content: {
      padding: theme.spacing.unit * 2
    }
  },
  content: {},
  passwordField: {
    flex: '1 1 auto',
    marginRight: theme.spacing.unit,
    maxWidth: theme.spacing.unit * 50,
    paddingTop: theme.spacing.unit * 2
  },
  bold: {
    fontWeight: theme.typography.fontWeightMedium
  },
  footer: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end',
    borderTop: `1px solid ${theme.custom.lightDivider}`
  },
  createButton: {
    marginLeft: theme.spacing.unit
  },
  error: {
    color: theme.palette.error[500]
  }
});

const WARNING_TEXT = 'This password encrypts your private key. This does not act as a seed to ' + 'generate your keys.';
const BOLD_WARNING_TEXT = 'You will need this password and your private key to unlock your wallet.';

function CreateKeystoreView({
  className,
  loading,
  password,
  error,
  onChange,
  onSubmit,
  classes
}) {
  const validation = validatePassword(password);
  return external_react_["createElement"]("div", {
    className: className
  }, external_react_["createElement"]("div", {
    className: classes.content
  }, external_react_["createElement"](Typography, {
    variant: "body1"
  }, WARNING_TEXT), external_react_["createElement"](Typography, {
    className: classes.bold,
    variant: "body1"
  }, BOLD_WARNING_TEXT), external_react_["createElement"](common_PasswordField, {
    id: "ckv-password",
    className: classes.passwordField,
    value: password,
    validation: validation,
    hasSubtext: true,
    onChange: onChange,
    onEnter: onSubmit,
    label: "Enter Password"
  })), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.footer, classes.content)
  }, error == null ? null : external_react_["createElement"](Typography, {
    className: classes.error,
    variant: "body1"
  }, error), loading ? external_react_["createElement"](CircularProgress, {
    size: 32,
    thickness: 5
  }) : null, external_react_["createElement"](Button, {
    className: classes.createButton,
    color: "primary",
    disabled: validation != null || loading,
    onClick: onSubmit
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CREATE"))));
}

const CreateKeystoreView_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withState"])('state', 'setState', () => ({
  password: '',
  loading: false,
  error: null
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onChange: ({
    setState
  }) => event => {
    const password = event.target.value;
    setState(prevState => ({ ...prevState,
      password,
      error: null
    }));
  },
  onSubmit: ({
    privateKey,
    password,
    onCreate,
    setState,
    appContext: appContextIn
  }) => () => {
    setState(prevState => ({ ...prevState,
      loading: true,
      error: null
    }));
    const appContext = appContextIn;
    appContext.monitor.captureLog(() => Object(client_["encryptNEP2"])({
      password,
      privateKey
    }), {
      name: 'neotracker_wallet_create_keystore',
      level: 'verbose',
      error: {}
    }).then(nep2 => {
      setState(prevState => ({ ...prevState,
        loading: false
      }));
      onCreate(password, nep2);
    }).catch(error => {
      setState(prevState => ({ ...prevState,
        loading: false,
        error: `Keystore creation failed: ${sanitizeError(error).clientMessage}`
      }));
    });
  }
}), withStyles(CreateKeystoreView_styles), external_recompose_["pure"]);
/* harmony default export */ var keystore_CreateKeystoreView = (CreateKeystoreView_enhance(CreateKeystoreView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/new/NewWalletSaveCommon.js





const NewWalletSaveCommon_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    content: {
      padding: theme.spacing.unit
    },
    save: {
      paddingBottom: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    content: {
      padding: theme.spacing.unit * 2
    },
    save: {
      paddingBottom: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2
    }
  },
  content: {},
  root: {
    display: 'flex',
    flexDirection: 'column'
  },
  textLine: {
    alignItems: 'center',
    display: 'flex',
    flexWrap: 'wrap'
  },
  save: {},
  bold: {
    fontWeight: theme.typography.fontWeightMedium
  },
  firstText: {
    marginRight: theme.spacing.unit / 2
  },
  footer: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end',
    borderTop: `1px solid ${theme.custom.lightDivider}`
  }
});

function NewWalletSaveCommon({
  title,
  saveElement,
  saved,
  onContinue,
  className,
  classes
}) {
  const textLines = [['Do not lose it!', 'It cannot be recovered if you lose it.'], ['Do not share it!', 'Your funds will be stolen if you use this file on a malicious phishing' + ' site.'], ['Make a backup!', 'Secure it like the millions of dollars it may one day be worth.']];
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("div", {
    className: classes.content
  }, external_react_["createElement"](Typography, {
    variant: "subheading"
  }, title), external_react_["createElement"]("div", {
    className: classes.save
  }, saveElement), textLines.map(([first, second]) => external_react_["createElement"]("div", {
    key: first,
    className: classes.textLine
  }, external_react_["createElement"](Typography, {
    variant: "body1",
    className: external_classnames_default()(classes.firstText, classes.bold)
  }, first), external_react_["createElement"](Typography, {
    variant: "body1"
  }, second)))), external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.content, classes.footer)
  }, external_react_["createElement"](Button, {
    disabled: !saved,
    color: "primary",
    onClick: onContinue
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CONTINUE"))));
}

const NewWalletSaveCommon_enhance = Object(external_recompose_["compose"])(withStyles(NewWalletSaveCommon_styles), external_recompose_["pure"]);
/* harmony default export */ var new_NewWalletSaveCommon = (NewWalletSaveCommon_enhance(NewWalletSaveCommon));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/new/NewWalletSaveKeystore.js





function NewWalletSaveKeystore({
  nep2,
  filename,
  onContinue,
  className,
  keystoreSaved,
  onSave
}) {
  return external_react_["createElement"](new_NewWalletSaveCommon, {
    className: className,
    title: "Save Your Keystore File",
    saveElement: external_react_["createElement"](keystore_SaveKeystoreFile, {
      nep2: nep2,
      filename: filename,
      onSave: onSave
    }),
    saved: keystoreSaved,
    onContinue: onContinue
  });
}

const NewWalletSaveKeystore_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"], Object(external_recompose_["withStateHandlers"])(() => ({
  keystoreSaved: false
}), {
  onSave: prevState => () => ({ ...prevState,
    keystoreSaved: true
  })
}));
/* harmony default export */ var new_NewWalletSaveKeystore = (NewWalletSaveKeystore_enhance(NewWalletSaveKeystore));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/new/NewWalletSavePrivateKey.js








const NewWalletSavePrivateKey_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    print: {
      paddingTop: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    print: {
      paddingTop: theme.spacing.unit * 2
    }
  },
  print: {},
  save: {
    alignItems: 'flex-start',
    display: 'flex',
    flexDirection: 'column'
  },
  copyField: {
    marginBottom: theme.spacing.unit,
    maxWidth: theme.spacing.unit * 70
  }
});

function NewWalletSavePrivateKey({
  privateKey,
  address,
  allowContinue,
  onContinue,
  className,
  privateKeySaved,
  onSave,
  classes
}) {
  return external_react_["createElement"](new_NewWalletSaveCommon, {
    className: className,
    title: "Save Your Private Key",
    saveElement: external_react_["createElement"]("div", {
      className: classes.save
    }, external_react_["createElement"](common_CopyField, {
      id: "nwspk-private-key",
      className: classes.copyField,
      value: Object(client_["privateKeyToWIF"])(privateKey),
      name: "Private Key",
      label: "Private Key",
      onClick: onSave
    }), external_react_["createElement"](paper_PrintPaperWalletButton, {
      className: classes.print,
      address: address,
      privateKey: privateKey,
      onPrint: onSave
    })),
    saved: privateKeySaved || allowContinue,
    onContinue: onContinue
  });
}

const NewWalletSavePrivateKey_enhance = Object(external_recompose_["compose"])(withStyles(NewWalletSavePrivateKey_styles), external_recompose_["pure"], Object(external_recompose_["withStateHandlers"])(() => ({
  privateKeySaved: false
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onSave: ({
    setState
  }) => () => setState(prevState => ({ ...prevState,
    privateKeySaved: true
  }))
}), withStyles(NewWalletSavePrivateKey_styles));
/* harmony default export */ var new_NewWalletSavePrivateKey = (NewWalletSavePrivateKey_enhance(NewWalletSavePrivateKey));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/new/NewWalletFlowBase.js









function NewWalletFlow({
  className,
  allowPrivateKeyContinue,
  onCreateKeystore,
  onContinueKeystore,
  onContinuePrivateKey,
  stage
}) {
  switch (stage.type) {
    case 'password':
      return external_react_["createElement"](keystore_CreateKeystoreView, {
        className: className,
        privateKey: stage.privateKey,
        onCreate: onCreateKeystore
      });

    case 'save-keystore':
      return external_react_["createElement"](new_NewWalletSaveKeystore, {
        nep2: stage.nep2,
        filename: stage.filename,
        onContinue: onContinueKeystore
      });

    case 'save-private-key':
      return external_react_["createElement"](new_NewWalletSavePrivateKey, {
        privateKey: stage.privateKey,
        address: stage.address,
        allowContinue: !!allowPrivateKeyContinue,
        onContinue: onContinuePrivateKey
      });

    default:
      // eslint-disable-next-line
      stage;
      return null;
  }
}

const NewWalletFlowBase_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withStateHandlers"])(({
  privateKey
}) => ({
  stage: {
    type: 'password',
    privateKey: privateKey == null ? Object(client_["createPrivateKey"])() : privateKey
  }
}), {
  setState: prevState => updater => updater(prevState)
}), external_react_router_dom_["withRouter"], Object(external_recompose_["withHandlers"])({
  onCreateKeystore: ({
    setState,
    onCreateKeystore,
    stage: {
      privateKey
    }
  }) => (password, nep2) => {
    const address = Object(client_["privateKeyToAddress"])(privateKey);
    onCreateKeystore(password);
    setState(prevState => ({ ...prevState,
      stage: {
        type: 'save-keystore',
        filename: src_wallet["api"].createKeystoreFilename({
          address
        }),
        password,
        privateKey,
        nep2,
        address
      }
    }));
  },
  onContinueKeystore: ({
    setState,
    onContinueKeystore
  }) => () => {
    setState(prevState => ({ ...prevState,
      stage: {
        type: 'save-private-key',
        privateKey: prevState.stage.privateKey,
        nep2: prevState.stage.nep2,
        address: prevState.stage.address,
        password: prevState.stage.password
      }
    }));
    onContinueKeystore();
  },
  onContinuePrivateKey: ({
    stage,
    onContinuePrivateKey
  }) => () => onContinuePrivateKey(stage)
}), external_recompose_["pure"]);
/* harmony default export */ var NewWalletFlowBase = (NewWalletFlowBase_enhance(NewWalletFlow));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/keystore/CreateKeystoreFlow.js

 // $FlowFixMe









function CreateKeystoreFlow_NewWalletFlow({
  wallet,
  className,
  onCreateKeystore,
  onContinueKeystore,
  onContinuePrivateKey
}) {
  return external_react_["createElement"](NewWalletFlowBase, {
    className: className,
    privateKey: wallet.privateKey,
    allowPrivateKeyContinue: true,
    onCreateKeystore: onCreateKeystore,
    onContinueKeystore: onContinueKeystore,
    onContinuePrivateKey: onContinuePrivateKey
  });
}

const CreateKeystoreFlow_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), addShowSnackbarError, external_react_router_dom_["withRouter"], Object(external_recompose_["withHandlers"])({
  onCreateKeystore: ({
    wallet,
    appContext: appContextIn,
    showSnackbarError
  }) => async password => {
    const appContext = appContextIn;

    try {
      await appContext.monitor.withLabels({
        [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: false
      }).captureLog(() => src_wallet["api"].convertAccount({
        appContext,
        wallet,
        password
      }), {
        name: 'neotracker_wallet_new_flow_password',
        level: 'verbose',
        error: {
          metric: NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_FAILURES_TOTAL
        },
        metric: NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_TOTAL
      });
    } catch (error) {
      showSnackbarError(error);
    }
  },
  onContinueKeystore: ({
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: false
    }).log({
      name: 'neotracker_wallet_new_flow_keystore',
      error: {
        metric: NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_FAILURES_TOTAL
      },
      metric: NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_TOTAL
    });
  },
  onContinuePrivateKey: ({
    appContext: appContextIn,
    history
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: false
    }).log({
      name: 'neotracker_wallet_new_flow_private_key',
      level: 'verbose',
      error: {
        metric: NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_FAILURES_TOTAL
      },
      metric: NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_TOTAL
    });
    history.replace(WALLET_HOME);
  }
}), external_recompose_["pure"]);
/* harmony default export */ var CreateKeystoreFlow = (CreateKeystoreFlow_enhance(CreateKeystoreFlow_NewWalletFlow));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/CreateKeystore.js
/* eslint-disable react/jsx-curly-brace-presence */









function CreateKeystore({
  wallet,
  className
}) {
  if (wallet == null || wallet.type === 'locked') {
    return external_react_["createElement"](external_react_router_dom_["Redirect"], {
      to: WALLET_HOME
    });
  }

  return external_react_["createElement"](layout_CardView, {
    className: className,
    title: "Create Keystore"
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Create Keystore')), external_react_["createElement"](CreateKeystoreFlow, {
    wallet: wallet
  }));
}

const CreateKeystore_enhance = Object(external_recompose_["compose"])(src_wallet["api"].mapCurrentLocalWallet, external_recompose_["pure"]);
/* harmony default export */ var pages_CreateKeystore = (CreateKeystore_enhance(CreateKeystore));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/new/NewWalletFlow.js

 // $FlowFixMe









function NewWalletFlow_NewWalletFlow({
  className,
  onCreateKeystore,
  onContinueKeystore,
  onContinuePrivateKey
}) {
  return external_react_["createElement"](NewWalletFlowBase, {
    className: className,
    onCreateKeystore: onCreateKeystore,
    onContinueKeystore: onContinueKeystore,
    onContinuePrivateKey: onContinuePrivateKey
  });
}

const NewWalletFlow_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), addShowSnackbarError, external_react_router_dom_["withRouter"], Object(external_recompose_["withHandlers"])({
  onCreateKeystore: ({
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: true
    }).log({
      name: 'neotracker_wallet_new_flow_password',
      level: 'verbose',
      error: {
        metric: NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_FAILURES_TOTAL
      },
      metric: NEOTRACKER_WALLET_NEW_FLOW_PASSWORD_TOTAL
    });
  },
  onContinueKeystore: ({
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: true
    }).log({
      name: 'neotracker_wallet_new_flow_keystore',
      error: {
        metric: NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_FAILURES_TOTAL
      },
      metric: NEOTRACKER_WALLET_NEW_FLOW_KEYSTORE_TOTAL
    });
  },
  onContinuePrivateKey: ({
    history,
    appContext: appContextIn,
    showSnackbarError
  }) => stage => {
    const appContext = appContextIn;
    appContext.monitor.withLabels({
      [src_labels["a" /* labels */].CREATE_KEYSTORE_NEW]: true
    }).captureLog(() => src_wallet["api"].addAccount({
      appContext,
      privateKey: stage.privateKey,
      password: stage.password,
      nep2: stage.nep2
    }), {
      name: 'neotracker_wallet_new_flow_private_key',
      level: 'verbose',
      error: {
        metric: NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_FAILURES_TOTAL
      },
      metric: NEOTRACKER_WALLET_NEW_FLOW_PRIVATE_KEY_TOTAL
    }).then(() => {
      history.replace(WALLET_HOME);
    }).catch(error => {
      showSnackbarError(error);
    });
  }
}), external_recompose_["pure"]);
/* harmony default export */ var new_NewWalletFlow = (NewWalletFlow_enhance(NewWalletFlow_NewWalletFlow));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/NewWallet.js
/* eslint-disable react/jsx-curly-brace-presence */






function NewWallet({
  className
}) {
  return external_react_["createElement"](layout_CardView, {
    className: className,
    title: "New Wallet"
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'New Wallet')), external_react_["createElement"](new_NewWalletFlow, null));
}

const NewWallet_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var pages_NewWallet = (NewWallet_enhance(NewWallet));
// EXTERNAL MODULE: external "@material-ui/core/FormLabel"
var FormLabel_ = __webpack_require__(298);
var FormLabel_default = /*#__PURE__*/__webpack_require__.n(FormLabel_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/FormLabel.js

/* harmony default export */ var FormLabel = (FormLabel_default.a);
// EXTERNAL MODULE: external "@material-ui/core/RadioGroup"
var RadioGroup_ = __webpack_require__(299);
var RadioGroup_default = /*#__PURE__*/__webpack_require__.n(RadioGroup_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/RadioGroup.js

/* harmony default export */ var RadioGroup = (RadioGroup_default.a);
// EXTERNAL MODULE: external "@material-ui/core/FormControlLabel"
var FormControlLabel_ = __webpack_require__(300);
var FormControlLabel_default = /*#__PURE__*/__webpack_require__.n(FormControlLabel_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/FormControlLabel.js

/* harmony default export */ var FormControlLabel = (FormControlLabel_default.a);
// EXTERNAL MODULE: external "@material-ui/core/Radio"
var Radio_ = __webpack_require__(301);
var Radio_default = /*#__PURE__*/__webpack_require__.n(Radio_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/base/Radio.js

/* harmony default export */ var Radio = (Radio_default.a);
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/unlockWallet.js

/* harmony default export */ var unlockWallet = (async ({
  appContext,
  wallet
}) => {
  if (wallet.type === 'deprecated') {
    return src_wallet["api"].getPrivateKey({
      keystore: wallet.wallet,
      password: wallet.password
    }).then(privateKey => src_wallet["api"].addAccount({
      appContext,
      privateKey,
      password: wallet.password
    }));
  }

  if (wallet.type === 'nep2Array') {
    return Promise.all(wallet.wallet.map(account => src_wallet["api"].addNEP2Account({
      appContext,
      nep2: account.nep2,
      address: account.address
    })));
  }

  return src_wallet["api"].addNEP2Account({
    appContext,
    nep2: wallet.wallet,
    password: wallet.password
  });
});
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletPassword.js
// $FlowFixMe










const OpenWalletPassword_styles = theme => ({
  root: {
    flex: '1 1 auto',
    maxWidth: theme.spacing.unit * 70
  },
  passwordArea: {
    display: 'flex',
    flexDirection: 'column'
  },
  passwordField: {
    flex: '1 1 auto'
  },
  unlockArea: {
    alignItems: 'center',
    display: 'flex',
    justifyContent: 'flex-end'
  },
  unlockButton: {
    marginLeft: theme.spacing.unit
  }
});

function OpenWalletPassword({
  className,
  wallet,
  loading,
  password,
  validation,
  onChange,
  onSubmit,
  keyElement,
  selectAccountElement,
  hiddenUsernameElement,
  classes
}) {
  let passwordElement;

  if (wallet != null) {
    passwordElement = external_react_["createElement"]("div", {
      className: classes.passwordArea
    }, external_react_["createElement"](common_PasswordField, {
      id: "owfp-password",
      autoComplete: "current-password",
      className: classes.passwordField,
      value: password,
      validation: validation,
      onChange: onChange,
      onEnter: onSubmit,
      label: "Enter password.",
      hasSubtext: true
    }), external_react_["createElement"]("div", {
      className: classes.unlockArea
    }, loading ? external_react_["createElement"](CircularProgress, {
      size: 32
    }) : null, external_react_["createElement"](Button, {
      className: classes.unlockButton,
      color: "primary",
      disabled: validation != null || loading,
      onClick: onSubmit
    }, external_react_["createElement"](Typography, {
      color: "inherit",
      variant: "body1"
    }, "UNLOCK"))));
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, keyElement, hiddenUsernameElement, selectAccountElement, passwordElement);
}

const OpenWalletPassword_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withStateHandlers"])(() => ({
  password: '',
  validation: undefined,
  loading: false
}), {
  setState: prevState => updater => updater(prevState)
}), external_react_router_dom_["withRouter"], Object(external_recompose_["withHandlers"])({
  onChange: ({
    setState
  }) => event => {
    const password = event.target.value;
    setState(prevState => ({ ...prevState,
      password,
      validation: null
    }));
  },
  onSubmit: ({
    setState,
    wallet,
    password,
    history,
    accessType,
    appContext: appContextIn,
    onOpen,
    onOpenError
  }) => () => {
    const appContext = appContextIn;
    setState(prevState => ({ ...prevState,
      loading: true
    }));
    unlockWallet({
      appContext,
      wallet: { ...wallet,
        password
      }
    }).then(() => {
      history.replace(WALLET_HOME);
      onOpen();
    }).catch(error => {
      setState(prevState => ({ ...prevState,
        loading: false,
        validation: `Open ${accessType} failed: ` + `${sanitizeError(error).clientMessage}`
      }));
      onOpenError(error);
    });
  }
}), withStyles(OpenWalletPassword_styles), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletPassword = (OpenWalletPassword_enhance(OpenWalletPassword));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletFilePassword.js







const OpenWalletFilePassword_styles = theme => ({
  root: {
    flex: '1 1 auto',
    maxWidth: theme.spacing.unit * 70
  },
  buttonText: {
    color: theme.custom.colors.common.white
  },
  error: {
    color: theme.palette.error[500],
    paddingTop: theme.spacing.unit
  },
  hidden: {
    display: 'none'
  },
  hiddenUsername: {
    height: '0px',
    width: '0px'
  },
  selector: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function OpenWalletFilePassword({
  className,
  wallet,
  multipleWallets,
  error,
  setUploadFileRef,
  onClickUploadFile,
  onUploadFile,
  onOpen,
  onOpenError,
  onSelect,
  classes
}) {
  let errorElement;

  if (error != null) {
    errorElement = external_react_["createElement"](Typography, {
      className: classes.error,
      variant: "body1"
    }, error);
  }

  let selectAccountElement;

  if (multipleWallets != null) {
    selectAccountElement = external_react_["createElement"](selector_Selector, {
      className: classes.selector,
      id: "select-account",
      selectText: "Select Wallet",
      label: "Select Wallet",
      options: multipleWallets.map(account => ({
        id: account.nep2,
        text: account.address
      })),
      selectedID: wallet == null ? null : wallet.wallet,
      onSelect: onSelect
    });
  }

  const fileUploadElement = external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"]("input", {
    className: classes.hidden,
    ref: setUploadFileRef,
    type: "file",
    onChange: onUploadFile
  }), external_react_["createElement"](Button, {
    variant: "raised",
    color: "primary",
    onClick: onClickUploadFile
  }, external_react_["createElement"](Typography, {
    className: classes.buttonText,
    variant: "body1"
  }, "SELECT WALLET FILE")), errorElement);
  const hiddenUsername = external_react_["createElement"]("div", {
    className: classes.hiddenUsername
  }, external_react_["createElement"](base_TextField, {
    id: "username",
    type: "text",
    value: wallet == null ? '' : wallet.wallet,
    autoComplete: "username",
    noTabIndex: true
  }));
  return external_react_["createElement"](open_OpenWalletPassword, {
    className: external_classnames_default()(className, classes.root),
    accessType: "Keystore",
    keyElement: fileUploadElement,
    selectAccountElement: selectAccountElement,
    hiddenUsernameElement: hiddenUsername,
    onOpen: onOpen,
    onOpenError: onOpenError,
    wallet: wallet
  });
}

const OpenWalletFilePassword_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withStateHandlers"])(() => ({
  uploadFileRef: null,
  error: undefined,
  wallet: undefined,
  multipleWallets: null
}), {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  setUploadFileRef: ({
    setState
  }) => uploadFileRef => setState(prevState => ({ ...prevState,
    uploadFileRef
  })),
  onClickUploadFile: ({
    uploadFileRef
  }) => () => {
    if (uploadFileRef != null) {
      uploadFileRef.click();
    }
  },
  onUploadFile: ({
    setState,
    read,
    fileTypeName,
    extractWallet,
    onUploadFileError
  }) => event => {
    if (event.target.files == null || event.target.files.length === 0) {
      return;
    }

    const onError = error => {
      setState(prevState => ({ ...prevState,
        error: `${fileTypeName} file upload failed. Invalid wallet file.`
      }));
      onUploadFileError(error);
    };

    const reader = new FileReader();

    reader.onloadend = () => {
      if (reader.error != null) {
        onError(reader.error);
      } else {
        try {
          const wallet = extractWallet(reader.result);

          if (wallet.type === 'nep2Array') {
            setState(prevState => ({ ...prevState,
              multipleWallets: wallet.wallet,
              wallet: null
            }));
            return;
          }

          setState(prevState => ({ ...prevState,
            wallet,
            error: null
          }));
        } catch (error) {
          onError(error);
        }
      }
    };

    try {
      read(reader, event.target.files[0]);
    } catch (error) {
      onError(error);
    }
  },
  onSelect: ({
    setState
  }) => option => {
    setState(prevState => ({ ...prevState,
      wallet: option.id == null ? null : {
        type: 'nep2',
        wallet: option.id,
        address: option.text
      }
    }));
  }
}), withStyles(OpenWalletFilePassword_styles), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletFilePassword = (OpenWalletFilePassword_enhance(OpenWalletFilePassword));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletKeystore.js






function OpenWalletKeystore({
  className,
  read,
  onUploadFileError,
  extractWallet,
  onOpen,
  onOpenError
}) {
  return external_react_["createElement"](open_OpenWalletFilePassword, {
    className: className,
    fileTypeName: "Keystore",
    read: read,
    onUploadFileError: onUploadFileError,
    extractWallet: extractWallet,
    onOpen: onOpen,
    onOpenError: onOpenError
  });
}

const extractJSONStandardWallet = fileContents => {
  const jsonKeystore = JSON.parse(fileContents);

  if (jsonKeystore.accounts == null) {
    throw new Error('Invalid Keystore File.');
  }

  if (jsonKeystore.accounts.length === 1) {
    return {
      origin: 'json-standard',
      type: 'nep2',
      wallet: jsonKeystore.accounts[0].key
    };
  }

  return {
    origin: 'json-standard',
    type: 'nep2Array',
    wallet: jsonKeystore.accounts.map(account => ({
      address: account.address,
      nep2: account.key
    }))
  };
};

const extractNEXWallet = fileContents => {
  const nexKeystore = fileContents.split('\n');
  const nexAddressArray = nexKeystore.filter(element => element.includes('Address')).map(addressLine => addressLine.split(': ')[1]);
  const nexKeyArray = nexKeystore.filter(element => element.includes('Encrypted Key')).map(keyLine => keyLine.split(': ')[1]);

  const nexWalletArray = external_lodash_default.a.zip(nexAddressArray, nexKeyArray).map(account => ({
    address: account[0],
    nep2: account[1]
  }));

  if (nexWalletArray.length === 0) {
    throw new Error('Invalid Keystore File.');
  }

  if (nexWalletArray.length === 1) {
    return {
      origin: 'nex',
      type: 'nep2',
      wallet: nexWalletArray[0].nep2
    };
  }

  return {
    origin: 'nex',
    type: 'nep2Array',
    wallet: nexWalletArray
  };
};

const OpenWalletKeystore_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withHandlers"])({
  read: () => (reader, file) => reader.readAsText(file),
  onUploadFileError: ({
    appContext: appContextIn
  }) => error => {
    const appContext = appContextIn;
    appContext.monitor.logError({
      name: 'neotracker_wallet_open_keystore_upload_file_error',
      error
    });
  },
  extractWallet: () => readerResultIn => {
    const readerResult = readerResultIn instanceof Buffer ? readerResultIn.toString('utf8') : readerResultIn;

    if (src_wallet["api"].isNEP2(readerResult)) {
      return {
        origin: 'neotracker',
        type: 'nep2',
        wallet: readerResult
      };
    }

    try {
      return extractJSONStandardWallet(readerResult);
    } catch (error) {// do nothing
    }

    try {
      return extractNEXWallet(readerResult);
    } catch (error) {// do nothing
    }

    return {
      origin: 'neotracker',
      type: 'deprecated',
      wallet: src_wallet["api"].extractKeystore({
        text: readerResult
      })
    };
  },
  onOpen: ({
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.log({
      name: 'neotracker_wallet_open_keystore',
      level: 'verbose',
      error: {}
    });
  },
  onOpenError: ({
    appContext: appContextIn
  }) => error => {
    const appContext = appContextIn;
    appContext.monitor.log({
      name: 'neotracker_wallet_open_keystore',
      level: 'verbose',
      error: {
        error
      }
    });
  }
}), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletKeystore = (OpenWalletKeystore_enhance(OpenWalletKeystore));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletEncryptedKey.js




 // eslint-disable-next-line





const OpenWalletEncryptedKey_styles = theme => ({
  root: {
    flex: '1 1 auto',
    maxWidth: theme.spacing.unit * 70
  },
  submitArea: {
    display: 'flex',
    justifyContent: 'flex-end'
  },
  passwordArea: {
    display: 'flex',
    flexDirection: 'column'
  }
});

function OpenWalletEncryptedKey({
  nep2Key,
  wallet,
  error,
  onChangeNEP2,
  onOpen,
  onSubmit,
  onOpenError,
  privateKey,
  classes,
  className
}) {
  const encryptedKeyElement = external_react_["createElement"]("div", {
    className: classes.passwordArea
  }, external_react_["createElement"](base_TextField, {
    id: "owek-encrypted-key",
    autoComplete: "username",
    subtext: nep2Key === '' ? null : error,
    value: nep2Key,
    hasSubtext: true,
    onChange: onChangeNEP2,
    onEnter: onSubmit,
    error: error != null,
    label: "Paste or type encrypted key."
  }), external_react_["createElement"]("div", {
    className: classes.submitArea
  }, external_react_["createElement"](Button, {
    color: "primary",
    disabled: error != null,
    onClick: onSubmit
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "CONTINUE"))));

  if (privateKey != null) {
    return external_react_["createElement"](open_OpenWalletPrivateKey, {
      className: className,
      initialPrivateKey: privateKey
    });
  }

  return external_react_["createElement"](open_OpenWalletPassword, {
    className: external_classnames_default()(className, classes.root),
    accessType: "Encrypted Key",
    keyElement: encryptedKeyElement,
    onOpen: onOpen,
    onOpenError: onOpenError,
    wallet: wallet
  });
}

const OpenWalletEncryptedKey_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withStateHandlers"])(({
  initialNEP2Key
}) => {
  if (initialNEP2Key == null) {
    return {
      error: undefined,
      nep2Key: '',
      privateKey: undefined,
      wallet: undefined
    };
  }

  return {
    error: undefined,
    nep2Key: initialNEP2Key,
    privateKey: undefined,
    wallet: {
      type: 'nep2',
      wallet: initialNEP2Key
    }
  };
}, {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onChangeNEP2: ({
    setState
  }) => event => {
    const nep2Key = event.target.value;
    let privateKeyCheck;

    try {
      privateKeyCheck = Object(client_["wifToPrivateKey"])(nep2Key);
    } catch (error) {// do nothing;
    }

    if (privateKeyCheck == null) {
      try {
        privateKeyCheck = Object(client_["privateKeyToAddress"])(nep2Key);
      } catch (error) {// do nothing
      }
    }

    if (privateKeyCheck != null) {
      setState(prevState => ({ ...prevState,
        privateKey: nep2Key,
        error: undefined
      }));
    } else {
      setState(prevState => ({ ...prevState,
        nep2Key,
        wallet: undefined,
        error: undefined
      }));
    }
  },
  onSubmit: ({
    setState,
    nep2Key
  }) => () => {
    if (src_wallet["api"].isNEP2(nep2Key)) {
      setState(prevState => ({ ...prevState,
        nep2Key,
        wallet: {
          type: 'nep2',
          wallet: nep2Key
        },
        error: undefined
      }));
    } else {
      setState(prevState => ({ ...prevState,
        nep2Key,
        wallet: undefined,
        error: 'Invalid Encrypted Key. A valid NEP-2 Encrypted Key looks like ' + '6PYTp4fNNhn2oV6HZhjzfg6YoeC8r1wWsCPikEJXxcTmsitDm92mWpdqd6'
      }));
    }
  },
  onOpen: ({
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;
    appContext.monitor.log({
      name: 'neotracker_wallet_open_encrypted_key',
      level: 'verbose',
      error: {}
    });
  },
  onOpenError: ({
    appContext: appContextIn
  }) => error => {
    const appContext = appContextIn;
    appContext.monitor.log({
      name: 'neotracker_wallet_open_encrypted_key',
      level: 'verbose',
      error: {
        error
      }
    });
  }
}), withStyles(OpenWalletEncryptedKey_styles), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletEncryptedKey = (OpenWalletEncryptedKey_enhance(OpenWalletEncryptedKey));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletPrivateKey.js




 // $FlowFixMe


// eslint-disable-next-line







const OpenWalletPrivateKey_styles = theme => ({
  root: {
    flex: '1 1 auto',
    maxWidth: theme.spacing.unit * 70
  },
  submitArea: {
    display: 'flex',
    justifyContent: 'flex-end'
  },
  link: {
    textDecoration: 'none'
  },
  buttonText: {
    color: theme.custom.colors.common.white
  },
  generateKeystore: {
    marginRight: theme.spacing.unit
  },
  unlockedArea: {
    marginTop: theme.spacing.unit
  }
});

function OpenWalletPrivateKey({
  className,
  privateKey,
  unlocked,
  error,
  onChange,
  onSubmit,
  nep2Key,
  classes
}) {
  let setup;

  if (unlocked) {
    setup = external_react_["createElement"]("div", {
      className: external_classnames_default()(classes.submitArea, classes.unlockedArea)
    }, external_react_["createElement"](keystore_GenerateKeystore, {
      className: classes.generateKeystore,
      replace: true
    }), external_react_["createElement"](external_react_router_dom_["Link"], {
      className: classes.link,
      replace: true,
      to: WALLET_HOME
    }, external_react_["createElement"](Button, {
      variant: "raised",
      color: "primary"
    }, external_react_["createElement"](Typography, {
      className: classes.buttonText,
      variant: "body1"
    }, "GO TO WALLET"))));
  }

  if (nep2Key != null) {
    return external_react_["createElement"](open_OpenWalletEncryptedKey, {
      className: className,
      initialNEP2Key: nep2Key
    });
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(classes.root, className)
  }, external_react_["createElement"](common_PasswordField, {
    id: "owpk-private-key",
    value: privateKey,
    validation: error,
    hasSubtext: true,
    onChange: onChange,
    onEnter: onSubmit,
    readOnly: unlocked,
    label: "Paste or type private key."
  }), external_react_["createElement"]("div", {
    className: classes.submitArea
  }, external_react_["createElement"](Button, {
    color: "primary",
    disabled: error != null && !unlocked,
    onClick: onSubmit
  }, external_react_["createElement"](Typography, {
    color: "inherit",
    variant: "body1"
  }, "UNLOCK"))), setup);
}

const OpenWalletPrivateKey_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["getContext"])({
  appContext: () => null
}), Object(external_recompose_["withStateHandlers"])(({
  initialPrivateKey
}) => {
  if (initialPrivateKey == null) {
    return {
      unlocked: false,
      privateKey: '',
      nep2Key: undefined,
      error: undefined
    };
  }

  return {
    unlocked: false,
    privateKey: initialPrivateKey,
    nep2Key: undefined,
    error: undefined
  };
}, {
  setState: prevState => updater => updater(prevState)
}), Object(external_recompose_["withHandlers"])({
  onChange: ({
    setState
  }) => event => {
    const privateKey = event.target.value;
    setState(prevState => ({ ...prevState,
      privateKey,
      error: undefined
    }));
  },
  onSubmit: ({
    setState,
    privateKey: privateKeyIn,
    appContext: appContextIn
  }) => () => {
    const appContext = appContextIn;

    const logError = error => {
      appContext.monitor.logError({
        name: 'neotracker_wallet_open_private_key_error',
        error
      });
    };

    const onError = errorMessage => {
      setState(prevState => ({ ...prevState,
        error: `${errorMessage} A valid WIF Private Key looks like ` + `L4afVEGodWqHnuMfAaw2HegcLgnQqG7D38rWC1UET7cicoNeJoZZ.`
      }));
    };

    const privateKeyTrimmed = privateKeyIn.trim();

    if (src_wallet["api"].isNEP2(privateKeyTrimmed)) {
      setState(prevState => ({ ...prevState,
        nep2Key: privateKeyTrimmed,
        error: undefined
      }));
      return;
    }

    let privateKey;
    let errorMessage;

    try {
      privateKey = Object(client_["wifToPrivateKey"])(privateKeyTrimmed);
    } catch (error) {
      logError(error);
      errorMessage = sanitizeError(error).clientMessage;
    }

    if (privateKey == null) {
      try {
        Object(client_["privateKeyToAddress"])(privateKeyTrimmed);
        privateKey = privateKeyTrimmed;
      } catch (error) {
        logError(error);
      }
    }

    if (privateKey == null) {
      if (errorMessage == null) {
        throw new Error('For Flow');
      }

      onError(errorMessage);
      return;
    }

    src_wallet["api"].addPrivateKeyAccount({
      appContext,
      privateKey
    }).then(() => {
      setState(prevState => ({ ...prevState,
        unlocked: true
      }));
    }).catch(error => {
      logError(error);
      onError(sanitizeError(error).clientMessage);
    });
    appContext.monitor.log({
      name: 'neotracker_wallet_open_private_key',
      level: 'verbose'
    });
  }
}), withStyles(OpenWalletPrivateKey_styles), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletPrivateKey = (OpenWalletPrivateKey_enhance(OpenWalletPrivateKey));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/open/OpenWalletView.js








const OpenWalletView_styles = theme => ({
  [theme.breakpoints.down('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit,
      paddingTop: theme.spacing.unit
    },
    margin: {
      marginRight: theme.spacing.unit
    }
  },
  [theme.breakpoints.up('sm')]: {
    root: {
      paddingLeft: theme.spacing.unit * 2,
      paddingTop: theme.spacing.unit * 2,
      paddingBottom: theme.spacing.unit
    },
    margin: {
      marginRight: theme.spacing.unit * 2
    }
  },
  root: {
    display: 'flex',
    flexWrap: 'wrap'
  },
  margin: {
    marginBottom: theme.spacing.unit
  }
});

function OpenWalletView({
  className,
  option,
  onSelectOption,
  classes
}) {
  let open;

  switch (option) {
    case 'keystore':
      open = external_react_["createElement"](open_OpenWalletKeystore, {
        className: classes.margin
      });
      break;

    case 'privatekey':
      open = external_react_["createElement"](open_OpenWalletPrivateKey, {
        className: classes.margin
      });
      break;

    case 'encryptedkey':
      open = external_react_["createElement"](open_OpenWalletEncryptedKey, {
        className: classes.margin
      });
      break;

    default:
      open = null;
  }

  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](FormControl, {
    className: classes.margin,
    required: true
  }, external_react_["createElement"](FormLabel, null, "How would you like to access your wallet?"), external_react_["createElement"](RadioGroup, {
    "aria-label": "Open Wallet",
    name: "open-wallet",
    value: option,
    onChange: onSelectOption
  }, external_react_["createElement"](FormControlLabel, {
    value: "keystore",
    control: external_react_["createElement"](Radio, null),
    label: "Keystore File"
  }), external_react_["createElement"](FormControlLabel, {
    value: "privatekey",
    control: external_react_["createElement"](Radio, null),
    label: "Private Key"
  }), external_react_["createElement"](FormControlLabel, {
    value: "encryptedkey",
    control: external_react_["createElement"](Radio, null),
    label: "Encrypted Key"
  }))), open);
}

const OpenWalletView_enhance = Object(external_recompose_["compose"])(Object(external_recompose_["withState"])('state', 'setState', () => ({
  option: null
})), Object(external_recompose_["withProps"])(({
  state
}) => state), Object(external_recompose_["withHandlers"])({
  onSelectOption: ({
    setState
  }) => (event, option) => setState(prevState => ({ ...prevState,
    option
  }))
}), withStyles(OpenWalletView_styles), external_recompose_["pure"]);
/* harmony default export */ var open_OpenWalletView = (OpenWalletView_enhance(OpenWalletView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/OpenWallet.js
/* eslint-disable react/jsx-curly-brace-presence */






function OpenWallet({
  className
}) {
  return external_react_["createElement"](layout_CardView, {
    className: className,
    title: "Open Wallet"
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Open Wallet')), external_react_["createElement"](open_OpenWalletView, null));
}

const OpenWallet_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var pages_OpenWallet = (OpenWallet_enhance(OpenWallet));
// EXTERNAL MODULE: external "markdown-it"
var external_markdown_it_ = __webpack_require__(302);
var external_markdown_it_default = /*#__PURE__*/__webpack_require__.n(external_markdown_it_);

// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/lib/markdown/Markdown.js






const Markdown_styles = theme => {
  const headerMargins = {
    marginTop: 16,
    marginBottom: 16
  };
  return {
    root: { ...theme.typography.body1,
      overflowWrap: 'break-word',
      '& h1': { ...headerMargins,
        ...theme.typography.headline
      },
      '& h2': { ...headerMargins,
        ...theme.typography.title
      },
      '& h3': { ...headerMargins,
        ...theme.typography.subheading
      },
      '& h4': { ...headerMargins,
        ...theme.typography.body2
      },
      '& h5': { ...headerMargins,
        ...theme.typography.body1
      },
      '& h6': { ...headerMargins,
        ...theme.typography.caption
      },
      '& p': {
        marginBottom: 8,
        marginTop: 8
      },
      '& a': {
        color: theme.palette.secondary[500]
      },
      '& hr': {
        border: 'none',
        borderBottom: `1px solid ${theme.custom.lightDivider}`,
        marginBottom: 8,
        marginTop: 8
      },
      '& strong': {
        fontWeight: theme.typography.fontWeightMedium
      },
      '& blockquote': {
        borderLeft: `5px solid ${theme.palette.text.divider}`,
        marginBottom: 16,
        marginLeft: 0,
        marginRight: 24,
        marginTop: 16,
        paddingLeft: 16
      },
      '& ul': {
        marginBottom: 8,
        marginTop: 8,
        paddingLeft: 24
      },
      '& ol': {
        marginBottom: 8,
        marginTop: 8,
        paddingLeft: 24
      },
      '& pre': {
        marginBottom: 16,
        marginTop: 16,
        whiteSpace: 'pre-wrap'
      }
    }
  };
};

const mdOptions = {
  html: false,
  xhtmlOut: false,
  breaks: false,
  langPrefix: 'language-',
  linkify: true,
  typographer: true,
  quotes: `""''`
};
const defaultMD = external_markdown_it_default()().set(mdOptions);

function Markdown({
  source,
  md: externalMD,
  className,
  classes,
  'data-test': dataTest
}) {
  const md = externalMD || defaultMD;
  return external_react_["createElement"]("div", {
    "data-test": dataTest,
    className: external_classnames_default()(classes.root, className) // eslint-disable-next-line react/no-danger
    ,
    dangerouslySetInnerHTML: {
      __html: md.render(source)
    }
  });
}

const Markdown_enhance = Object(external_recompose_["compose"])(withStyles(Markdown_styles), external_recompose_["pure"]);
/* harmony default export */ var markdown_Markdown = (Markdown_enhance(Markdown));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/components/wallet/faq/WalletFAQView.js






const WalletFAQView_styles = theme => ({
  root: {
    padding: theme.spacing.unit * 2,
    paddingTop: 0
  }
});

const FAQ = `
## What is CRON Tracker Wallet?
CRON Tracker Wallet is a light wallet that lets CRON holders interact with
the CRON blockchain. You do not create an account or give us your funds to hold
onto. No data leaves your computer or your browser. We make it easy for you to
create, save, and access your information and interact with the blockchain.Forked 
from Neo Tracker.


## How does it work?
Light wallet means that CRON Tracker Wallet does not require syncing locally with
the blockchain and instead, uses a remote server, namely CRON Tracker Blockchain
Explorer, to fetch data like the transaction history or the amount of CRON
available to claim. Note that **none** of your personal data is ever sent to
CRON Tracker. Specifically, your Private Keys and encrypted Keystore files never
leave your local computer.


## How secure is it?
CRON Tracker Wallet **never** sends your Private Keys or encryped Keystore files
across the network. They are stored locally on your computer. Private Keys are
only ever stored in the current session's memory and are cleared between
sessions. Encrypted Keystore files are stored in local storage and persist across
sessions. If an attacker were to gain access to your browser's local storage, they
would additionally need the password to unlock your encrypted Keystore file in order
to gain access to your Private Keys and thus your balance.


## How can I trust CRON Tracker Wallet?
CRON Tracker Wallet source code is available on (NEO TRACKER FORK)[Github](https://github.com/cronfoundation)
for you to verify. We serve the wallet over SSL (https) which eliminates the
possibility of tampering with the Javascript code between our servers and your
browser. Still not sure? Download the latest standalone release on our
[Github releases](https://github.com/cronfoundation) page
and open it using your browser. Alternatively, you can build directly from the source.


## What if I forget my encrypted Keystore file's password or lose my Private Key?
CRON Tracker Wallet does not hold your keys for you. We cannot access accounts,
recover keys, reset passwords, nor reverse transactions. Protect your keys and
always check that you are on the correct URL. You are responsible for your security.


## We are not responsible for any loss.
CRON, neotracker.io and some of the underlying Javascript libraries we use are
under active development. While we have thoroughly tested, there is always the
possibility something unexpected happens that causes your funds to be lost.
Please do not invest more than you are willing to lose, and please be careful.
`;

function WalletFAQView({
  className,
  classes
}) {
  return external_react_["createElement"]("div", {
    className: external_classnames_default()(className, classes.root)
  }, external_react_["createElement"](markdown_Markdown, {
    source: FAQ
  }));
}

const WalletFAQView_enhance = Object(external_recompose_["compose"])(withStyles(WalletFAQView_styles), external_recompose_["pure"]);
/* harmony default export */ var faq_WalletFAQView = (WalletFAQView_enhance(WalletFAQView));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/pages/WalletFAQ.js
/* eslint-disable react/jsx-curly-brace-presence */






function WalletFAQ({
  className
}) {
  return external_react_["createElement"](layout_CardView, {
    className: className,
    title: "Wallet FAQ"
  }, external_react_["createElement"](external_react_helmet_default.a, null, external_react_["createElement"]("title", null, 'Wallet FAQ')), external_react_["createElement"](faq_WalletFAQView, null));
}

const WalletFAQ_enhance = Object(external_recompose_["compose"])(external_recompose_["pure"]);
/* harmony default export */ var pages_WalletFAQ = (WalletFAQ_enhance(WalletFAQ));
// CONCATENATED MODULE: ./packages/neotracker-shared-web/src/App.js


 // $FlowFixMe



























const renderComponent = Component => props => external_react_["createElement"](Component, props);

const routeConfigs = [{
  exact: true,
  path: HOME,
  render: renderComponent(pages_Home),
  component: pages_Home
}, {
  exact: true,
  path: makeAddressSearch(),
  render: renderComponent(pages_AddressSearch),
  component: pages_AddressSearch
}, {
  exact: true,
  path: makeAddress(),
  render: renderComponent(pages_Address),
  component: pages_Address
}, {
  exact: true,
  path: makeAssetSearch(),
  render: renderComponent(pages_AssetSearch),
  component: pages_AssetSearch
}, {
  exact: true,
  path: makeAsset(),
  render: renderComponent(pages_Asset),
  component: pages_Asset
}, {
  exact: true,
  path: makeBlockSearch(),
  render: renderComponent(pages_BlockSearch),
  component: pages_BlockSearch
}, {
  exact: true,
  path: makeBlockIndex(),
  render: renderComponent(pages_Block),
  component: pages_Block
}, {
  exact: true,
  path: makeBlockHash(),
  render: renderComponent(pages_Block),
  component: pages_Block
}, {
  exact: true,
  path: makeContractSearch(),
  render: renderComponent(pages_ContractSearch),
  component: pages_ContractSearch
}, {
  exact: true,
  path: makeContract(),
  render: renderComponent(pages_Contract),
  component: pages_Contract
}, {
  exact: true,
  path: makeSearch(),
  render: renderComponent(pages_Search),
  component: pages_Search
}, {
  exact: true,
  path: makeTransactionSearch(),
  render: renderComponent(pages_TransactionSearch),
  component: pages_TransactionSearch
}, {
  exact: true,
  path: makeTransaction(),
  render: renderComponent(pages_Transaction),
  component: pages_Transaction
}, {
  exact: true,
  path: WALLET_HOME,
  render: renderComponent(pages_MainWallet),
  component: pages_MainWallet
}, {
  exact: true,
  path: WALLET_CREATE_KEYSTORE,
  render: renderComponent(pages_CreateKeystore),
  component: pages_CreateKeystore
}, {
  exact: true,
  path: WALLET_NEW_WALLET,
  render: renderComponent(pages_NewWallet),
  component: pages_NewWallet
}, {
  exact: true,
  path: WALLET_OPEN_WALLET,
  render: renderComponent(pages_OpenWallet),
  component: pages_OpenWallet
}, {
  exact: true,
  path: WALLET_FAQ,
  render: renderComponent(pages_WalletFAQ),
  component: pages_WalletFAQ
}, {
  exact: false,
  path: undefined,
  render: renderComponent(error_Error404),
  component: error_Error404
}];

function App_App({
  reactError,
  appOptions
}) {
  let content;

  if (appOptions.maintenance) {
    content = external_react_["createElement"](Maintenance, null);
  } else if (reactError) {
    content = external_react_["createElement"](pages_GenericErrorPage, null);
  } else {
    content = external_react_["createElement"](external_react_router_dom_["Switch"], null, routeConfigs.map(config => external_react_["createElement"](external_react_router_dom_["Route"], {
      key: config.path == null ? 'nopath' : config.path,
      exact: config.exact,
      path: config.path,
      render: config.render
    })));
  }

  return external_react_["createElement"](AppShell, null, content);
}

App_App.asyncBootstrap = async (matchConfig, relayEnvironment) => {
  const {
    component
  } = matchConfig.route;

  if (component != null && component.asyncBootstrap != null) {
    // $FlowFixMe
    await component.asyncBootstrap(matchConfig.match, relayEnvironment);
  }
};

const App_enhance = Object(external_recompose_["hoistStatics"])(Object(external_recompose_["compose"])(external_react_router_["withRouter"], Object(external_recompose_["withStateHandlers"])(() => ({
  reactError: false
}), {
  onError: prevState => () => ({ ...prevState,
    reactError: true
  })
}), Object(external_recompose_["lifecycle"])({
  componentDidCatch(error, info) {
    this.props.appContext.monitor.withData({
      [src_labels["a" /* labels */].COMPONENT_STACK]: info.componentStack
    }).logError({
      name: 'client_uncaught_react_error',
      error
    });
    this.props.onError();
  }

}), Object(external_recompose_["withContext"])({
  relayEnvironment: () => null,
  appContext: () => null
}, ({
  relayEnvironment,
  appContext
}) => ({
  relayEnvironment,
  appContext
})), mapAppOptions, external_recompose_["pure"]));
/* harmony default export */ var src_App = (App_enhance(App_App));
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/reactApplication/makeServerHTML.tsx





function makeServerHTML_stylesheetTag(stylesheetFilePath) {
  return external_react_["createElement"]("link", {
    href: stylesheetFilePath,
    media: "screen, projection",
    rel: "stylesheet",
    type: "text/css"
  });
}

const makeServerHTML_makeServerHTML = ({
  css,
  js,
  helmet,
  nonce,
  reactAppString,
  relay,
  records,
  styles,
  userAgent,
  appOptions,
  network,
  appVersion,
  addHeadElements,
  addBodyElements,
  adsenseID,
  bsaEnabled
}) => {
  // Creates an inline script definition that is protected by the nonce.
  const inlineScript = body => external_react_["createElement"]("script", {
    nonce: nonce,
    type: "text/javascript",
    dangerouslySetInnerHTML: {
      __html: body
    }
  });

  const scriptTag = (src, scriptProps = {}) => external_react_["createElement"]("script", Object.assign({}, scriptProps, {
    nonce: nonce,
    type: "text/javascript",
    src: src
  }));

  const headerElements = [...css.map(makeServerHTML_stylesheetTag), external_react_["createElement"]("link", {
    key: "font",
    rel: "stylesheet",
    type: "text/css",
    href: "/public/styles.css"
  }), external_react_["createElement"]("link", {
    key: "icons",
    href: "https://fonts.googleapis.com/icon?family=Material+Icons",
    rel: "stylesheet"
  }), inlineScript(`
      (function(d) {
        var o = d.createElement;
        d.createElement = function() {
          var e = o.apply(d, arguments);
          if (e.tagName === 'SCRIPT') {
            e.setAttribute('nonce', '${nonce}');
          }
          return e;
        }
      })(document);
    `), ...addHeadElements(nonce), // tslint:disable no-any
  ...helmet.title.toComponent(), ...helmet.base.toComponent(), ...helmet.meta.toComponent(), ...helmet.link.toComponent(), ...helmet.style.toComponent(), // tslint:enable no-any
  adsenseID === undefined ? undefined : scriptTag('//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js', {
    async: true
  }), adsenseID === undefined ? undefined : inlineScript(`
      (adsbygoogle = window.adsbygoogle || []).push({
        google_ad_client: "${adsenseID}",
        enable_page_level_ads: true
      });
    `)].filter(utils["a" /* utils */].notNull);

  const constructScript = () => {
    let script = '';

    if (relay !== undefined) {
      script += `window.__RELAY_DATA__=${external_serialize_javascript_default()(relay())};`;
    }

    if (records !== undefined) {
      script += `window.__RELAY_RECORDS__=${external_serialize_javascript_default()(records())};`;
    }

    script += `window.__OPTIONS__=${external_serialize_javascript_default()(appOptions)};`;
    script += `window.__USER_AGENT__=${external_serialize_javascript_default()(userAgent)};`;
    script += `window.__CSS__=${external_serialize_javascript_default()(css)};`;
    script += `window.__NONCE__=${external_serialize_javascript_default()(nonce)};`;
    script += `window.__NETWORK__=${external_serialize_javascript_default()(network)};`;
    script += `window.__APP_VERSION__=${external_serialize_javascript_default()(appVersion)};`;
    script += 'window.__SYMBOL_POLYFILL = !window.Symbol || !!window.Symbol.toStringTag;';
    return inlineScript(script);
  };

  let bsaElement;

  if (bsaEnabled) {
    bsaElement = inlineScript(`
    (function(){
      var bsa = document.createElement('script');
        bsa.type = 'text/javascript';
        bsa.async = true;
        bsa.src = '//s3.buysellads.com/ac/bsa.js';
      (document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa);
    })();
    `);
  } // tslint:disable no-unnecessary-callback-wrapper


  return Object(server_["renderToStaticMarkup"])(external_react_["createElement"]("html", {
    lang: "en"
  }, external_react_["createElement"]("head", null, headerElements), external_react_["createElement"]("body", null, bsaElement, external_react_["createElement"]("div", {
    id: "app",
    dangerouslySetInnerHTML: {
      __html: reactAppString
    }
  }), styles === undefined ? undefined : external_react_["createElement"]("style", {
    id: "jss-server-side"
  }, "$", styles), constructScript(), js.map(value => scriptTag(value)), helmet.script.toComponent(), addBodyElements()))); // tslint:enable no-unnecessary-callback-wrapper
};
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/reactApplication/index.tsx







 // @ts-ignore






 // @ts-ignore








const reactApplication_provider = new client_["LocalUserAccountProvider"]({
  keystore: new client_["LocalKeyStore"]({
    store: new client_["LocalMemoryStore"]()
  }),
  provider: new client_["NEOONEProvider"]()
});
const reactApplication_client = new client_["Client"]({
  memory: reactApplication_provider,
  localStorage: new client_["LocalUserAccountProvider"]({
    keystore: new client_["LocalKeyStore"]({
      store: new client_["LocalMemoryStore"]('localStorage')
    }),
    provider: new client_["NEOONEProvider"]()
  })
});

const renderAppShell = (monitor, network, appOptions) => {
  const store = configureStore(false);
  const theme = createTheme();
  const sheetsRegistry = new external_react_jss_["SheetsRegistry"]();
  const jss = Object(external_jss_["create"])(external_jss_preset_default_default()()); // @ts-ignore

  jss.options.createGenerateClassName = createGenerateClassName_default.a; // tslint:disable-line no-object-mutation

  const app = external_react_["createElement"](external_react_jss_["JssProvider"], {
    registry: sheetsRegistry,
    jss: jss
  }, external_react_["createElement"](ThemeProvider, {
    theme: theme,
    sheetsManager: new Map()
  }, external_react_["createElement"](external_react_router_["StaticRouter"], {
    location: "/",
    context: {},
    basename: ""
  }, external_react_["createElement"](external_react_redux_["Provider"], {
    store: store
  }, external_react_["createElement"](src_AppServer, {
    appContext: {
      css: [],
      nonce: '1234',
      options$: Object(external_rxjs_["of"])(appOptions),
      monitor,
      network,
      client: reactApplication_client,
      userAgent: {}
    }
  })))));
  const appShell = Object(server_["renderToString"])(app);
  const helmet = external_react_helmet_default.a.renderStatic();
  const appStyles = sheetsRegistry.toString();
  return {
    reactAppString: appShell,
    reactHelmet: helmet,
    relay: undefined,
    records: undefined,
    styles: appStyles
  };
};

const reactApplication_renderApp = async ({
  match,
  location,
  rootLoader,
  css,
  nonce,
  monitor,
  userAgent,
  network,
  appOptions,
  queryMap
}) => {
  const relaySSRQueryCache = new RelaySSRQueryCache_RelaySSRQueryCache();
  const relayEnvironment = makeRelayEnvironment({
    monitor,
    rootLoader,
    schema: schema_schema(),
    relaySSRQueryCache,
    queryMap
  });
  await src_App.asyncBootstrap(match[0], relayEnvironment);
  const store = configureStore(false);
  const context = {};
  const theme = createTheme();
  const sheetsRegistry = new external_react_jss_["SheetsRegistry"]();
  const jss = Object(external_jss_["create"])(external_jss_preset_default_default()()); // @ts-ignore

  jss.options.createGenerateClassName = createGenerateClassName_default.a; // tslint:disable-line no-object-mutation

  const readClient = new client_["ReadClient"](new client_["NEOONEDataProvider"]({
    network,
    rpcURL: appOptions.rpcURL
  }));
  const app = external_react_["createElement"](external_react_jss_["JssProvider"], {
    registry: sheetsRegistry,
    jss: jss
  }, external_react_["createElement"](ThemeProvider, {
    theme: theme,
    sheetsManager: new Map()
  }, external_react_["createElement"](external_react_router_["StaticRouter"], {
    location: location,
    context: context,
    basename: ""
  }, external_react_["createElement"](external_react_redux_["Provider"], {
    store: store
  }, external_react_["createElement"](src_App, {
    relayEnvironment: relayEnvironment,
    appContext: {
      environment: relayEnvironment,
      css,
      nonce,
      options$: Object(external_rxjs_["of"])(appOptions),
      monitor,
      network,
      client: reactApplication_client,
      readClient,
      userAgent,
      fileSaver: {
        saveAs: () => {// do nothing
        }
      }
    }
  })))));
  const reactAppString = Object(server_["renderToString"])(app);

  const relay = () => relaySSRQueryCache.toData();

  const records = () => relayEnvironment.getStore().getSource().toJSON();

  const reactHelmet = external_react_helmet_default.a.renderStatic();
  const styles = sheetsRegistry.toString();
  return {
    reactAppString,
    reactHelmet,
    relay,
    records,
    styles
  };
};

const getAssets = clientAssetsPath => JSON.parse(external_fs_default.a.readFileSync(resolveRootPath(clientAssetsPath), 'utf8')).index; // tslint:disable-next-line export-name


const reactApplication = ({
  monitor: baseMonitor,
  addHeadElements,
  addBodyElements,
  environment,
  options,
  network,
  appOptions
}) => {
  const userAgents = new RegExp(options.ssr.userAgents);
  const appShellResult = renderAppShell(baseMonitor, network, appOptions);
  const asset = getAssets(options.clientAssetsPath);
  return {
    type: 'route',
    method: 'get',
    name: 'reactApplication',
    path: '/*',
    middleware: external_koa_compose_default()([external_koa_compress_default()(), async ctx => {
      const nonce = getNonce(ctx);
      const rootLoader = common_getRootLoader(ctx);
      const monitor = common_getMonitor(ctx);
      const userAgent = getUserAgent(ctx);
      const match = Object(external_react_router_config_["matchRoutes"])(routeConfigs, ctx.request.path); // tslint:disable-next-line strict-type-predicates

      if (match == undefined || match.length === 0) {
        throw new CodedError["a" /* CodedError */](CodedError["a" /* CodedError */].PROGRAMMING_ERROR);
      }

      const missed = match[0].route.path === undefined;
      const routePath = match[0].route.path;

      if (routePath !== undefined) {
        monitor.setLabels({
          [monitor.labels.HTTP_PATH]: routePath
        });
      }

      const isSSR = options.ssr.enabled && userAgents.test(userAgent.ua);
      const {
        reactAppString,
        reactHelmet,
        relay,
        records,
        styles
      } = await (isSSR ? reactApplication_renderApp({
        match,
        location: ctx.request.url,
        rootLoader,
        css: [asset.css],
        nonce,
        monitor,
        userAgent,
        network,
        appOptions,
        queryMap: getQueryMap(ctx)
      }) : appShellResult);
      const html = makeServerHTML_makeServerHTML({
        css: [asset.css],
        js: [asset.js],
        reactAppString,
        nonce,
        helmet: reactHelmet,
        relay,
        records,
        styles,
        userAgent,
        network,
        appOptions,
        appVersion: environment.appVersion,
        addHeadElements,
        addBodyElements,
        adsenseID: options.adsenseID,
        bsaEnabled: options.bsaEnabled
      });
      ctx.type = 'html';
      ctx.status = missed ? 404 : 200;
      ctx.body = html;
    }])
  };
};
// EXTERNAL MODULE: external "koa-cors"
var external_koa_cors_ = __webpack_require__(305);
var external_koa_cors_default = /*#__PURE__*/__webpack_require__.n(external_koa_cors_);

// CONCATENATED MODULE: ./packages/neotracker-server-web/src/middleware/cors.ts

 // @ts-ignore


const cors_cors = simpleMiddleware('cors', external_koa_convert_default()(external_koa_cors_default()({
  origin: '*'
})));
// CONCATENATED MODULE: ./packages/neotracker-server-web/src/createServer$.ts




 // @ts-ignore











const noOpAddMiddleware = middleware => middleware;

const noOpAddHeadElements = () => [];

const noOpAddBodyElements = () => [];

const createServer$_RATE_LIMIT_ERROR_CODE = 429;
const createServer$ = ({
  monitor,
  environment,
  createOptions$
}) => {
  function mapDistinct$(func) {
    return createOptions$.pipe(Object(operators_["map"])(func), Object(operators_["distinctUntilChanged"])());
  }

  const rootLoader$ = createRootLoader$({
    db$: createFromEnvironment$({
      monitor,
      environment: environment.db,
      options$: mapDistinct$(_ => _.options.db)
    }),
    options$: mapDistinct$(_ => _.options.rootLoader),
    monitor
  }).pipe(Object(operators_["publishReplay"])(1), Object(operators_["refCount"])());
  const queryMapEnv = environment.queryMap === undefined ? {
    queriesPath: resolveRootPath(external_path_["join"]('packages', 'neotracker-server-graphql', 'src', '__generated__', 'queries.json')),
    nextQueriesDir: resolveRootPath(external_path_["join"]('packages', 'neotracker-server-graphql', 'src', '__generated__', 'queries'))
  } : environment.queryMap;
  const queryMap$ = mapDistinct$(_ => _.options.serveNext).pipe(Object(operators_["map"])(next => new QueryMap_QueryMap({
    next,
    queriesPath: queryMapEnv.queriesPath,
    nextQueriesDir: queryMapEnv.nextQueriesDir
  })));
  const rootCalls$ = start$(Object(external_rxjs_["combineLatest"])(mapDistinct$(_ => _.options.appOptions), rootLoader$).pipe(Object(operators_["map"])(([appOptions, rootLoader]) => ({
    monitor,
    appOptions,
    rootLoader
  }))));
  const subscriber$ = mapDistinct$(_ => _.options.subscribeProcessedNextIndex).pipe(Object(operators_["switchMap"])(options => subscribeProcessedNextIndex({
    monitor,
    options,
    environment: environment.directDB
  })));
  const graphqlMiddleware = graphql({
    next: false
  });
  const graphqlNextMiddleware = graphql({
    next: true
  });
  const app$ = Object(external_rxjs_["combineLatest"])(Object(external_rxjs_["combineLatest"])(Object(external_rxjs_["combineLatest"])(rootLoader$, queryMap$).pipe(Object(operators_["map"])(([rootLoader, queryMap]) => setRootLoader({
    rootLoader,
    queryMap
  }))), mapDistinct$(_ => _.options.appOptions.maintenance).pipe(Object(operators_["map"])(maintenance => healthCheck({
    options: {
      maintenance
    }
  }))), mapDistinct$(_ => _.options.toobusy).pipe(Object(operators_["map"])(options => toobusy({
    options
  }))), mapDistinct$(_ => _.options.rateLimit).pipe(Object(operators_["map"])(options => ratelimit({
    options
  }))), mapDistinct$(_ => _.options.security).pipe(Object(operators_["map"])(options => security({
    options
  }))), mapDistinct$(_ => _.options.clientAssets).pipe(Object(operators_["map"])(options => clientAssets({
    options
  })))), Object(external_rxjs_["combineLatest"])(mapDistinct$(_ => _.options.clientAssetsNext).pipe(Object(operators_["map"])(options => clientAssetsNext({
    options
  }))), mapDistinct$(_ => _.options.publicAssets).pipe(Object(operators_["map"])(options => publicAssets({
    options
  }))), mapDistinct$(_ => _.options.rootAssets).pipe(Object(operators_["map"])(options => rootAssets({
    options
  }))), mapDistinct$(_ => _.options.domain).pipe(Object(operators_["map"])(domain => sitemap({
    domain
  }))), mapDistinct$(_ => _.options.rpcURL).pipe(Object(operators_["map"])(rpcURL => nodeRPC({
    rpcURL
  }))), mapDistinct$(_ => _.options.reportURL).pipe(Object(operators_["map"])(reportURL => report({
    reportURL
  })))), Object(external_rxjs_["combineLatest"])(Object(external_rxjs_["combineLatest"])(mapDistinct$(({
    addHeadElements = noOpAddHeadElements
  }) => addHeadElements), mapDistinct$(({
    addBodyElements = noOpAddBodyElements
  }) => addBodyElements), mapDistinct$(_ => _.options.react), mapDistinct$(_ => _.options.reactApp), mapDistinct$(_ => _.options.appOptions), mapDistinct$(_ => _.options.serveNext)).pipe(Object(operators_["map"])(([addHeadElements, addBodyElements, react, reactAppOptions, appOptions, serveNext]) => serveNext ? reactApp({
    addHeadElements,
    addBodyElements,
    environment: environment.reactApp,
    options: reactAppOptions,
    network: environment.network,
    appOptions
  }) : reactApplication({
    monitor,
    addHeadElements,
    addBodyElements,
    environment: environment.react,
    options: react,
    network: environment.network,
    appOptions
  }))), mapDistinct$(({
    addMiddleware = noOpAddMiddleware
  }) => addMiddleware), Object(external_rxjs_["defer"])(async () => external_react_loadable_default.a.preloadAll()))).pipe(Object(operators_["map"])(([[setRootLoaderMiddleware, healthCheckMiddleware, toobusyMiddleware, ratelimitMiddleware, securityMiddleware, clientAssetsMiddleware], [clientAssetsNextMiddleware, publicAssetsMiddleware, rootAssetsMiddleware, sitemapMiddleware, nodeRPCMiddleware, reportMiddleware], [reactApplicationMiddleware, addMiddleware]]) => {
    const app = new external_koa_default.a();
    app.proxy = true; // $FlowFixMe

    app.silent = true;
    app.on('error', context_onError({
      monitor
    })); // tslint:disable-next-line no-any

    const middlewares = addMiddleware([context_context({
      monitor,
      handleError: (ctx, error) => {
        if (error.status === createServer$_RATE_LIMIT_ERROR_CODE) {
          throw error;
        }

        if (ctx.path === routes_namespaceObject.ERROR) {
          ctx.throw(error.status != undefined ? error.status : 500, sanitizeError(error).clientMessage);
        } else if (ctx.request.method === 'GET' && !ctx.response.headerSent) {
          ctx.redirect(routes_namespaceObject.ERROR);
        } else {
          throw error;
        }
      }
    }), setRootLoaderMiddleware, healthCheckMiddleware, toobusyMiddleware, ratelimitMiddleware, securityMiddleware, clientAssetsMiddleware, clientAssetsNextMiddleware, publicAssetsMiddleware, rootAssetsMiddleware, sitemapMiddleware, graphqlMiddleware, graphqlNextMiddleware, nodeRPCMiddleware, reportMiddleware, reactApplicationMiddleware]);
    routeMiddleware({
      app,
      middlewares,
      cors: cors_cors
    });
    return app;
  }));
  const server$ = app$.pipe(mergeScanLatest((prevResult, app) => Object(external_rxjs_["defer"])(async () => handleServer({
    monitor,
    createServer: () => external_http_default.a.createServer(),
    options: environment.server,
    app,
    prevResult
  })), undefined), finalize(finalizeServer), Object(operators_["filter"])(utils["a" /* utils */].notNull), Object(operators_["map"])(({
    server
  }) => server), Object(operators_["filter"])(utils["a" /* utils */].notNull), Object(operators_["distinctUntilChanged"])());
  const liveServer$ = Object(external_rxjs_["combineLatest"])(server$, queryMap$).pipe(mergeScanLatest((prevLiveServer, [server, queryMap]) => Object(external_rxjs_["defer"])(async () => {
    if (prevLiveServer !== undefined) {
      await prevLiveServer.stop();
    }

    const graphqlServer = await LiveServer_LiveServer.create({
      schema: schema_schema(),
      rootLoader$,
      monitor,
      queryMap,
      socketOptions: {
        server,
        path: queryMap.next ? neotracker_shared_web_next_src["routes"].GRAPHQL : routes_namespaceObject.GRAPHQL
      }
    });
    await graphqlServer.start();
    return graphqlServer;
  }), undefined), finalize(async liveServer => {
    if (liveServer !== undefined) {
      await liveServer.stop();
    }
  }));
  return Object(external_rxjs_["merge"])(rootCalls$, subscriber$, liveServer$);
};
// CONCATENATED MODULE: ./packages/neotracker-core/src/NEOTracker.ts






class NEOTracker_NEOTracker {
  constructor({
    options$,
    environment,
    monitor
  }) {
    this.mutableShutdownInitiated = false;
    this.options$ = options$;
    this.environment = environment;
    this.monitor = monitor;
  }

  start() {
    process.on('uncaughtException', error => {
      this.monitor.logError({
        name: 'service_uncaught_rejection',
        error
      });
      this.shutdown(1);
    });
    process.on('unhandledRejection', error => {
      this.monitor.logError({
        name: 'service_unhandled_rejection',
        error
      });
    });
    process.on('SIGINT', () => {
      this.monitor.log({
        name: 'service_sigint'
      });
      this.shutdown(0);
    });
    process.on('SIGTERM', () => {
      this.monitor.log({
        name: 'service_sigterm'
      });
      this.shutdown(0);
    });
    this.monitor.log({
      name: 'service_start'
    });
    this.monitor.serveMetrics(this.environment.start.metricsPort);
    const server$ = createServer$({
      monitor: this.monitor,
      environment: this.environment.server,
      createOptions$: this.options$.pipe(Object(operators_["map"])(options => ({
        options: options.server
      })), Object(operators_["distinctUntilChanged"])())
    });
    const scrape$ = createScraper$({
      monitor: this.monitor,
      environment: this.environment.scrape,
      options$: this.options$.pipe(Object(operators_["map"])(options => options.scrape), Object(operators_["distinctUntilChanged"])())
    });
    this.mutableSubscription = Object(external_rxjs_["concat"])(Object(external_rxjs_["defer"])(async () => {
      const options = await this.options$.pipe(Object(operators_["take"])(1)).toPromise();
      await createTables(createFromEnvironment(this.monitor, this.environment.scrape.db, options.scrape.db), this.monitor);
    }), Object(external_rxjs_["merge"])(server$, scrape$)).subscribe({
      complete: () => {
        this.monitor.log({
          name: 'service_unexpected_complete'
        });
        this.shutdown(1);
      },
      error: error => {
        this.monitor.logError({
          name: 'service_unexpected_complete',
          error
        });
        this.shutdown(1);
      }
    });
  }

  stop() {
    this.shutdown(0);
  }

  shutdown(exitCode) {
    if (!this.mutableShutdownInitiated) {
      this.mutableShutdownInitiated = true;

      if (this.mutableSubscription !== undefined) {
        this.mutableSubscription.unsubscribe();
        this.mutableSubscription = undefined;
      }

      finalize.wait().then(() => {
        this.monitor.log({
          name: 'server_shutdown'
        });
        this.monitor.close(() => process.exit(exitCode));
      }).catch(error => {
        this.monitor.logError({
          name: 'server_shutdown_error',
          error
        });
        this.monitor.close(() => process.exit(1));
      });
    }
  }

}
// CONCATENATED MODULE: ./packages/neotracker-core/src/bin/neotracker.ts
// tslint:disable no-import-side-effect no-let ordered-imports








external_yargs_default.a.describe('network', 'Network configuration to run against.').default('network', 'priv');
external_yargs_default.a.describe('rpc-url', 'NEO•ONE node rpc url.').default('rpc-url', 'http://localhost:40200/rpc');
external_yargs_default.a.describe('next', 'Run NEO Tracker Next').default('next', false);
external_yargs_default.a.describe('db-file', 'DB file').default('db-file', 'db.sqlite');
external_yargs_default.a.describe('port', 'Port to listen on').default('port', 1340);
external_yargs_default.a.describe('metrics-port', 'Port to serve metrics on').default('port', 80); // tslint:disable-next-line readonly-array

const getDistPath = (...paths) => external_path_["resolve"](__dirname, '..', 'dist', ...paths);

const neotracker_configuration = {
  clientBundlePath: getDistPath('neotracker-client-web'),
  clientBundlePathNext: getDistPath('neotracker-client-web-next'),
  clientPublicPath: '/client/',
  clientPublicPathNext: '/client-next/',
  clientAssetsPath: getDistPath('neotracker-client-web', 'assets.json'),
  clientAssetsPathNext: getDistPath('neotracker-client-web-next', 'assets.json'),
  statsPath: getDistPath('neotracker-client-web-next', 'stats.json'),
  rootAssetsPath: getDistPath('root'),
  publicAssetsPath: getDistPath('public')
};
const neotracker_port = external_yargs_default.a.argv.port;
const neotracker_dbFileName = external_yargs_default.a.argv['db-file'];
const {
  options: neotracker_options,
  network: neotracker_network
} = getOptions({
  network: external_yargs_default.a.argv.network,
  rpcURL: external_yargs_default.a.argv['rpc-url'],
  port: neotracker_port,
  dbFileName: external_path_["isAbsolute"](neotracker_dbFileName) ? neotracker_dbFileName : external_path_["resolve"](process.cwd(), neotracker_dbFileName),
  configuration: neotracker_configuration
});
const neotracker_options$ = new external_rxjs_["BehaviorSubject"](neotracker_options);
const neotracker_monitor = monitor_["DefaultMonitor"].create({
  service: 'web_server',
  logger: createConsoleLogger()
});
const neotracker_db = {};
const neotracker_environment = {
  server: {
    react: {
      appVersion: 'dev'
    },
    reactApp: {
      appVersion: 'dev'
    },
    db: neotracker_db,
    directDB: neotracker_db,
    server: {
      host: '0.0.0.0',
      port: neotracker_port
    },
    network: neotracker_network,
    queryMap: {
      queriesPath: getDistPath('queries.json'),
      nextQueriesDir: getDistPath('queries')
    }
  },
  scrape: {
    db: {},
    network: neotracker_network,
    pubSub: {}
  },
  start: {
    metricsPort: external_yargs_default.a.argv['metrics-port']
  }
};
const neotracker = new NEOTracker_NEOTracker({
  options$: neotracker_options$,
  monitor: neotracker_monitor,
  environment: neotracker_environment
});
neotracker.start();

/***/ }),
/* 335 */,
/* 336 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/errors/BaseError.ts
class BaseError extends Error {
  constructor(message, originalError) {
    super(message);
    this.message = message;
    this.originalError = originalError; // tslint:disable-next-line no-any

    this.__proto__ = BaseError.prototype;
  }

}
// CONCATENATED MODULE: ./packages/neotracker-shared-utils/src/errors/ClientError.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SOMETHING_WENT_WRONG; });
/* unused harmony export NETWORK_ERROR */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return COPY_UNSUPPORTED_BROWSER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ClientError_ClientError; });

const CLIENT_ERROR_PREFIX = 'CLIENT:';
const SOMETHING_WENT_WRONG = 'Something went wrong. Try refreshing the page or going back to where you were.';
const NETWORK_ERROR = 'Network failure. Try refreshing the page.';
const COPY_UNSUPPORTED_BROWSER = 'Copying to clipboard is not supported in your browser.';
const STATUS_CODE_TO_MESSAGE = {
  '503': 'Server is under heavy load. Please try again later.'
};
class ClientError_ClientError extends BaseError {
  static extractClientErrorMessage(message) {
    if (message.startsWith(CLIENT_ERROR_PREFIX)) {
      return message.substr(CLIENT_ERROR_PREFIX.length);
    }

    return undefined;
  }

  static getClientError(error) {
    const message = this.extractClientErrorMessage(error.message);

    if (message !== undefined) {
      return new ClientError_ClientError(message, error);
    }

    return undefined;
  }

  static getMessageForStatusCode(statusCode) {
    const message = STATUS_CODE_TO_MESSAGE[`${statusCode}`];
    return message === undefined ? SOMETHING_WENT_WRONG : message;
  }

  static async getFromResponse(response) {
    let originalMessage;
    let message;
    let error = new Error(`HTTP Error ${response.status}`);

    try {
      originalMessage = await response.text();
      message = this.extractClientErrorMessage(originalMessage);
      error = new Error(`HTTP Error ${response.status}: ${originalMessage}`);
    } catch (_a) {// Do nothing
    }

    return new ClientError_ClientError(message === undefined ? this.getMessageForStatusCode(response.status) : message, error);
  }

  static getFromNetworkError(error) {
    return new ClientError_ClientError(NETWORK_ERROR, error);
  }

  constructor(message, originalError) {
    super(`${CLIENT_ERROR_PREFIX}${message}`, originalError);
    this.clientMessage = message;
  }

}

/***/ }),
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return NEO_ASSET_HASH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return NEO_ASSET_HASH_0X; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return NEO_ASSET_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GAS_ASSET_HASH; });
/* unused harmony export GAS_ASSET_HASH_0X */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return GAS_ASSET_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return NEO_COIN_ASSET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return GAS_COIN_ASSET; });
const NEO_ASSET_HASH = 'c56f33fc6ecfcd0c225c4ab356fee59390af8560be0e930faebe74a6daff7c9b';
const NEO_ASSET_HASH_0X = `0x${NEO_ASSET_HASH}`;
const NEO_ASSET_ID = NEO_ASSET_HASH;
const GAS_ASSET_HASH = '602c79718b16e442de58778e148d0b1084e3b2dffd5de6b7b16cee7969282de7';
const GAS_ASSET_HASH_0X = `0x${GAS_ASSET_HASH}`;
const GAS_ASSET_ID = GAS_ASSET_HASH;
const NEO_COIN_ASSET = {
  id: `Asset:${NEO_ASSET_HASH}`,
  transaction_id: `Transaction:${NEO_ASSET_HASH}`,
  name: [{
    lang: 'zh-CN',
    name: '小蚁股'
  }, {
    lang: 'en',
    name: 'CRONIUM'
  }],
  symbol: 'CRONIUM'
};
const GAS_COIN_ASSET = {
  id: `Asset:${GAS_ASSET_HASH}`,
  transaction_id: `Transaction:${GAS_ASSET_HASH}`,
  name: [{
    lang: 'zh-CN',
    name: '小蚁币'
  }, {
    lang: 'en',
    name: 'CRON'
  }],
  symbol: 'CRON'
};

/***/ }),
/* 366 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return numbers; });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(bignumber_js__WEBPACK_IMPORTED_MODULE_0__);

const ZERO = new bignumber_js__WEBPACK_IMPORTED_MODULE_0___default.a('0');
const D = new bignumber_js__WEBPACK_IMPORTED_MODULE_0___default.a('100000000');
const TOTAL_NEO = new bignumber_js__WEBPACK_IMPORTED_MODULE_0___default.a('100000000');
const numbers = {
  ZERO,
  D,
  TOTAL_NEO
};

/***/ }),
/* 367 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CodedClientError; });
/* harmony import */ var _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(336);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// $FlowFixMe

const ERROR_CODE_TO_MESSAGE = {
  PRIVATE_KEY_WIF_BASE58_ERROR: 'Invalid WIF Private Key. Base58 decoding failed.',
  PRIVATE_KEY_WIF_BAD_FORMAT_ERROR: 'Invalid WIF Private Key. Invalid format.',
  PRIVATE_KEY_WIF_INVALID_FORMAT: 'Invalid WIF Private Key. Invalid format.',
  PRIVATE_KEY_WIF_UNKNOWN_CRYPTO_ERROR: 'Invalid WIF Private Key. Unknown crypto error.',
  PRIVATE_KEY_WIF_VERIFICATION_ERROR: 'Invalid WIF Private Key. WIF verification failed.',
  PRIVATE_KEY_WIF_UNKNOWN_ERROR: 'Invalid WIF Private Key. Unknown error.',
  PRIVATE_KEY_BAD_FORMAT_ERROR: 'Invalid Private Key.',
  PUBLIC_KEY_DERIVATION_ERROR: 'Invalid Private Key. Failed to derive Public Key.',
  ADDRESS_DERIVATION_ERROR: 'Invalid Private Key. Failed to derive Address.',
  ADDRESS_BASE58_ERROR: 'Invalid Address. Base58 decoding failed.',
  ADDRESS_BAD_FORMAT_ERROR: 'Invalid Address. Invalid format.',
  ADDRESS_INVALID_ERROR: 'Invalid Address. Invalid format.',
  ADDRESS_INVALID_FORMAT: 'Invalid Address. Invalid format.',
  ADDRESS_UNKNOWN_CRYPTO_ERROR: 'Invalid Address. Unknown crypto error.',
  ADDRESS_VERIFICATION_ERROR: 'Invalid Address. Address verification failed.',
  ADDRESS_UNKNOWN_ERROR: 'Invalid Address. Unknown error.',
  INSUFFICIENT_FUNDS: 'Insufficient funds.',
  INPUT_LENGTH_UNSUPPORTED: 'This transaction would require more than 255 inputs which is currently not supported.',
  OUTPUT_LENGTH_UNSUPPORTED: 'This transaction would require more than 255 outputs which is currently not supported.',
  SCRIPT_HASH_UNKNOWN_CRYPTO_ERROR: 'Invalid Script Hash (Address). Unknown crypto error.',
  BASE58_CHECK_DECODE_BASE58_ERROR: 'Base58 decoding failed.',
  BASE58_CHECK_DECODE_INVALID_FORMAT: 'Invalid format.',
  BASE58_CHECK_DECODE_UNKNOWN_CRYPTO_ERROR: 'Unknown crypto error.',
  BASE58_CHECK_DECODE_VERIFICATION_ERROR: 'Verification failed.',
  WIF_ENCODE_ERROR: 'Invalid Private Key. Encoding to WIF failed.',
  TRANSACTION_HASH_UNKNOWN_ERROR: 'Unknown error.',
  TRANSFER_TRANSACTION_UNKNOWN_ERROR: 'Something went wrong creating the transfer transaction.',
  CLAIM_TRANSACTION_UNKNOWN_ERROR: 'Something went wrong creating the claim transaction.',
  DECRYPT_KEYSTORE_UNSUPPORTED_ALGO: 'Invalid Keystore file.',
  DECRYPT_KEYSTORE_UNSUPPORTED_PBKDF2_PARAMETERS: 'Invalid Keystore file.',
  DECRYPT_KEYSTORE_DERIVED_KEY_ERROR: 'Failed to create derived key from password. Password may be incorrect.',
  DECRYPT_KEYSTORE_UNKNOWN_CRYPTO_ERROR: 'Invalid Keystore file. Unknown crypto error.',
  DECRYPT_KEYSTORE_DECIPHER_ERROR: 'Could not decrypt file.',
  DECRYPT_KEYSTORE_WRONG_PASSPHRASE: 'Wrong password.',
  DECRYPT_KEYSTORE_WRONG_ADDRESS: 'Private Key address does not match Keystore address.',
  CREATE_NEP2_ERROR: 'Failed to create NEP2',
  EXTRACT_NEO_WEB_APP_INVALID_FILE: 'Invalid wallet file.',
  EXTRACT_NEO_WEB_APP_INVALID_JSON: 'Invalid wallet file. Expected a JSON encoded file.',
  EXTRACT_NEO_WEB_APP_INVALID_FORMAT: 'Invalid wallet file. Format is incorrect.',
  EXTRACT_NEO_WEB_APP_UNKNOWN_ERROR: 'Invalid wallet file. Unknown error.',
  EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_UNKNOWN_ERROR: 'Unknown error. Possibly wrong password.',
  EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_WRONG_PASSPHRASE: 'Wrong password.',
  EXTRACT_KEYSTORE_INVALID_FILE: 'Invalid Keystore file.',
  EXTRACT_KEYSTORE_INVALID_FORMAT: 'Invalid Keystore file.',
  EXTRACT_KEYSTORE_INVALID_JSON: 'Invalid wallet file. Expected a JSON encoded file.',
  EXTRACT_KEYSTORE_INVALID_NEP2: 'Invalid wallet file. Expected a text file with an encrypted private key.',
  SEND_ASSET_NO_UNSPENT: 'Must have at least one unspent transaction to transfer.',
  CLAIM_GAS_NO_UNCLAIMED: 'Must have at least one unclaimed transaction to claim.',
  CREATE_PAPER_WALLET_WINDOW_OPEN_ERROR: 'Failed to open window for Paper Wallet. It may have been blocked by a popup blocker.',
  NAME_TOO_SHORT_ERROR: 'Wallet name too short.',
  NAME_TOO_LONG_ERROR: 'Wallet name too long.'
};
class CodedClientError extends _neotracker_shared_utils__WEBPACK_IMPORTED_MODULE_0__[/* ClientError */ "b"] {
  constructor(code, originalError) {
    super(ERROR_CODE_TO_MESSAGE[code], originalError);

    _defineProperty(this, "code", void 0);

    this.code = code;
  }

}

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_BASE58_ERROR", 'PRIVATE_KEY_WIF_BASE58_ERROR');

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_BAD_FORMAT_ERROR", 'PRIVATE_KEY_WIF_BAD_FORMAT_ERROR');

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_INVALID_FORMAT", 'PRIVATE_KEY_WIF_INVALID_FORMAT');

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_UNKNOWN_CRYPTO_ERROR", 'PRIVATE_KEY_WIF_UNKNOWN_CRYPTO_ERROR');

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_VERIFICATION_ERROR", 'PRIVATE_KEY_WIF_VERIFICATION_ERROR');

_defineProperty(CodedClientError, "PRIVATE_KEY_WIF_UNKNOWN_ERROR", 'PRIVATE_KEY_WIF_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "PRIVATE_KEY_BAD_FORMAT_ERROR", 'PRIVATE_KEY_BAD_FORMAT_ERROR');

_defineProperty(CodedClientError, "PUBLIC_KEY_DERIVATION_ERROR", 'PUBLIC_KEY_DERIVATION_ERROR');

_defineProperty(CodedClientError, "ADDRESS_DERIVATION_ERROR", 'ADDRESS_DERIVATION_ERROR');

_defineProperty(CodedClientError, "ADDRESS_BASE58_ERROR", 'ADDRESS_BASE58_ERROR');

_defineProperty(CodedClientError, "ADDRESS_BAD_FORMAT_ERROR", 'ADDRESS_BAD_FORMAT_ERROR');

_defineProperty(CodedClientError, "ADDRESS_INVALID_ERROR", 'ADDRESS_INVALID_ERROR');

_defineProperty(CodedClientError, "ADDRESS_INVALID_FORMAT", 'ADDRESS_INVALID_FORMAT');

_defineProperty(CodedClientError, "ADDRESS_UNKNOWN_CRYPTO_ERROR", 'ADDRESS_UNKNOWN_CRYPTO_ERROR');

_defineProperty(CodedClientError, "ADDRESS_VERIFICATION_ERROR", 'ADDRESS_VERIFICATION_ERROR');

_defineProperty(CodedClientError, "ADDRESS_UNKNOWN_ERROR", 'ADDRESS_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "INSUFFICIENT_FUNDS", 'INSUFFICIENT_FUNDS');

_defineProperty(CodedClientError, "INPUT_LENGTH_UNSUPPORTED", 'INPUT_LENGTH_UNSUPPORTED');

_defineProperty(CodedClientError, "OUTPUT_LENGTH_UNSUPPORTED", 'OUTPUT_LENGTH_UNSUPPORTED');

_defineProperty(CodedClientError, "SCRIPT_HASH_UNKNOWN_CRYPTO_ERROR", 'SCRIPT_HASH_UNKNOWN_CRYPTO_ERROR');

_defineProperty(CodedClientError, "BASE58_CHECK_DECODE_BASE58_ERROR", 'BASE58_CHECK_DECODE_BASE58_ERROR');

_defineProperty(CodedClientError, "BASE58_CHECK_DECODE_INVALID_FORMAT", 'BASE58_CHECK_DECODE_INVALID_FORMAT');

_defineProperty(CodedClientError, "BASE58_CHECK_DECODE_UNKNOWN_CRYPTO_ERROR", 'BASE58_CHECK_DECODE_UNKNOWN_CRYPTO_ERROR');

_defineProperty(CodedClientError, "BASE58_CHECK_DECODE_VERIFICATION_ERROR", 'BASE58_CHECK_DECODE_VERIFICATION_ERROR');

_defineProperty(CodedClientError, "WIF_ENCODE_ERROR", 'WIF_ENCODE_ERROR');

_defineProperty(CodedClientError, "TRANSACTION_HASH_UNKNOWN_ERROR", 'TRANSACTION_HASH_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "TRANSFER_TRANSACTION_UNKNOWN_ERROR", 'TRANSFER_TRANSACTION_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "CLAIM_TRANSACTION_UNKNOWN_ERROR", 'CLAIM_TRANSACTION_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_UNSUPPORTED_ALGO", 'DECRYPT_KEYSTORE_UNSUPPORTED_ALGO');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_UNSUPPORTED_PBKDF2_PARAMETERS", 'DECRYPT_KEYSTORE_UNSUPPORTED_PBKDF2_PARAMETERS');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_DERIVED_KEY_ERROR", 'DECRYPT_KEYSTORE_DERIVED_KEY_ERROR');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_UNKNOWN_CRYPTO_ERROR", 'DECRYPT_KEYSTORE_UNKNOWN_CRYPTO_ERROR');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_DECIPHER_ERROR", 'DECRYPT_KEYSTORE_DECIPHER_ERROR');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_WRONG_PASSPHRASE", 'DECRYPT_KEYSTORE_WRONG_PASSPHRASE');

_defineProperty(CodedClientError, "DECRYPT_KEYSTORE_WRONG_ADDRESS", 'DECRYPT_KEYSTORE_WRONG_ADDRESS');

_defineProperty(CodedClientError, "CREATE_NEP2_ERROR", 'CREATE_NEP2_ERROR');

_defineProperty(CodedClientError, "EXTRACT_NEO_WEB_APP_INVALID_FILE", 'EXTRACT_NEO_WEB_APP_INVALID_FILE');

_defineProperty(CodedClientError, "EXTRACT_NEO_WEB_APP_INVALID_JSON", 'EXTRACT_NEO_WEB_APP_INVALID_JSON');

_defineProperty(CodedClientError, "EXTRACT_NEO_WEB_APP_INVALID_FORMAT", 'EXTRACT_NEO_WEB_APP_INVALID_FORMAT');

_defineProperty(CodedClientError, "EXTRACT_NEO_WEB_APP_UNKNOWN_ERROR", 'EXTRACT_NEO_WEB_APP_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_UNKNOWN_ERROR", 'EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_UNKNOWN_ERROR');

_defineProperty(CodedClientError, "EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_WRONG_PASSPHRASE", 'EXTRACT_PRIVATE_KEYS_NEO_WEB_APP_WRONG_PASSPHRASE');

_defineProperty(CodedClientError, "EXTRACT_KEYSTORE_INVALID_FILE", 'EXTRACT_KEYSTORE_INVALID_FILE');

_defineProperty(CodedClientError, "EXTRACT_KEYSTORE_INVALID_JSON", 'EXTRACT_KEYSTORE_INVALID_JSON');

_defineProperty(CodedClientError, "EXTRACT_KEYSTORE_INVALID_FORMAT", 'EXTRACT_KEYSTORE_INVALID_FORMAT');

_defineProperty(CodedClientError, "EXTRACT_KEYSTORE_INVALID_NEP2", 'EXTRACT_KEYSTORE_INVALID_NEP2');

_defineProperty(CodedClientError, "SEND_ASSET_NO_UNSPENT", 'SEND_ASSET_NO_UNSPENT');

_defineProperty(CodedClientError, "CLAIM_GAS_NO_UNCLAIMED", 'CLAIM_GAS_NO_UNCLAIMED');

_defineProperty(CodedClientError, "CREATE_PAPER_WALLET_WINDOW_OPEN_ERROR", 'CREATE_PAPER_WALLET_WINDOW_OPEN_ERROR');

_defineProperty(CodedClientError, "NAME_TOO_SHORT_ERROR", 'NAME_TOO_SHORT_ERROR');

_defineProperty(CodedClientError, "NAME_TOO_LONG_ERROR", 'NAME_TOO_LONG_ERROR');

/***/ }),
/* 368 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: external "rxjs"
var external_rxjs_ = __webpack_require__(7);

// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/pubsub/PubSub.ts
// tslint:disable no-any

class PubSub_PubSub {
  constructor() {
    this.mutableSubjects = {};
    this.mutableObservables = {};
  }

  publish(triggerName, payload) {
    this.subject$(triggerName).next(payload);
  }

  subject$(triggerName) {
    if (this.mutableSubjects[triggerName] === undefined) {
      this.mutableSubjects[triggerName] = new external_rxjs_["Subject"]();
    }

    return this.mutableSubjects[triggerName];
  }

  observable$(triggerName) {
    if (this.mutableObservables[triggerName] === undefined) {
      this.mutableObservables[triggerName] = this.subject$(triggerName);
    }

    return this.mutableObservables[triggerName];
  }

}
// CONCATENATED MODULE: ./packages/neotracker-server-utils/src/pubsub/index.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return pubsub; });
 // tslint:disable-next-line export-name

const pubsub = new PubSub_PubSub();

/***/ })
/******/ ]);
//# sourceMappingURL=index.js.map